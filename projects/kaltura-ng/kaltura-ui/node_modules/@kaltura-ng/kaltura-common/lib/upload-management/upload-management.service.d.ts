import { OnDestroy, InjectionToken } from '@angular/core';
import { UploadFileData } from './upload-file-data';
import { UploadFileAdapter } from './upload-file-adapter';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/groupBy';
import { TrackedFile, TrackedFileData } from './tracked-file';
export interface TrackedFiles {
    [id: string]: TrackedFile;
}
export declare const UploadFileAdapterToken: InjectionToken<string>;
export declare class UploadManagement implements OnDestroy {
    private _uploadFileAdapter;
    private _trackedFiles;
    private _onTrackedFileChanged;
    private _maxUploadRequests;
    onTrackedFileChanged$: Observable<TrackedFileData>;
    private _tokenGenerator;
    syncUploadQueueTimeoutId: number;
    constructor(_uploadFileAdapter: UploadFileAdapter<any>[]);
    setMaxUploadRequests(maxUploads?: number): void;
    private _log;
    getTrackedFiles(): TrackedFileData[];
    getTrackedFile(fileId: string): TrackedFileData;
    addFile(file: UploadFileData): {
        id: string;
    };
    addFiles(files: UploadFileData[]): {
        id: string;
        data: UploadFileData;
    }[];
    cancelUploadWithError(id: string, reason: string): void;
    resumeUpload(id: string): void;
    resumeUploads(files: string[]): void;
    cancelUpload(id: string, purge?: boolean): void;
    purgeUpload(id: string): void;
    private _removeTrackedFile;
    private _syncUploadQueue;
    private _executePreparePhase;
    private _handlePrepareAdapterResponse;
    private _executeUploadPhase;
    private _createTrackedFile;
    private _updateTrackedFile;
    supportChunkUpload(uploadFileData: UploadFileData): boolean;
    private _initiateUpload;
    private _getUploadAdapter;
    ngOnDestroy(): void;
}
