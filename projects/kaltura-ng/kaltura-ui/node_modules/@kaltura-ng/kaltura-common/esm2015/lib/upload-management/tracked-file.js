export class TrackedFileStatuses {
}
TrackedFileStatuses.added = 'added'; // one-time status, cannot be assigned twice
TrackedFileStatuses.pendingPrepare = 'pendingPrepare';
TrackedFileStatuses.preparing = 'preparing';
TrackedFileStatuses.prepared = 'prepared'; // one-time status, cannot be assigned twice
TrackedFileStatuses.pendingUpload = 'waitingUpload';
TrackedFileStatuses.uploading = 'uploading';
TrackedFileStatuses.uploadCompleted = 'uploadCompleted'; // one-time status, cannot be assigned twice
TrackedFileStatuses.failure = 'failure';
TrackedFileStatuses.cancelled = 'cancelled';
TrackedFileStatuses.purged = 'purged'; // one-time status, cannot be assigned twice
export class TrackedFile {
    constructor(id, data) {
        this.status = TrackedFileStatuses.added;
        this.progress = 0;
        this.uploadCompleteAt = null;
        this.uploadOrder = 0;
        this._statusHistory = {
            'added': true
        };
        this._id = id;
        this.data = data;
    }
    get id() {
        return this._id;
    }
    asData() {
        return {
            id: this.id,
            status: this.status,
            uploadStartAt: this.uploadStartAt,
            progress: this.progress,
            uploadCompleteAt: this.uploadCompleteAt,
            uploadOrder: this.uploadOrder,
            failureType: this.failureType,
            failureReason: this.failureReason,
            data: this.data
        };
    }
    update(changes) {
        if (changes.status && changes.status !== this.status) {
            if (!this.canTransitionTo(changes.status)) {
                throw new Error(`file ${this.id}: cannot update status to '${changes.status}'`);
            }
            this._statusHistory[changes.status] = true;
        }
        Object.assign(this, changes);
    }
    wasInStatus(status) {
        return !!this._statusHistory[status];
    }
    canTransitionTo(toStatus) {
        let result = false;
        const trackedFile = this;
        const fromStatus = trackedFile ? trackedFile.status : null;
        if (trackedFile && fromStatus && toStatus) {
            if (fromStatus === TrackedFileStatuses.purged) {
                // never allow changing status once file was purged
                result = false;
            }
            switch (toStatus) {
                case TrackedFileStatuses.added:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.added);
                    break;
                case TrackedFileStatuses.pendingPrepare:
                    result = !this.wasInStatus(TrackedFileStatuses.prepared);
                    break;
                case TrackedFileStatuses.preparing:
                    result = !this.wasInStatus(TrackedFileStatuses.prepared)
                        && fromStatus === TrackedFileStatuses.pendingPrepare;
                    break;
                case TrackedFileStatuses.prepared:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.prepared)
                        && fromStatus === TrackedFileStatuses.preparing;
                    break;
                case TrackedFileStatuses.pendingUpload:
                    result = this.wasInStatus(TrackedFileStatuses.prepared)
                        && !this.wasInStatus(TrackedFileStatuses.uploadCompleted);
                    break;
                case TrackedFileStatuses.uploading:
                    result = !this.wasInStatus(TrackedFileStatuses.uploadCompleted)
                        && fromStatus === TrackedFileStatuses.pendingUpload;
                    break;
                case TrackedFileStatuses.uploadCompleted:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.uploadCompleted)
                        && fromStatus === TrackedFileStatuses.uploading;
                    break;
                case TrackedFileStatuses.cancelled:
                    result = ([TrackedFileStatuses.cancelled, TrackedFileStatuses.uploadCompleted, TrackedFileStatuses.purged].indexOf(fromStatus) === -1);
                    break;
                case TrackedFileStatuses.failure:
                    // always allow changing to 'failure' status (assuming 'purge' is handled separately before)
                    result = ([TrackedFileStatuses.uploadCompleted, TrackedFileStatuses.purged].indexOf(fromStatus) === -1);
                    break;
                case TrackedFileStatuses.purged:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.purged);
                    break;
                default:
                    throw new Error(`unknown status provided '${toStatus}'`);
            }
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2tlZC1maWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbHR1cmEtbmcva2FsdHVyYS1jb21tb24vIiwic291cmNlcyI6WyJsaWIvdXBsb2FkLW1hbmFnZW1lbnQvdHJhY2tlZC1maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE1BQU0sT0FBTyxtQkFBbUI7O0FBQ0wseUJBQUssR0FBc0IsT0FBTyxDQUFDLENBQUMsNENBQTRDO0FBQ2hGLGtDQUFjLEdBQXNCLGdCQUFnQixDQUFDO0FBQ3JELDZCQUFTLEdBQXNCLFdBQVcsQ0FBQztBQUMzQyw0QkFBUSxHQUFzQixVQUFVLENBQUMsQ0FBQyw0Q0FBNEM7QUFDdEYsaUNBQWEsR0FBc0IsZUFBZSxDQUFDO0FBQ25ELDZCQUFTLEdBQXNCLFdBQVcsQ0FBQztBQUMzQyxtQ0FBZSxHQUFzQixpQkFBaUIsQ0FBQyxDQUFDLDRDQUE0QztBQUNwRywyQkFBTyxHQUFzQixTQUFTLENBQUM7QUFDdkMsNkJBQVMsR0FBc0IsV0FBVyxDQUFDO0FBQzNDLDBCQUFNLEdBQXNCLFFBQVEsQ0FBQyxDQUFFLDRDQUE0QztBQTJCOUcsTUFBTSxPQUFPLFdBQVc7SUFrQnBCLFlBQVksRUFBVSxFQUFFLElBQW9CO1FBYjVDLFdBQU0sR0FBc0IsbUJBQW1CLENBQUMsS0FBSyxDQUFDO1FBRXRELGFBQVEsR0FBWSxDQUFDLENBQUM7UUFDdEIscUJBQWdCLEdBQVMsSUFBSSxDQUFDO1FBQzlCLGdCQUFXLEdBQVcsQ0FBQyxDQUFDO1FBS2hCLG1CQUFjLEdBQWdDO1lBQ2xELE9BQU8sRUFBRyxJQUFJO1NBQ2pCLENBQUM7UUFJRSxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFwQkQsSUFBVyxFQUFFO1FBQ1QsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3BCLENBQUM7SUFvQk0sTUFBTTtRQUNULE9BQU87WUFDSCxF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dXBsb2FkLWZpbGUtZGF0YSc7XG5pbXBvcnQgeyBJU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xuXG5leHBvcnQgdHlwZSBUcmFja2VkRmlsZVN0YXR1cyA9IHN0cmluZ1xuXG5leHBvcnQgY2xhc3MgVHJhY2tlZEZpbGVTdGF0dXNlcyB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBhZGRlZDogVHJhY2tlZEZpbGVTdGF0dXMgPSAnYWRkZWQnOyAvLyBvbmUtdGltZSBzdGF0dXMsIGNhbm5vdCBiZSBhc3NpZ25lZCB0d2ljZVxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcGVuZGluZ1ByZXBhcmU6IFRyYWNrZWRGaWxlU3RhdHVzID0gJ3BlbmRpbmdQcmVwYXJlJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHByZXBhcmluZzogVHJhY2tlZEZpbGVTdGF0dXMgPSAncHJlcGFyaW5nJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHByZXBhcmVkOiBUcmFja2VkRmlsZVN0YXR1cyA9ICdwcmVwYXJlZCc7IC8vIG9uZS10aW1lIHN0YXR1cywgY2Fubm90IGJlIGFzc2lnbmVkIHR3aWNlXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBwZW5kaW5nVXBsb2FkOiBUcmFja2VkRmlsZVN0YXR1cyA9ICd3YWl0aW5nVXBsb2FkJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHVwbG9hZGluZzogVHJhY2tlZEZpbGVTdGF0dXMgPSAndXBsb2FkaW5nJztcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHVwbG9hZENvbXBsZXRlZDogVHJhY2tlZEZpbGVTdGF0dXMgPSAndXBsb2FkQ29tcGxldGVkJzsgLy8gb25lLXRpbWUgc3RhdHVzLCBjYW5ub3QgYmUgYXNzaWduZWQgdHdpY2VcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGZhaWx1cmU6IFRyYWNrZWRGaWxlU3RhdHVzID0gJ2ZhaWx1cmUnO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgY2FuY2VsbGVkOiBUcmFja2VkRmlsZVN0YXR1cyA9ICdjYW5jZWxsZWQnO1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcHVyZ2VkOiBUcmFja2VkRmlsZVN0YXR1cyA9ICdwdXJnZWQnOyAgLy8gb25lLXRpbWUgc3RhdHVzLCBjYW5ub3QgYmUgYXNzaWduZWQgdHdpY2Vcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFja2VkRmlsZURhdGFcbntcbiAgICBpZDogc3RyaW5nO1xuICAgIHN0YXR1czogVHJhY2tlZEZpbGVTdGF0dXM7XG4gICAgdXBsb2FkU3RhcnRBdDogRGF0ZTtcbiAgICBwcm9ncmVzczogbnVtYmVyO1xuICAgIHVwbG9hZENvbXBsZXRlQXQ/OiBEYXRlO1xuICAgIHVwbG9hZE9yZGVyOiBudW1iZXI7XG4gICAgZmFpbHVyZVR5cGU/OiBzdHJpbmc7XG4gICAgZmFpbHVyZVJlYXNvbj86IHN0cmluZztcbiAgICBkYXRhOiBVcGxvYWRGaWxlRGF0YTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUcmFja2VkRmlsZUNoYW5nZXNcbntcbiAgICBzdGF0dXM/OiBUcmFja2VkRmlsZVN0YXR1cztcbiAgICB1cGxvYWRTdGFydEF0PzogRGF0ZTtcbiAgICBwcm9ncmVzcz86IG51bWJlcjtcbiAgICB1cGxvYWRDb21wbGV0ZUF0PzogRGF0ZTtcbiAgICB1cGxvYWRPcmRlcj86IG51bWJlcjtcbiAgICBmYWlsdXJlVHlwZT86IHN0cmluZztcbiAgICBmYWlsdXJlUmVhc29uPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgVHJhY2tlZEZpbGUge1xuICAgIHByaXZhdGUgX2lkOiBzdHJpbmc7XG4gICAgcHVibGljIGdldCBpZCgpOnN0cmluZ3tcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICBzdGF0dXM6IFRyYWNrZWRGaWxlU3RhdHVzID0gVHJhY2tlZEZpbGVTdGF0dXNlcy5hZGRlZDtcbiAgICB1cGxvYWRTdGFydEF0PzogRGF0ZTtcbiAgICBwcm9ncmVzczogbnVtYmVyID0gIDA7XG4gICAgdXBsb2FkQ29tcGxldGVBdDogRGF0ZSA9IG51bGw7XG4gICAgdXBsb2FkT3JkZXI6IG51bWJlciA9IDA7XG4gICAgZmFpbHVyZVR5cGU6IHN0cmluZztcbiAgICBmYWlsdXJlUmVhc29uOiBzdHJpbmc7XG4gICAgZGF0YTogVXBsb2FkRmlsZURhdGE7XG4gICAgdXBsb2FkU3Vic2NyaXB0aW9uOiBJU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgX3N0YXR1c0hpc3RvcnkgOiB7IFtrZXk6c3RyaW5nXSA6IGJvb2xlYW4gfSA9IHtcbiAgICAgICAgJ2FkZGVkJyA6IHRydWVcbiAgICB9O1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgZGF0YTogVXBsb2FkRmlsZURhdGEpXG4gICAge1xuICAgICAgICB0aGlzLl9pZCA9IGlkO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc0RhdGEoKSA6IFRyYWNrZWRGaWxlRGF0YXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxuICAgICAgICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgICAgICAgIHVwbG9hZFN0YXJ0QXQ6IHRoaXMudXBsb2FkU3RhcnRBdCxcbiAgICAgICAgICAgIHByb2dyZXNzOiB0aGlzLnByb2dyZXNzLFxuICAgICAgICAgICAgdXBsb2FkQ29tcGxldGVBdDogdGhpcy51cGxvYWRDb21wbGV0ZUF0LFxuICAgICAgICAgICAgdXBsb2FkT3JkZXI6IHRoaXMudXBsb2FkT3JkZXIsXG4gICAgICAgICAgICBmYWlsdXJlVHlwZTogdGhpcy5mYWlsdXJlVHlwZSxcbiAgICAgICAgICAgIGZhaWx1cmVSZWFzb246IHRoaXMuZmFpbHVyZVJlYXNvbixcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUoY2hhbmdlczogVHJhY2tlZEZpbGVDaGFuZ2VzKTogdm9pZFxuICAgIHtcbiAgICAgICAgaWYgKGNoYW5nZXMuc3RhdHVzICYmIGNoYW5nZXMuc3RhdHVzICE9PSB0aGlzLnN0YXR1cykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNhblRyYW5zaXRpb25UbyhjaGFuZ2VzLnN0YXR1cykpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmaWxlICR7dGhpcy5pZH06IGNhbm5vdCB1cGRhdGUgc3RhdHVzIHRvICcke2NoYW5nZXMuc3RhdHVzfSdgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc3RhdHVzSGlzdG9yeVtjaGFuZ2VzLnN0YXR1c10gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLGNoYW5nZXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyB3YXNJblN0YXR1cyhzdGF0dXM6IFRyYWNrZWRGaWxlU3RhdHVzKTogYm9vbGVhblxuICAgIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fc3RhdHVzSGlzdG9yeVtzdGF0dXNdO1xuICAgIH1cblxuICAgIHB1YmxpYyBjYW5UcmFuc2l0aW9uVG8odG9TdGF0dXM6IHN0cmluZykgOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgICAgICBjb25zdCB0cmFja2VkRmlsZSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZyb21TdGF0dXMgPSB0cmFja2VkRmlsZSA/IHRyYWNrZWRGaWxlLnN0YXR1cyA6IG51bGw7XG5cbiAgICAgICAgaWYgKHRyYWNrZWRGaWxlICAmJiBmcm9tU3RhdHVzICYmIHRvU3RhdHVzKSB7XG5cbiAgICAgICAgICAgIGlmIChmcm9tU3RhdHVzID09PSBUcmFja2VkRmlsZVN0YXR1c2VzLnB1cmdlZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBuZXZlciBhbGxvdyBjaGFuZ2luZyBzdGF0dXMgb25jZSBmaWxlIHdhcyBwdXJnZWRcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3dpdGNoICh0b1N0YXR1cykge1xuICAgICAgICAgICAgICAgIGNhc2UgVHJhY2tlZEZpbGVTdGF0dXNlcy5hZGRlZDpcbiAgICAgICAgICAgICAgICAgICAgLy8gb25lLXRpbWUgc3RhdHVzLCBjYW5ub3QgYmUgYXNzaWduZWQgdHdpY2VcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gIXRoaXMud2FzSW5TdGF0dXMoVHJhY2tlZEZpbGVTdGF0dXNlcy5hZGRlZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHJhY2tlZEZpbGVTdGF0dXNlcy5wZW5kaW5nUHJlcGFyZTpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gIXRoaXMud2FzSW5TdGF0dXMoVHJhY2tlZEZpbGVTdGF0dXNlcy5wcmVwYXJlZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHJhY2tlZEZpbGVTdGF0dXNlcy5wcmVwYXJpbmc6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICF0aGlzLndhc0luU3RhdHVzKFRyYWNrZWRGaWxlU3RhdHVzZXMucHJlcGFyZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBmcm9tU3RhdHVzID09PSBUcmFja2VkRmlsZVN0YXR1c2VzLnBlbmRpbmdQcmVwYXJlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRyYWNrZWRGaWxlU3RhdHVzZXMucHJlcGFyZWQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZS10aW1lIHN0YXR1cywgY2Fubm90IGJlIGFzc2lnbmVkIHR3aWNlXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICF0aGlzLndhc0luU3RhdHVzKFRyYWNrZWRGaWxlU3RhdHVzZXMucHJlcGFyZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBmcm9tU3RhdHVzID09PSBUcmFja2VkRmlsZVN0YXR1c2VzLnByZXBhcmluZztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFja2VkRmlsZVN0YXR1c2VzLnBlbmRpbmdVcGxvYWQ6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMud2FzSW5TdGF0dXMoVHJhY2tlZEZpbGVTdGF0dXNlcy5wcmVwYXJlZClcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICF0aGlzLndhc0luU3RhdHVzKFRyYWNrZWRGaWxlU3RhdHVzZXMudXBsb2FkQ29tcGxldGVkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFja2VkRmlsZVN0YXR1c2VzLnVwbG9hZGluZzpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gIXRoaXMud2FzSW5TdGF0dXMoVHJhY2tlZEZpbGVTdGF0dXNlcy51cGxvYWRDb21wbGV0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBmcm9tU3RhdHVzID09PSBUcmFja2VkRmlsZVN0YXR1c2VzLnBlbmRpbmdVcGxvYWQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHJhY2tlZEZpbGVTdGF0dXNlcy51cGxvYWRDb21wbGV0ZWQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIG9uZS10aW1lIHN0YXR1cywgY2Fubm90IGJlIGFzc2lnbmVkIHR3aWNlXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9ICF0aGlzLndhc0luU3RhdHVzKFRyYWNrZWRGaWxlU3RhdHVzZXMudXBsb2FkQ29tcGxldGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgZnJvbVN0YXR1cyA9PT0gVHJhY2tlZEZpbGVTdGF0dXNlcy51cGxvYWRpbmc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgVHJhY2tlZEZpbGVTdGF0dXNlcy5jYW5jZWxsZWQ6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IChbVHJhY2tlZEZpbGVTdGF0dXNlcy5jYW5jZWxsZWQsIFRyYWNrZWRGaWxlU3RhdHVzZXMudXBsb2FkQ29tcGxldGVkLCBUcmFja2VkRmlsZVN0YXR1c2VzLnB1cmdlZF0uaW5kZXhPZihmcm9tU3RhdHVzKSA9PT0gLTEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFRyYWNrZWRGaWxlU3RhdHVzZXMuZmFpbHVyZTpcbiAgICAgICAgICAgICAgICAgICAgLy8gYWx3YXlzIGFsbG93IGNoYW5naW5nIHRvICdmYWlsdXJlJyBzdGF0dXMgKGFzc3VtaW5nICdwdXJnZScgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gKFtUcmFja2VkRmlsZVN0YXR1c2VzLnVwbG9hZENvbXBsZXRlZCwgVHJhY2tlZEZpbGVTdGF0dXNlcy5wdXJnZWRdLmluZGV4T2YoZnJvbVN0YXR1cykgPT09IC0xKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBUcmFja2VkRmlsZVN0YXR1c2VzLnB1cmdlZDpcbiAgICAgICAgICAgICAgICAgICAgLy8gb25lLXRpbWUgc3RhdHVzLCBjYW5ub3QgYmUgYXNzaWduZWQgdHdpY2VcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gIXRoaXMud2FzSW5TdGF0dXMoVHJhY2tlZEZpbGVTdGF0dXNlcy5wdXJnZWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVua25vd24gc3RhdHVzIHByb3ZpZGVkICcke3RvU3RhdHVzfSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG59XG4iXX0=