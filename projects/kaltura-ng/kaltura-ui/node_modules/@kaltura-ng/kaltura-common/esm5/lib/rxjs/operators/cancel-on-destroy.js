import { __extends } from "tslib";
import { merge, Subject, Subscriber } from "rxjs";
var __ngOnDestroySource__ = Symbol("__ngOnDestroySource__");
var __ngOnDestroy__ = Symbol("__ngOnDestroy__");
export function cancelOnDestroy(instance, manualDestroy) {
    return function (source) { return source.lift(new CancelOnDestroyOperator(instance, manualDestroy)); };
}
var CancelOnDestroyOperator = /** @class */ (function () {
    function CancelOnDestroyOperator(instance, manualDestroy) {
        this.instance = instance;
        this.manualDestroy = manualDestroy;
        if (instance.ngOnDestroy) {
            if (!instance[__ngOnDestroySource__]) {
                instance[__ngOnDestroySource__] = new Subject();
                instance[__ngOnDestroy__] = instance.ngOnDestroy;
                instance.ngOnDestroy = function () {
                    this[__ngOnDestroy__].apply(this, arguments);
                    this[__ngOnDestroySource__].next();
                    this[__ngOnDestroySource__].complete();
                };
            }
        }
    }
    CancelOnDestroyOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CancelOnDestroySubscriber(subscriber, this.instance, this.manualDestroy));
    };
    return CancelOnDestroyOperator;
}());
var CancelOnDestroySubscriber = /** @class */ (function (_super) {
    __extends(CancelOnDestroySubscriber, _super);
    function CancelOnDestroySubscriber(destination, _instance, manualDestroy) {
        var _this = _super.call(this, destination) || this;
        _this._instance = _instance;
        _this.manualDestroy = manualDestroy;
        var sources = manualDestroy
            ? merge(manualDestroy, _instance[__ngOnDestroySource__])
            : _instance[__ngOnDestroySource__].asObservable();
        _this.add(sources.subscribe(function () {
            destination.unsubscribe();
        }));
        return _this;
    }
    return CancelOnDestroySubscriber;
}(Subscriber));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuY2VsLW9uLWRlc3Ryb3kuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Aa2FsdHVyYS1uZy9rYWx0dXJhLWNvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9yeGpzL29wZXJhdG9ycy9jYW5jZWwtb24tZGVzdHJveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLEtBQUssRUFBa0QsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFHL0csSUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUM5RCxJQUFNLGVBQWUsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQU9sRCxNQUFNLFVBQVUsZUFBZSxDQUFJLFFBQW1CLEVBQ25CLGFBQStCO0lBQ2hFLE9BQU8sVUFBQyxNQUFxQixJQUFLLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLHVCQUF1QixDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQyxFQUFqRSxDQUFpRSxDQUFDO0FBQ3RHLENBQUM7QUFFRDtJQUNFLGlDQUFvQixRQUFtQixFQUFVLGFBQStCO1FBQTVELGFBQVEsR0FBUixRQUFRLENBQVc7UUFBVSxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDOUUsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO1lBQ3hCLElBQUksQ0FBcUIsUUFBUyxDQUFDLHFCQUFxQixDQUFDLEVBQUU7Z0JBQ3JDLFFBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7Z0JBQ2pELFFBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDO2dCQUV0RSxRQUFRLENBQUMsV0FBVyxHQUFHO29CQUVyQixJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztvQkFDN0MsSUFBSSxDQUFDLHFCQUFxQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ25DLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN6QyxDQUFDLENBQUM7YUFDSDtTQUNGO0lBQ0gsQ0FBQztJQUVELHNDQUFJLEdBQUosVUFBSyxVQUF5QixFQUFFLE1BQVc7UUFFekMsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUkseUJBQXlCLENBQUMsVUFBVSxFQUFxQixJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzNILENBQUM7SUFDSCw4QkFBQztBQUFELENBQUMsQUFyQkQsSUFxQkM7QUFFRDtJQUEyQyw2Q0FBYTtJQUN0RCxtQ0FBWSxXQUEwQixFQUNsQixTQUE0QixFQUM1QixhQUErQjtRQUZuRCxZQUdFLGtCQUFNLFdBQVcsQ0FBQyxTQVduQjtRQWJtQixlQUFTLEdBQVQsU0FBUyxDQUFtQjtRQUM1QixtQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFHakQsSUFBTSxPQUFPLEdBQUcsYUFBYTtZQUMzQixDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEQsS0FBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUN4QjtZQUNFLFdBQVcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixDQUFDLENBQ0YsQ0FBQyxDQUFDOztJQUNMLENBQUM7SUFDSCxnQ0FBQztBQUFELENBQUMsQUFoQkQsQ0FBMkMsVUFBVSxHQWdCcEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge21lcmdlLCBNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb24sIE9ic2VydmFibGUsIE9wZXJhdG9yLCBTdWJqZWN0LCBTdWJzY3JpYmVyLCBUZWFyZG93bkxvZ2ljfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHtPbkRlc3Ryb3l9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmNvbnN0IF9fbmdPbkRlc3Ryb3lTb3VyY2VfXyA9IFN5bWJvbChcIl9fbmdPbkRlc3Ryb3lTb3VyY2VfX1wiKTtcbmNvbnN0IF9fbmdPbkRlc3Ryb3lfXyA9IFN5bWJvbChcIl9fbmdPbkRlc3Ryb3lfX1wiKTtcblxuaW50ZXJmYWNlIEVuaGFuY2VkT25EZXN0cm95IGV4dGVuZHMgT25EZXN0cm95IHtcbiAgW19fbmdPbkRlc3Ryb3lTb3VyY2VfX106IFN1YmplY3Q8c3RyaW5nPjtcbiAgW19fbmdPbkRlc3Ryb3lfX106ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWxPbkRlc3Ryb3k8VD4oaW5zdGFuY2U6IE9uRGVzdHJveSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFudWFsRGVzdHJveT86IE9ic2VydmFibGU8YW55Pik6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG4gIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPFQ+KSA9PiBzb3VyY2UubGlmdChuZXcgQ2FuY2VsT25EZXN0cm95T3BlcmF0b3IoaW5zdGFuY2UsIG1hbnVhbERlc3Ryb3kpKTtcbn1cblxuY2xhc3MgQ2FuY2VsT25EZXN0cm95T3BlcmF0b3I8VD4gaW1wbGVtZW50cyBPcGVyYXRvcjxULCBUPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5zdGFuY2U6IE9uRGVzdHJveSwgcHJpdmF0ZSBtYW51YWxEZXN0cm95PzogT2JzZXJ2YWJsZTxhbnk+KSB7XG4gICAgaWYgKGluc3RhbmNlLm5nT25EZXN0cm95KSB7XG4gICAgICBpZiAoISg8RW5oYW5jZWRPbkRlc3Ryb3k+aW5zdGFuY2UpW19fbmdPbkRlc3Ryb3lTb3VyY2VfX10pIHtcbiAgICAgICAgKDxFbmhhbmNlZE9uRGVzdHJveT5pbnN0YW5jZSlbX19uZ09uRGVzdHJveVNvdXJjZV9fXSA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICg8RW5oYW5jZWRPbkRlc3Ryb3k+aW5zdGFuY2UpW19fbmdPbkRlc3Ryb3lfX10gPSBpbnN0YW5jZS5uZ09uRGVzdHJveTtcblxuICAgICAgICBpbnN0YW5jZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICh0aGlzOiBFbmhhbmNlZE9uRGVzdHJveSkge1xuXG4gICAgICAgICAgdGhpc1tfX25nT25EZXN0cm95X19dLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgdGhpc1tfX25nT25EZXN0cm95U291cmNlX19dLm5leHQoKTtcbiAgICAgICAgICB0aGlzW19fbmdPbkRlc3Ryb3lTb3VyY2VfX10uY29tcGxldGUoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjYWxsKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4sIHNvdXJjZTogYW55KTogVGVhcmRvd25Mb2dpYyB7XG5cbiAgICByZXR1cm4gc291cmNlLnN1YnNjcmliZShuZXcgQ2FuY2VsT25EZXN0cm95U3Vic2NyaWJlcihzdWJzY3JpYmVyLCA8RW5oYW5jZWRPbkRlc3Ryb3k+dGhpcy5pbnN0YW5jZSwgdGhpcy5tYW51YWxEZXN0cm95KSk7XG4gIH1cbn1cblxuY2xhc3MgQ2FuY2VsT25EZXN0cm95U3Vic2NyaWJlcjxUPiBleHRlbmRzIFN1YnNjcmliZXI8VD4ge1xuICBjb25zdHJ1Y3RvcihkZXN0aW5hdGlvbjogU3Vic2NyaWJlcjxUPixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBfaW5zdGFuY2U6IEVuaGFuY2VkT25EZXN0cm95LFxuICAgICAgICAgICAgICBwcml2YXRlIG1hbnVhbERlc3Ryb3k/OiBPYnNlcnZhYmxlPGFueT4pIHtcbiAgICBzdXBlcihkZXN0aW5hdGlvbik7XG5cbiAgICBjb25zdCBzb3VyY2VzID0gbWFudWFsRGVzdHJveVxuICAgICAgPyBtZXJnZShtYW51YWxEZXN0cm95LCBfaW5zdGFuY2VbX19uZ09uRGVzdHJveVNvdXJjZV9fXSlcbiAgICAgIDogX2luc3RhbmNlW19fbmdPbkRlc3Ryb3lTb3VyY2VfX10uYXNPYnNlcnZhYmxlKCk7XG5cbiAgICB0aGlzLmFkZChzb3VyY2VzLnN1YnNjcmliZShcbiAgICAgICgpID0+IHtcbiAgICAgICAgZGVzdGluYXRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICApKTtcbiAgfVxufVxuIl19