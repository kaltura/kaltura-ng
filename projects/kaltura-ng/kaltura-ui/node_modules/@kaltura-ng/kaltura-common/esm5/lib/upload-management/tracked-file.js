var TrackedFileStatuses = /** @class */ (function () {
    function TrackedFileStatuses() {
    }
    TrackedFileStatuses.added = 'added'; // one-time status, cannot be assigned twice
    TrackedFileStatuses.pendingPrepare = 'pendingPrepare';
    TrackedFileStatuses.preparing = 'preparing';
    TrackedFileStatuses.prepared = 'prepared'; // one-time status, cannot be assigned twice
    TrackedFileStatuses.pendingUpload = 'waitingUpload';
    TrackedFileStatuses.uploading = 'uploading';
    TrackedFileStatuses.uploadCompleted = 'uploadCompleted'; // one-time status, cannot be assigned twice
    TrackedFileStatuses.failure = 'failure';
    TrackedFileStatuses.cancelled = 'cancelled';
    TrackedFileStatuses.purged = 'purged'; // one-time status, cannot be assigned twice
    return TrackedFileStatuses;
}());
export { TrackedFileStatuses };
var TrackedFile = /** @class */ (function () {
    function TrackedFile(id, data) {
        this.status = TrackedFileStatuses.added;
        this.progress = 0;
        this.uploadCompleteAt = null;
        this.uploadOrder = 0;
        this._statusHistory = {
            'added': true
        };
        this._id = id;
        this.data = data;
    }
    Object.defineProperty(TrackedFile.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    TrackedFile.prototype.asData = function () {
        return {
            id: this.id,
            status: this.status,
            uploadStartAt: this.uploadStartAt,
            progress: this.progress,
            uploadCompleteAt: this.uploadCompleteAt,
            uploadOrder: this.uploadOrder,
            failureType: this.failureType,
            failureReason: this.failureReason,
            data: this.data
        };
    };
    TrackedFile.prototype.update = function (changes) {
        if (changes.status && changes.status !== this.status) {
            if (!this.canTransitionTo(changes.status)) {
                throw new Error("file " + this.id + ": cannot update status to '" + changes.status + "'");
            }
            this._statusHistory[changes.status] = true;
        }
        Object.assign(this, changes);
    };
    TrackedFile.prototype.wasInStatus = function (status) {
        return !!this._statusHistory[status];
    };
    TrackedFile.prototype.canTransitionTo = function (toStatus) {
        var result = false;
        var trackedFile = this;
        var fromStatus = trackedFile ? trackedFile.status : null;
        if (trackedFile && fromStatus && toStatus) {
            if (fromStatus === TrackedFileStatuses.purged) {
                // never allow changing status once file was purged
                result = false;
            }
            switch (toStatus) {
                case TrackedFileStatuses.added:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.added);
                    break;
                case TrackedFileStatuses.pendingPrepare:
                    result = !this.wasInStatus(TrackedFileStatuses.prepared);
                    break;
                case TrackedFileStatuses.preparing:
                    result = !this.wasInStatus(TrackedFileStatuses.prepared)
                        && fromStatus === TrackedFileStatuses.pendingPrepare;
                    break;
                case TrackedFileStatuses.prepared:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.prepared)
                        && fromStatus === TrackedFileStatuses.preparing;
                    break;
                case TrackedFileStatuses.pendingUpload:
                    result = this.wasInStatus(TrackedFileStatuses.prepared)
                        && !this.wasInStatus(TrackedFileStatuses.uploadCompleted);
                    break;
                case TrackedFileStatuses.uploading:
                    result = !this.wasInStatus(TrackedFileStatuses.uploadCompleted)
                        && fromStatus === TrackedFileStatuses.pendingUpload;
                    break;
                case TrackedFileStatuses.uploadCompleted:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.uploadCompleted)
                        && fromStatus === TrackedFileStatuses.uploading;
                    break;
                case TrackedFileStatuses.cancelled:
                    result = ([TrackedFileStatuses.cancelled, TrackedFileStatuses.uploadCompleted, TrackedFileStatuses.purged].indexOf(fromStatus) === -1);
                    break;
                case TrackedFileStatuses.failure:
                    // always allow changing to 'failure' status (assuming 'purge' is handled separately before)
                    result = ([TrackedFileStatuses.uploadCompleted, TrackedFileStatuses.purged].indexOf(fromStatus) === -1);
                    break;
                case TrackedFileStatuses.purged:
                    // one-time status, cannot be assigned twice
                    result = !this.wasInStatus(TrackedFileStatuses.purged);
                    break;
                default:
                    throw new Error("unknown status provided '" + toStatus + "'");
            }
        }
        return result;
    };
    return TrackedFile;
}());
export { TrackedFile };
//# sourceMappingURL=data:application/json;base64,