import { __decorate, __metadata, __param, __read, __spread } from "tslib";
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Subject } from 'rxjs';
import 'rxjs/add/operator/groupBy';
import { FriendlyHashId } from '../friendly-hash-id';
import { TrackedFile, TrackedFileStatuses } from './tracked-file';
import { cancelOnDestroy } from '../rxjs/operators';
export var UploadFileAdapterToken = new InjectionToken('upload-file-adapter');
var UploadManagement = /** @class */ (function () {
    function UploadManagement(_uploadFileAdapter) {
        this._uploadFileAdapter = _uploadFileAdapter;
        this._trackedFiles = {};
        this._onTrackedFileChanged = new Subject();
        this._maxUploadRequests = null;
        this.onTrackedFileChanged$ = this._onTrackedFileChanged.asObservable();
        this._tokenGenerator = new FriendlyHashId();
    }
    UploadManagement.prototype.setMaxUploadRequests = function (maxUploads) {
        if (maxUploads === null || maxUploads > 0) {
            this._log('info', "limit max upload requests to " + maxUploads);
            this._maxUploadRequests = maxUploads;
        }
        else {
            this._log('info', "remove max upload limitation");
            this._maxUploadRequests = null;
        }
    };
    // TODO [kmcng] replace this function with log library
    UploadManagement.prototype._log = function (level, message, fileId) {
        var messageContext = fileId ? "file '" + fileId + "'" : '';
        var origin = 'upload manager';
        var formattedMessage = "log: [" + level + "] [" + origin + "] " + messageContext + ": " + message;
        switch (level) {
            case 'silly':
            case 'debug':
            case 'info':
                console.log(formattedMessage);
                break;
            case 'warn':
                console.warn(formattedMessage);
                break;
            case 'error':
                console.error(formattedMessage);
                break;
        }
    };
    UploadManagement.prototype.getTrackedFiles = function () {
        var _this = this;
        return Object.keys(this._trackedFiles).map(function (fileId) { return _this._trackedFiles[fileId].asData(); });
    };
    UploadManagement.prototype.getTrackedFile = function (fileId) {
        var relevantFile = this._trackedFiles[fileId];
        return relevantFile ? relevantFile.asData() : null;
    };
    UploadManagement.prototype.addFile = function (file) {
        var _a = __read(this.addFiles([file]), 1), newFileId = _a[0];
        return newFileId;
    };
    UploadManagement.prototype.addFiles = function (files) {
        var _this = this;
        var result = [];
        files.forEach(function (fileData) {
            var newUploadId = _this._tokenGenerator.generateUnique(Object.keys(_this._trackedFiles));
            _this._log('info', "add new file '" + fileData.getFileName() + "' to queue with unique file id", newUploadId);
            _this._createTrackedFile(newUploadId, fileData);
            result.push({ id: newUploadId, data: fileData });
        });
        if (result.length) {
            this._syncUploadQueue();
        }
        return result;
    };
    UploadManagement.prototype.cancelUploadWithError = function (id, reason) {
        this._log('info', "cancel file upload with custom reason '" + reason + "'", id);
        var trackedFile = this._trackedFiles[id];
        if (trackedFile) {
            {
                if (trackedFile.canTransitionTo(TrackedFileStatuses.cancelled)) {
                    this.cancelUpload(id, false);
                    if (trackedFile.canTransitionTo(TrackedFileStatuses.failure)) {
                        this._updateTrackedFile(trackedFile, {
                            status: TrackedFileStatuses.failure,
                            failureReason: reason || 'unknown error',
                            failureType: 'manual_error'
                        });
                    }
                }
            }
        }
        else {
            this._log('warn', 'cannot cancel upload, failed to find file with provided id', id);
        }
    };
    UploadManagement.prototype.resumeUpload = function (id) {
        this.resumeUploads([id]);
    };
    UploadManagement.prototype.resumeUploads = function (files) {
        var _this = this;
        var syncUploadQueue = false;
        files.forEach(function (id) {
            _this._log('info', "resume file upload.", id);
            var trackedFile = _this._trackedFiles[id];
            if (trackedFile) {
                if (trackedFile.wasInStatus(TrackedFileStatuses.prepared)) {
                    _this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.pendingUpload
                    });
                }
                else {
                    _this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.pendingPrepare
                    });
                }
            }
            else {
                _this._log('warn', 'cannot resume upload, failed to find file with provided id', id);
            }
        });
        this._syncUploadQueue();
    };
    UploadManagement.prototype.cancelUpload = function (id, purge) {
        if (purge === void 0) { purge = true; }
        this._log('info', "cancel file upload.", id);
        var trackedFile = this._trackedFiles[id];
        if (trackedFile) {
            if (trackedFile.status !== TrackedFileStatuses.cancelled
                && trackedFile.canTransitionTo(TrackedFileStatuses.cancelled)) {
                if (trackedFile.uploadSubscription) {
                    trackedFile.uploadSubscription.unsubscribe();
                    trackedFile.uploadSubscription = null;
                }
                this._updateTrackedFile(trackedFile, {
                    status: TrackedFileStatuses.cancelled
                });
                if (purge) {
                    this.purgeUpload(id);
                }
                this._syncUploadQueue();
            }
        }
        else {
            this._log('warn', 'cannot cancel upload, failed to find file with provided id', id);
        }
    };
    UploadManagement.prototype.purgeUpload = function (id) {
        this._log('info', "purge file from queue.", id);
        var trackedFile = this._trackedFiles[id];
        if (trackedFile) {
            if (trackedFile.canTransitionTo(TrackedFileStatuses.purged)) {
                this.cancelUpload(id, false);
                this._updateTrackedFile(trackedFile, { status: TrackedFileStatuses.purged });
                this._removeTrackedFile(trackedFile);
            }
        }
        else {
            this._log('warn', 'cannot purge upload, failed to find file with provided id', id);
        }
    };
    UploadManagement.prototype._removeTrackedFile = function (trackedFile) {
        this._log('info', "remove tracked file from queue", trackedFile.id);
        // Developer notice - this is a cleanup function just in case.
        if (trackedFile.uploadSubscription) {
            trackedFile.uploadSubscription.unsubscribe();
            trackedFile.uploadSubscription = null;
        }
        delete this._trackedFiles[trackedFile.id];
    };
    UploadManagement.prototype._syncUploadQueue = function () {
        var _this = this;
        if (this.syncUploadQueueTimeoutId) {
            clearTimeout(this.syncUploadQueueTimeoutId);
            this.syncUploadQueueTimeoutId = null;
        }
        // DEVELOPER NOTICE: This logic is delayed to the next event loop on purpose to prevent
        // collision between two sync requests
        this.syncUploadQueueTimeoutId = setTimeout(function () {
            _this._log('info', "syncing upload queue");
            _this.syncUploadQueueTimeoutId = null;
            _this._executePreparePhase();
            _this._executeUploadPhase();
        }, 200);
    };
    UploadManagement.prototype._executePreparePhase = function () {
        var _this = this;
        var files = Object.keys(this._trackedFiles).map(function (fileId) { return _this._trackedFiles[fileId]; }).filter(function (trackedFile) {
            return trackedFile.status === TrackedFileStatuses.pendingPrepare
                && trackedFile.canTransitionTo(TrackedFileStatuses.preparing);
        });
        if (files.length) {
            this._log('info', "handling " + files.length + " files, waiting to be prepared");
            var groupedFiles = files.reduce(function (acc, curr) {
                var uploadAdapter = _this._getUploadAdapter(curr.data) || null;
                var matchedItem = acc.find(function (item) { return item.adapter ? item.adapter.constructor === uploadAdapter.constructor : item.adapter === null; });
                if (matchedItem) {
                    matchedItem.files.push(curr);
                }
                else {
                    acc.push({ adapter: uploadAdapter, files: [curr] });
                }
                return acc;
            }, []);
            groupedFiles.forEach(function (item) {
                if (item.adapter) {
                    _this._log('debug', "executing prepare phase for " + item.files.length + " files with adapter '" + item.adapter.label + "'");
                    item.files.forEach(function (file) {
                        _this._updateTrackedFile(file, { status: TrackedFileStatuses.preparing });
                    });
                    item.adapter.prepare(item.files)
                        .pipe(cancelOnDestroy(_this))
                        .subscribe(function (preparedFiles) {
                        _this._log('debug', "executing prepare phase succeeded for " + item.files.length + " files with adapter '" + item.adapter.label + "'.");
                        _this._handlePrepareAdapterResponse(preparedFiles);
                        _this._syncUploadQueue();
                    }, function (reason) {
                        _this._log('error', "executing prepare phase failed for " + item.files.length + " files with adapter '" + item.adapter.label + "'. error: " + reason.message);
                        _this._handlePrepareAdapterResponse(item.files.map(function (file) { return ({ id: file.id, status: false }); }));
                        _this._syncUploadQueue();
                    });
                }
                else {
                    item.files.forEach(function (file) {
                        _this._updateTrackedFile(file, {
                            status: TrackedFileStatuses.failure,
                            failureReason: 'upload destination is not supported',
                            failureType: 'unknown_destination'
                        });
                    });
                }
            });
        }
    };
    UploadManagement.prototype._handlePrepareAdapterResponse = function (responseFiles) {
        var _this = this;
        responseFiles.forEach(function (responseFile) {
            var trackedFile = _this._trackedFiles[responseFile.id];
            if (!trackedFile) {
                _this._log('warn', "cannot handle prepare response for file '" + responseFile.id + "' since there is no tracking information for that file (did the user purge the file during the prepare execution?)");
            }
            else if (trackedFile.status !== TrackedFileStatuses.preparing) {
                _this._log('warn', "cannot handle file result from prepare action (did the user cancel the file upload during the prepare execution?)", trackedFile.id);
            }
            else if (responseFile.status) {
                var changedStatusToPrepared = _this._updateTrackedFile(trackedFile, {
                    status: TrackedFileStatuses.prepared
                });
                if (changedStatusToPrepared) {
                    _this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.pendingUpload
                    });
                }
            }
            else {
                _this._updateTrackedFile(trackedFile, {
                    status: TrackedFileStatuses.failure,
                    failureReason: 'failed to prepare upload',
                    failureType: 'preparation_failed'
                });
            }
        });
    };
    UploadManagement.prototype._executeUploadPhase = function () {
        var _this = this;
        var waitingForUploadsFiles = [];
        var activeUploadFiles = [];
        Object.keys(this._trackedFiles).forEach(function (fileId) {
            var trackedFile = _this._trackedFiles[fileId];
            if (trackedFile.status === TrackedFileStatuses.uploading) {
                activeUploadFiles.push(trackedFile);
            }
            else if (trackedFile.status === TrackedFileStatuses.pendingUpload
                && trackedFile.canTransitionTo(TrackedFileStatuses.uploading)) {
                waitingForUploadsFiles.push(trackedFile);
            }
        });
        var activeUploadsCount = activeUploadFiles.length;
        var waitingFilesCount = waitingForUploadsFiles.length;
        if (waitingFilesCount > 0) {
            var nextUploadFiles = [];
            this._log('silly', "active uploads: " + activeUploadsCount + " | pending files: " + waitingFilesCount);
            var availableUploadSlots = (this._maxUploadRequests && this._maxUploadRequests > 0) ? this._maxUploadRequests - activeUploadsCount : waitingFilesCount;
            if (availableUploadSlots > 0) {
                nextUploadFiles = __spread(waitingForUploadsFiles.sort(function (pendingFile) { return pendingFile.uploadOrder || 1000; })).slice(0, availableUploadSlots);
            }
            this._log('debug', "available upload slots to be used " + availableUploadSlots);
            nextUploadFiles.forEach(function (pendingFile) {
                _this._initiateUpload(pendingFile);
            });
        }
    };
    UploadManagement.prototype._createTrackedFile = function (id, fileData) {
        var newTrackedFile = this._trackedFiles[id] = new TrackedFile(id, fileData);
        this._onTrackedFileChanged.next(newTrackedFile.asData());
        this._updateTrackedFile(newTrackedFile, { status: TrackedFileStatuses.pendingPrepare });
    };
    UploadManagement.prototype._updateTrackedFile = function (trackedFile, changes) {
        var result = true;
        if (changes.status && changes.status !== trackedFile.status) {
            if (trackedFile.canTransitionTo(changes.status)) {
                this._log('info', "notify file status changes from '" + trackedFile.status + "' to '" + changes.status + "'", trackedFile.id);
                trackedFile.update(changes);
            }
            else {
                this._log('error', "cannot update file data from '" + trackedFile.status + "' to '" + changes.status + ". target status is not allowed. update to status 'failure' instead.", trackedFile.id);
                trackedFile.update({
                    status: TrackedFileStatuses.failure,
                    failureReason: 'cannot change status',
                    failureType: 'change_not_allowed'
                });
                result = false;
            }
        }
        else {
            //this._log('info', `notify file data changes`,trackedFile.id);
            trackedFile.update(changes);
        }
        this._onTrackedFileChanged.next(trackedFile.asData());
        return result;
    };
    UploadManagement.prototype.supportChunkUpload = function (uploadFileData) {
        var uploadAdapter = this._getUploadAdapter(uploadFileData);
        return uploadAdapter ? uploadAdapter.supportChunkUpload() : false;
    };
    UploadManagement.prototype._initiateUpload = function (trackedFile) {
        var _this = this;
        var data = trackedFile.data, id = trackedFile.id;
        var uploadAdapter = this._getUploadAdapter(data);
        this._log('info', "initiate new upload for file '" + id + "'");
        if (!uploadAdapter) {
            this._log('warn', "cannot find destination adapter for requested file, failing upload request");
            this._updateTrackedFile(trackedFile, {
                status: TrackedFileStatuses.failure,
                failureReason: 'upload destination is not supported',
                failureType: 'unknown_destination'
            });
            this._syncUploadQueue();
        }
        else if (trackedFile.canTransitionTo(TrackedFileStatuses.uploading)) {
            if (trackedFile.uploadSubscription) {
                this._log('warn', "an active upload was found while the status indicated no upload currently in progress. cancel previous upload");
                trackedFile.uploadSubscription.unsubscribe();
                trackedFile.uploadSubscription = null;
            }
            this._updateTrackedFile(trackedFile, {
                status: TrackedFileStatuses.uploading,
                progress: 0,
                uploadStartAt: new Date(),
            });
            var canHandleResponse_1 = function (id, actionDescription) {
                var result = false;
                var trackedFileStillExists = !!_this._trackedFiles[id];
                if (!trackedFileStillExists) {
                    _this._log('warn', "cannot handle file upload " + actionDescription + ". There is no tracking file with the provided id (was the file purged?)", id);
                }
                else if (trackedFile.status !== TrackedFileStatuses.uploading) {
                    _this._log('warn', "cannot handle file upload " + actionDescription + ". The file status it not 'uploading' (was the file upload cancelled?)", id);
                }
                else {
                    result = true;
                }
                return result;
            };
            trackedFile.uploadSubscription = uploadAdapter.upload(id, data)
                .subscribe(function (uploadChanges) {
                if (canHandleResponse_1(id, 'progress')) {
                    _this._updateTrackedFile(trackedFile, {
                        progress: uploadChanges.progress
                    });
                }
            }, function (error) {
                trackedFile.uploadSubscription = null;
                if (canHandleResponse_1(id, 'failure')) {
                    var failureReason = error && error.message ? error.message : '';
                    _this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.failure,
                        failureReason: failureReason,
                        failureType: 'general_error'
                    });
                }
                _this._syncUploadQueue();
            }, function () {
                trackedFile.uploadSubscription = null;
                if (canHandleResponse_1(id, 'completion')) {
                    _this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.uploadCompleted,
                        progress: 1,
                        uploadCompleteAt: new Date()
                    });
                    _this._removeTrackedFile(trackedFile);
                    _this._syncUploadQueue();
                }
            });
        }
    };
    UploadManagement.prototype._getUploadAdapter = function (fileData) {
        if (this._uploadFileAdapter) {
            return this._uploadFileAdapter.find(function (uploadFileAdapter) {
                return uploadFileAdapter.canHandle(fileData);
            });
        }
        else {
            return null;
        }
    };
    UploadManagement.prototype.ngOnDestroy = function () {
        var _this = this;
        Object.keys(this._trackedFiles).forEach(function (id) {
            _this.purgeUpload(id);
        });
    };
    UploadManagement.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: [UploadFileAdapterToken,] }, { type: Optional }] }
    ]; };
    UploadManagement = __decorate([
        Injectable(),
        __param(0, Inject(UploadFileAdapterToken)), __param(0, Optional()),
        __metadata("design:paramtypes", [Array])
    ], UploadManagement);
    return UploadManagement;
}());
export { UploadManagement };
//# sourceMappingURL=data:application/json;base64,