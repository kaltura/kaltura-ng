import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/forkJoin';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/map';
import { WidgetBase } from './widget-base';
import { WidgetState } from './widget-state';
import { KalturaLogger } from '@kaltura-ng/kaltura-common';
export declare type FormWidgetsState = {
    [key: number]: WidgetState;
};
export declare enum OnDataSavingReasons {
    attachedWidgetBusy = 0,
    validationErrors = 1,
    buildRequestFailure = 2
}
export declare abstract class WidgetsManagerBase<TData, TRequest> implements WidgetsManagerBase<TData, TRequest>, OnDestroy {
    private _widgets;
    private _widgetsState;
    private _isNewData;
    widgetsState$: Observable<FormWidgetsState>;
    protected _logger: KalturaLogger;
    constructor(logger?: KalturaLogger);
    get widgetsState(): FormWidgetsState;
    get isNewData(): boolean;
    _updateWidgetState(newWidgetState: WidgetState): void;
    registerWidgets(widgets: WidgetBase<this, TData, TRequest>[]): void;
    notifyDataLoading(dataId: any): void;
    notifyDataLoaded(data: TData, settings: {
        isNewData: boolean;
    }): {
        errors?: Error[];
    };
    private _widgetsOnDataSaving;
    notifyDataSaving(newData: TData, request: TRequest, originalData: TData): Observable<{
        ready: boolean;
        reason?: OnDataSavingReasons;
        errors?: Error[];
    }>;
    private _validateWidgets;
    ngOnDestroy(): void;
    s: any;
}
