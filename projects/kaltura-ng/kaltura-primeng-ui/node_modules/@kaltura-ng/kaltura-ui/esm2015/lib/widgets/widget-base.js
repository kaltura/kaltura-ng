import { Observable } from 'rxjs/Observable';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import 'rxjs/add/observable/of';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/do';
import { EmptyLogger } from '@kaltura-ng/kaltura-common';
// DEVELOPER NOTE: Don't implement ngOnDestroy - the inheritor will probably override this without calling super()
export class WidgetBase {
    constructor(_key, logger) {
        this._key = _key;
        // DEVELOPER NOTE: this class cannot use 'cancelOnDestroy' operation
        // because it must assume the inheriter will override it
        this._activateSubscription = null;
        this._dataSource = new ReplaySubject(1);
        this.data$ = this._dataSource.asObservable();
        this._widgetState = { key: this.key, isValid: true, isDirty: false, isAttached: false, isBusy: false, isActive: false, wasActivated: false };
        this._widgetReset = new Subject();
        this.widgetReset$ = this._widgetReset.asObservable();
        if (!_key) {
            throw new Error(`Form widget key is required when constructing widget of type '${typeof this}`);
        }
        this._logger = logger ? logger.subLogger(`widgets.${_key}`) : new EmptyLogger();
    }
    get data() {
        return this._data;
    }
    onDataSaving(newData, request, originalData) {
    }
    get wasActivated() {
        return this._widgetState.wasActivated;
    }
    get isValid() {
        return this._widgetState.isValid;
    }
    get isDirty() {
        return this._widgetState.isDirty;
    }
    get isActive() {
        return this._widgetState.isActive;
    }
    get isAttached() {
        return this._widgetState.isAttached;
    }
    get isBusy() {
        return this._widgetState.isBusy;
    }
    get key() {
        return this._key;
    }
    get isNewData() {
        return this.form.isNewData;
    }
    onValidate(wasActivated) {
        return Observable.of({ isValid: true });
    }
    updateState(stateUpdate) {
        this._updateState(stateUpdate);
    }
    _updateState(stateUpdate) {
        this._verifyRegistered();
        const stateHasChanges = Object.keys(stateUpdate).reduce((result, propertyName) => result || this._widgetState[propertyName] !== stateUpdate[propertyName], false);
        if (stateHasChanges) {
            Object.assign(this._widgetState, stateUpdate);
            if (this.form) {
                const newWidgetState = Object.assign({}, this._widgetState);
                this.form._updateWidgetState(newWidgetState);
            }
        }
    }
    onDataLoaded(data) {
    }
    onDataLoading(dataId) {
    }
    onActivate(firstTimeActivating) {
    }
    _setForm(manager) {
        this.form = manager;
    }
    _handleDataLoading(dataId) {
        this._verifyRegistered();
        this._setData(null);
        this.onDataLoading(dataId);
    }
    _setData(data) {
        this._data = data;
        this._dataSource.next(data);
    }
    _handleDataLoaded(data) {
        this._verifyRegistered();
        this._setData(data);
        this.onDataLoaded(data);
    }
    _validate() {
        this._verifyRegistered();
        return this.onValidate(this.wasActivated)
            .do(response => {
            const updateState = (response.isValid !== this._widgetState.isValid);
            if (updateState) {
                this._logger.info(`[widget] widget '${this.key}': widget 'isValid' state doesn't match result of 'onValidate'. updating status to '${response.isValid ? 'valid' : 'invalid'}'`);
                this.updateState({ isValid: response.isValid });
            }
        });
    }
    _handleDataSaving(newData, request, originalData) {
        this._verifyRegistered();
        this.onDataSaving(newData, request, originalData);
    }
    _reset() {
        this._verifyRegistered();
        this._logger.info(`[widget] widget '${this.key}': reset widget`);
        if (this._activateSubscription) {
            this._activateSubscription.unsubscribe();
            this._activateSubscription = null;
        }
        this._widgetReset.next('');
        this._updateState({ isValid: true, isDirty: false, isActive: false, isBusy: false });
        this.onReset();
    }
    _verifyRegistered() {
        if (!this.form) {
            this._logger.error(`[widget] widget '${this.key}': cannot perform action, widget is not registered to a manager (did you forgot to register it in the main route component?)`);
            throw new Error(`[widget] cannot perform action. widget with key \''${this.key}'\' is not registered to a manager`);
        }
    }
    activate() {
        this._verifyRegistered();
        if (this.data && this.isAttached && !this.isActive) {
            this._reset();
            const previousStatus = {
                wasActivated: this.wasActivated
            };
            this._logger.info(`[widget] widget '${this.key}': activating widget (first time = ${!previousStatus.wasActivated})`);
            const activate$ = this.onActivate(!this.wasActivated);
            this._updateState({ isActive: true, wasActivated: true });
            if (activate$ instanceof Observable) {
                this._logger.info(`[widget] widget '${this.key}': widget requested for async activation operation. executing async operation.`);
                this._activateSubscription = activate$
                    .catch((error, caught) => Observable.of({ failed: true, error }))
                    .subscribe(response => {
                    if (response && response.failed) {
                        this._logger.info(`[widget] widget '${this.key}': async widget activation failed. revert state to ${JSON.stringify(previousStatus)})`);
                        this._updateState({ isActive: false, wasActivated: previousStatus.wasActivated });
                    }
                    else {
                        this._logger.info(`[widget] widget '${this.key}': async widget activation completed`);
                    }
                }, () => {
                    this._activateSubscription = null;
                }, () => {
                    this._activateSubscription = null;
                });
            }
        }
    }
    attachForm() {
        this._verifyRegistered();
        if (this.isAttached) {
            this._logger.warn(`[widget] widget with key '${this.key}' is already attached (did you attached two components to the same widget? did you forgot to detach the widget upon ngOnDestroy?)`);
        }
        else {
            this._logger.info(`[widget] widget '${this.key}': attaching widget`);
            this._updateState({ isAttached: true });
            this.activate();
        }
    }
    detachForm() {
        this._verifyRegistered();
        if (!this.isAttached) {
            this._logger.warn(`[widget] widget with key '${this.key}' is already detached (did you attached two components to the same widget? did you forgot to attach the widget upon ngOnInit?)`);
        }
        else {
            this._logger.info(`[widget] widget '${this.key}': detaching widget`);
            this._updateState({ isAttached: false });
        }
    }
    destory() {
        this._reset();
        this._widgetReset.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,