import { __decorate, __metadata } from "tslib";
import { Directive, Input, Renderer2, ElementRef, AfterViewInit, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';
import { StickyScrollService } from '../services/sticky-scroll.service';
import { cancelOnDestroy } from '@kaltura-ng/kaltura-common';
let StickyDirective = class StickyDirective {
    constructor(elementRef, renderer, _stickyScrollService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._stickyScrollService = _stickyScrollService;
        this.lastScroll = 0;
        this.isSticky = false;
        this._destroyed = false;
        this.onStickyEvent = new EventEmitter();
        this.onUnStickyEvent = new EventEmitter();
        this.scrollOffset = 0;
        this.stickyId = "";
        this.sticksTo = "";
        this.elementSelector = "";
        this._parentTop = null;
        this._parentOffset = null;
        this._stickyTop = null;
        this._stickyOffset = null;
    }
    _getStickyElement(elementRef) {
        return elementRef.nativeElement;
    }
    ngAfterViewInit() {
        // console.log(`[${this.stickyId}] - ngAfterViewInit`);
        this._stickyElement = this._getStickyElement(this.elementRef);
        this.update();
    }
    ngOnInit() {
        // console.log(`[${this.stickyId}] - attached`);
        if (this.stickyId) {
            this._stickyScrollService.attach(this.stickyId);
        }
        this._stickyScrollService.scrollStatus$.pipe(cancelOnDestroy(this)).subscribe(event => {
            // console.log(`[${this.stickyId}] - handle scroll`);
            this._render();
        });
        this._stickyScrollService.resizeStatus$.pipe(cancelOnDestroy(this)).subscribe(event => {
            this.onResize();
        });
        this._stickyScrollService.layoutSubject$.pipe(cancelOnDestroy(this)).subscribe(elements => {
            const data = this.sticksTo ? elements[this.sticksTo] : { height: 0, offset: 0 };
            if (data && (this._parentTop !== data.height ||
                this._parentOffset !== data.offset)) {
                this._parentTop = data.height;
                this._parentOffset = data.offset;
                this.update();
            }
        });
    }
    ngOnDestroy() {
        // console.log(`[${this.stickyId}] - destroyed`);
        this._destroyed = true;
        this._stickyScrollService.detach(this.stickyId);
    }
    update() {
        if (this._parentTop !== null
            && this._parentOffset != null) {
            // console.log(`[${this.stickyId}] - handle layout update`);
            const stickyOffset = this._parentOffset + this.scrollOffset;
            if (this._stickyTop !== this._parentTop ||
                this._stickyOffset !== stickyOffset) {
                // console.log(`[${this.stickyId}] - update cached values`);
                this._stickyTop = this._parentTop;
                this._stickyOffset = stickyOffset;
                this._render();
            }
            if (this.stickyId && this._stickyElement) {
                // console.log(`[${this.stickyId}] - update service`);
                const elementHeight = this._stickyElement.getBoundingClientRect()['height'];
                setTimeout(() => {
                    this._stickyScrollService.update(this.stickyId, elementHeight + this._stickyTop, this._stickyOffset);
                }, 0);
            }
        }
    }
    _render() {
        if (!this._destroyed && this._stickyElement) {
            // console.log(`[${this.stickyId}] - _render`);
            if (this._stickyTop !== null
                && this._stickyOffset != null) {
                const scroll = window.pageYOffset;
                if (scroll > this.lastScroll && !this.isSticky && this._stickyElement.getBoundingClientRect()['top'] <= this._stickyTop) {
                    // console.log(`[${this.stickyId}] - _render (set sticky mode)`);
                    this.setSticky();
                }
                else if (scroll < this.lastScroll && this.isSticky && scroll <= this._stickyOffset) {
                    // console.log(`[${this.stickyId}] - _render (unset sticky mode)`);
                    this.unsetSticky();
                }
                else {
                    if (this.isSticky && scroll === this.lastScroll) {
                        this.setStyle('top', this._stickyTop + 'px');
                        // console.log(`[${this.stickyId}] - _render (update sitcky values) - TODO!!!!!!`);
                    }
                }
                this.lastScroll = scroll;
            }
        }
    }
    setSticky() {
        if (!this.isSticky) {
            this.isSticky = true;
            // console.log(`[${this.stickyId}] - top = ${this._stickyElement.clientTop}`);
            this.originalCss = {
                position: this._stickyElement.style.position,
                top: this._stickyElement.clientTop,
                marginTop: this._stickyElement.style.marginTop,
                left: this._stickyElement.clientLeft
            };
            this.setStyle('position', 'fixed');
            this.setStyle('top', this._stickyTop + 'px');
            if (this.appendTo) {
                this.setStyle('left', this.appendTo.getBoundingClientRect()['left'] + 'px');
            }
            this.setClass(true);
            this.onStickyEvent.emit();
            this._onSticky();
        }
    }
    _onSticky() {
        setTimeout(() => { this.update(); }, 0);
    }
    unsetSticky() {
        if (this.isSticky) {
            this.isSticky = false;
            this.setStyle('position', this.originalCss.position);
            this.setStyle('marginTop', this.originalCss.marginTop);
            this.setStyle('top', this.originalCss.top + 'px');
            if (this.appendTo) {
                this.setStyle('left', this.originalCss.left + 'px');
            }
            this.setClass(false);
            this.onUnStickyEvent.emit();
            this._onUnsetSticky();
        }
    }
    _onUnsetSticky() {
        setTimeout(() => { this.update(); }, 0);
    }
    onResize() { }
    ; // used by primeng directive to update table layout
    setStyle(key, value) {
        this.renderer.setStyle(this._stickyElement, key, value);
    }
    setClass(add) {
        if (add) {
            this.renderer.addClass(this._stickyElement, this.stickyClass);
        }
        else {
            this.renderer.removeClass(this._stickyElement, this.stickyClass);
        }
    }
};
StickyDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: StickyScrollService }
];
__decorate([
    Output(),
    __metadata("design:type", Object)
], StickyDirective.prototype, "onStickyEvent", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], StickyDirective.prototype, "onUnStickyEvent", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], StickyDirective.prototype, "stickyClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], StickyDirective.prototype, "scrollOffset", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], StickyDirective.prototype, "appendTo", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], StickyDirective.prototype, "stickyId", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], StickyDirective.prototype, "sticksTo", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], StickyDirective.prototype, "elementSelector", void 0);
StickyDirective = __decorate([
    Directive({
        selector: '[kSticky]'
    }),
    __metadata("design:paramtypes", [ElementRef, Renderer2, StickyScrollService])
], StickyDirective);
export { StickyDirective };
//# sourceMappingURL=data:application/json;base64,