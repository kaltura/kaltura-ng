import { __decorate, __metadata } from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild, ViewChildren, QueryList, HostListener, ElementRef, ContentChildren, TemplateRef, } from '@angular/core';
import { TagComponent } from './tag.component';
import * as $NS from 'jquery';
const $ = $NS;
let TagsComponent = class TagsComponent {
    constructor() {
        this.disabled = false;
        this.removableTags = true;
        this.showClear = true;
        this.clearAllLabel = "Clear All";
        this.onTagRemove = new EventEmitter();
        this.onRemoveAll = new EventEmitter();
        this.onTagsChange = new EventEmitter();
        this._showMore = false;
        this._scrollLeftEnabled = false;
        this._scrollRightEnabled = true;
    }
    onWindowResize() {
        this.checkShowMore();
    }
    ngOnChanges(changes) {
        if (changes['data']) {
            if (this.disabledField && Array.isArray(this.data)) {
                this.data.sort((a, b) => Number(b[this.disabledField] || 0) - Number(a[this.disabledField] || 0));
            }
            this.checkShowMore();
        }
    }
    ngAfterViewInit() {
        this.tagsListObserver = this.tagsList.changes.subscribe((comps) => {
            this.onTagsChange.emit({ tagsCount: (this.data ? this.data.length : 0) });
            this.checkShowMore();
        });
    }
    ngOnDestroy() {
        if (this.tagsListObserver) {
            this.tagsListObserver.unsubscribe();
            this.tagsListObserver = null;
        }
    }
    removeTag(tag) {
        this.onTagRemove.emit(tag);
    }
    clearAll() {
        this.onRemoveAll.emit();
    }
    checkShowMore() {
        // we use a cancelable interval to improve performances on window resize
        if (this.showMoreCheckIntervalID) {
            clearInterval(this.showMoreCheckIntervalID);
            this.showMoreCheckIntervalID = null;
        }
        this.showMoreCheckIntervalID = setTimeout(() => {
            if (this.data && this.data.length && this.scroller) {
                this._showMore = this.scroller.nativeElement.scrollWidth > (this.scroller.nativeElement.getBoundingClientRect().width + 1);
            }
            this.showMoreCheckIntervalID = null;
        }, 100);
    }
    scroll(direction) {
        const scrollPageWidth = this.scroller.nativeElement.getBoundingClientRect().width;
        const totalScroll = this.scroller.nativeElement.scrollWidth;
        if (direction === "right") {
            const targetScrollLeft = this.scroller.nativeElement.scrollLeft + scrollPageWidth;
            $(this.scroller.nativeElement).animate({ scrollLeft: targetScrollLeft }, 800, () => {
                this._scrollLeftEnabled = true;
                if ((this.scroller.nativeElement.scrollLeft + scrollPageWidth) >= (totalScroll - 1)) {
                    this._scrollRightEnabled = false;
                }
            });
        }
        else {
            const targetScrollLeft = this.scroller.nativeElement.scrollLeft - scrollPageWidth;
            $(this.scroller.nativeElement).animate({ scrollLeft: targetScrollLeft }, 800, () => {
                this._scrollRightEnabled = true;
                if (this.scroller.nativeElement.scrollLeft <= 1) {
                    this._scrollLeftEnabled = false;
                }
            });
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Array)
], TagsComponent.prototype, "data", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TagsComponent.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TagsComponent.prototype, "labelField", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TagsComponent.prototype, "tooltipField", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TagsComponent.prototype, "disabledField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TagsComponent.prototype, "removableTags", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], TagsComponent.prototype, "showClear", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TagsComponent.prototype, "title", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], TagsComponent.prototype, "clearAllLabel", void 0);
__decorate([
    ContentChildren(TemplateRef, { descendants: false }),
    __metadata("design:type", QueryList)
], TagsComponent.prototype, "templates", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TagsComponent.prototype, "onTagRemove", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TagsComponent.prototype, "onRemoveAll", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], TagsComponent.prototype, "onTagsChange", void 0);
__decorate([
    ViewChild('scroller', { static: false }),
    __metadata("design:type", ElementRef)
], TagsComponent.prototype, "scroller", void 0);
__decorate([
    ViewChildren(TagComponent),
    __metadata("design:type", QueryList)
], TagsComponent.prototype, "tagsList", void 0);
__decorate([
    HostListener("window:resize", []),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TagsComponent.prototype, "onWindowResize", null);
TagsComponent = __decorate([
    Component({
        selector: 'kTags',
        template: "<div class=\"kTags\" *ngIf=\"data?.length\">\n    <span *ngIf=\"title\" class=\"kTagsTitle\">{{title}}</span>\n    <div #scroller class=\"kScroller\">\n        <div class=\"kTagsWrapper\">\n            <kTag *ngFor=\"let tag of data\"\n                  [data]=\"tag\"\n                  [template]=\"templates ? templates.first : undefined\"\n                  [showRemove]=\"removableTags\"\n                  [label]=\"labelField ? tag[labelField] : tag\"\n                  [tooltip]=\"tooltipField ? tag[tooltipField] : tag\"\n                  [disabled]=\"disabledField ? tag[disabledField] : false\"\n                  (onRemoved)=\"removeTag($event)\"></kTag>\n        </div>\n    </div>\n    <div class=\"kTagsMore\">\n        <div class=\"kScrollArrows\" [style.visibility]=\"_showMore ? 'visible' : 'hidden'\">\n            <i class=\"kIcondropdown_arrow_left kScrollArrow\" [class.disable]=\"!_scrollLeftEnabled\" (click)=\"scroll('left')\"></i>\n            <i class=\"kIcondropdown_arrow_right kScrollArrow\" [class.disable]=\"!_scrollRightEnabled\" (click)=\"scroll('right')\"></i>\n        </div>\n        <span *ngIf=\"showClear\" class=\"kTagsClear\" (click)=\"clearAll()\">{{clearAllLabel}}</span>\n    </div>\n\n</div>\n",
        styles: [":host{width:100%}.kTags{width:100%;height:40px;background-color:#fff;display:flex;flex-wrap:nowrap;-webkit-overflow-scrolling:touch;-ms-overflow-style:-ms-autohiding-scrollbar;align-items:center;border-top:1px solid #dadada;-ms-scroll-limit:0;overflow:hidden;-ms-overflow-style:none}.kTagsTitle{flex:0 0 auto;font-size:15px;color:#333;font-weight:700;margin-left:16px;margin-right:16px}.kTagsClear{margin-left:8px;margin-right:16px;flex-shrink:0;color:#333;font-size:15px;text-decoration:underline;cursor:pointer}.kTagsClear:hover{color:#00a784}.kMoreTagsBtn{flex-shrink:0}.kScroller{width:100%;overflow:hidden}.kTagsMore{align-items:center;display:flex;flex:0 0 auto;margin-left:8px}.kTagsWrapper{display:table;white-space:nowrap;border-collapse:separate;border-spacing:4px}.kScrollArrows{display:flex}.kScrollArrow{width:16px;margin-left:8px;margin-right:8px;cursor:pointer;color:#666}.kScrollArrow:hover{color:#333}.kScrollArrow.disable{cursor:auto;color:#ebebeb;pointer-events:none}.kScrollArrow.disable:hover{color:#ebebeb}"]
    }),
    __metadata("design:paramtypes", [])
], TagsComponent);
export { TagsComponent };
//# sourceMappingURL=data:application/json;base64,