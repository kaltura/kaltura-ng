import { __decorate, __metadata } from "tslib";
import { Component, Input } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
var InputRangeComponent = /** @class */ (function () {
    function InputRangeComponent() {
        this.pointOvered = [];
        this.onChange = function (value) { };
        this.onTouched = function () { };
    }
    InputRangeComponent_1 = InputRangeComponent;
    InputRangeComponent.prototype.ngOnInit = function () {
        this.selectedOptionIndex = this.options.findIndex(function (option) { return option.isSelected; });
        this.selectedOptionIndex = this.selectedOptionIndex == -1 ? 0 : this.selectedOptionIndex;
        this.selectedText = this.options[this.selectedOptionIndex].label;
    };
    InputRangeComponent.prototype.getProgressBarStyle = function () {
        return 100 / (this.options.length - 1) * (this.selectedOptionIndex >= 0 ? this.selectedOptionIndex : 0);
    };
    InputRangeComponent.prototype.pointSelected = function (index) {
        if (this.selectedOptionIndex > 0) {
            this.options[this.selectedOptionIndex].isSelected = false;
        }
        this.options[index].isSelected = true;
        this.selectedText = this.options[index].label;
        this.selectedOptionIndex = index;
        this.onTouched();
        this.onChange(this.options[index].value);
    };
    //From ControlValueAccessor interface
    InputRangeComponent.prototype.writeValue = function (value) {
        var valueOptionIndex = this.options.findIndex(function (option) { return option.value == value; });
        if (valueOptionIndex !== -1) {
            this.pointSelected(valueOptionIndex);
        }
    };
    //From ControlValueAccessor interface
    InputRangeComponent.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    //From ControlValueAccessor interface
    InputRangeComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    var InputRangeComponent_1;
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], InputRangeComponent.prototype, "options", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], InputRangeComponent.prototype, "width", void 0);
    InputRangeComponent = InputRangeComponent_1 = __decorate([
        Component({
            selector: 'kInputRange',
            template: "<div class=\"kRangeContainer\">\n  <div [style.width]=\"width\">\n    <div class=\"kRangeInput kRangeInputBlock\">\n      <div class=\"kBbar\">\n        <div class=\"kBarProgress\"\n             [style.width]=\"getProgressBarStyle() + '%'\"></div>\n        <div class=\"kBarPoints\">\n          <div class=\"kBarPointCol\" (mouseout)=\"pointOvered[i]=false\" (mouseover)=\"pointOvered[i]=true\" [style.width]=\"100 / (options.length-1) + '%'\"\n               *ngFor=\"let option of options; index as i\">\n            <div class=\"kPoint\"\n                 [ngClass]=\"{\n                 'kSelected': (pointOvered.length > 0 && pointOvered[i]) || i == selectedOptionIndex,\n                 'kBgPrimary':  i <= selectedOptionIndex\n               }\"></div>\n            <div class=\"kPointClickArea\"\n                 (click) = \"pointSelected(i)\"\n                 [kTooltip] = \"option.tooltip\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <span class=\"kSelectedLabel\">{{selectedText}}</span>\n</div>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: InputRangeComponent_1,
                    multi: true
                }
            ],
            styles: [".kRangeContainer{display:flex}.kRangeContainer .kRangeInput{display:inline-block;padding-top:10px;padding-bottom:50px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.kRangeContainer .kRangeInput.kRangeInputBlock{display:block;width:100%}.kRangeContainer .kRangeInput .kBbar{height:4px;width:100%;background-color:#ccc;position:relative}.kRangeContainer .kRangeInput .kBbar .kBarProgress{background-color:#00a784;height:100%}.kRangeContainer .kRangeInput .kBbar .kBarPoints{position:absolute;left:0;top:-8px;width:100%}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol{float:left;position:relative;height:20px}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol:last-child{width:0%!important}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol .kPointClickArea{position:absolute;width:45px;margin-top:-10px;height:40px;transform:translateX(-50%);cursor:pointer}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol .kPoint{width:9px;height:9px;margin-top:1px;border-radius:50%;background-color:#ccc;position:absolute;transform:translateX(-50%);cursor:pointer;border:4px solid #fff}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol .kPoint.kSelected{width:16px;height:16px;margin-top:-3px;border-radius:50%}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol .kPoint.kBgPrimary{background-color:#00a784}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol .kPoint.kBgPrimary.kSelected{border:none!important;margin-top:2px!important}.kRangeContainer .kRangeInput .kBbar .kBarPoints .kBarPointCol span{position:absolute;transform:translateX(-50%);bottom:-36px;white-space:nowrap}.kRangeContainer .kSelectedLabel{padding-left:30px;padding-top:3px;font-size:15px}"]
        }),
        __metadata("design:paramtypes", [])
    ], InputRangeComponent);
    return InputRangeComponent;
}());
export { InputRangeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcmFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbHR1cmEtbmcva2FsdHVyYS11aS8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dC1yYW5nZS9pbnB1dC1yYW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQW1DLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQXVCLGlCQUFpQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFjdkU7SUFXRTtRQUxPLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBRXhCLGFBQVEsR0FBRyxVQUFDLEtBQXNCLElBQU0sQ0FBQyxDQUFDO1FBQzFDLGNBQVMsR0FBRyxjQUFPLENBQUMsQ0FBQztJQUdyQixDQUFDOzRCQVpVLG1CQUFtQjtJQWM5QixzQ0FBUSxHQUFSO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFVBQVUsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO1FBQy9FLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1FBQ3pGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFFbkUsQ0FBQztJQUVELGlEQUFtQixHQUFuQjtRQUVFLE9BQU8sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTFHLENBQUM7SUFFRCwyQ0FBYSxHQUFiLFVBQWMsS0FBSztRQUNqQixJQUFJLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1NBQzNEO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBRXRDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDOUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQztRQUVqQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTNDLENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsd0NBQVUsR0FBVixVQUFXLEtBQXNCO1FBQy9CLElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsS0FBSyxJQUFJLEtBQUssRUFBckIsQ0FBcUIsQ0FBQyxDQUFDO1FBQ2pGLElBQUksZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3RDO0lBRUgsQ0FBQztJQUVELHFDQUFxQztJQUNyQyw4Q0FBZ0IsR0FBaEIsVUFBaUIsRUFBb0M7UUFDbkQsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELHFDQUFxQztJQUNyQywrQ0FBaUIsR0FBakIsVUFBa0IsRUFBTztRQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOztJQTFEUTtRQUFSLEtBQUssRUFBRTtrQ0FBVSxLQUFLO3dEQUFnRjtJQUM5RjtRQUFSLEtBQUssRUFBRTs7c0RBQWU7SUFGWixtQkFBbUI7UUFiL0IsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGFBQWE7WUFDdkIsb2lDQUEyQztZQUUzQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLGlCQUFpQjtvQkFDMUIsV0FBVyxFQUFFLHFCQUFtQjtvQkFDaEMsS0FBSyxFQUFFLElBQUk7aUJBQ1o7YUFDRjs7U0FDRixDQUFDOztPQUVXLG1CQUFtQixDQTREL0I7SUFBRCwwQkFBQztDQUFBLEFBNURELElBNERDO1NBNURZLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgT25Jbml0LCBJbnB1dH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7Q29udHJvbFZhbHVlQWNjZXNzb3IsIE5HX1ZBTFVFX0FDQ0VTU09SfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2tJbnB1dFJhbmdlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LXJhbmdlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtcmFuZ2UuY29tcG9uZW50LnNjc3MnXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICB1c2VFeGlzdGluZzogSW5wdXRSYW5nZUNvbXBvbmVudCxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfVxuICBdXG59KVxuXG5leHBvcnQgY2xhc3MgSW5wdXRSYW5nZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICBASW5wdXQoKSBvcHRpb25zOiBBcnJheTx7dmFsdWU6IHN0cmluZyB8IG51bWJlciwgdG9vbHRpcDogc3RyaW5nLCBpc1NlbGVjdGVkOiBib29sZWFuLCBsYWJlbDogc3RyaW5nfT47XG4gIEBJbnB1dCgpIHdpZHRoOiBzdHJpbmc7XG5cbiAgcHVibGljIHNlbGVjdGVkT3B0aW9uSW5kZXg6IG51bWJlcjtcbiAgcHVibGljIHNlbGVjdGVkVGV4dDogc3RyaW5nO1xuICBwdWJsaWMgcG9pbnRPdmVyZWQgPSBbXTtcblxuICBvbkNoYW5nZSA9ICh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKSA9PiB7fTtcbiAgb25Ub3VjaGVkID0gKCkgPT4ge307XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPSB0aGlzLm9wdGlvbnMuZmluZEluZGV4KG9wdGlvbiA9PiBvcHRpb24uaXNTZWxlY3RlZCk7XG4gICAgdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID0gdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID09IC0xID8gMCA6IHRoaXMuc2VsZWN0ZWRPcHRpb25JbmRleDtcbiAgICB0aGlzLnNlbGVjdGVkVGV4dCA9IHRoaXMub3B0aW9uc1t0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXhdLmxhYmVsO1xuXG4gIH1cblxuICBnZXRQcm9ncmVzc0JhclN0eWxlKCkge1xuXG4gICAgcmV0dXJuIDEwMCAvICh0aGlzLm9wdGlvbnMubGVuZ3RoIC0gMSkgKiAodGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4ID49IDAgPyB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggOiAwKTtcblxuICB9XG5cbiAgcG9pbnRTZWxlY3RlZChpbmRleCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPiAwKSB7XG4gICAgICB0aGlzLm9wdGlvbnNbdGhpcy5zZWxlY3RlZE9wdGlvbkluZGV4XS5pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5vcHRpb25zW2luZGV4XS5pc1NlbGVjdGVkID0gdHJ1ZTtcblxuICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID0gdGhpcy5vcHRpb25zW2luZGV4XS5sYWJlbDtcbiAgICB0aGlzLnNlbGVjdGVkT3B0aW9uSW5kZXggPSBpbmRleDtcblxuICAgIHRoaXMub25Ub3VjaGVkKCk7XG4gICAgdGhpcy5vbkNoYW5nZSh0aGlzLm9wdGlvbnNbaW5kZXhdLnZhbHVlKTtcblxuICB9XG5cbiAgLy9Gcm9tIENvbnRyb2xWYWx1ZUFjY2Vzc29yIGludGVyZmFjZVxuICB3cml0ZVZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBjb25zdCB2YWx1ZU9wdGlvbkluZGV4ID0gdGhpcy5vcHRpb25zLmZpbmRJbmRleChvcHRpb24gPT4gb3B0aW9uLnZhbHVlID09IHZhbHVlKTtcbiAgICBpZiAodmFsdWVPcHRpb25JbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMucG9pbnRTZWxlY3RlZCh2YWx1ZU9wdGlvbkluZGV4KTtcbiAgICB9XG5cbiAgfVxuXG4gIC8vRnJvbSBDb250cm9sVmFsdWVBY2Nlc3NvciBpbnRlcmZhY2VcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpID0+IHZvaWQpIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cblxuICAvL0Zyb20gQ29udHJvbFZhbHVlQWNjZXNzb3IgaW50ZXJmYWNlXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG59XG4iXX0=