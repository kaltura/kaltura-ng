import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';
import { DynamicSectionControl } from './controls/dynamic-section-control';
var DynamicFormService = /** @class */ (function () {
    function DynamicFormService(_formBuilder) {
        this._formBuilder = _formBuilder;
    }
    DynamicFormService.prototype.toFormGroup = function (dynamicControls, config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        var result = {};
        if (dynamicControls) {
            dynamicControls.forEach(function (formControl) {
                if (!config.ignoreMultiple && formControl.allowMultiple) {
                    var formArray_1 = result[formControl.key] = _this._formBuilder.array([]);
                    if (config && config.formValue) {
                        // build array formGroup item for each actual record in array
                        var arrayItems = config.formValue[formControl.key];
                        if (arrayItems instanceof Array) {
                            arrayItems.forEach(function (arrayItem) {
                                formArray_1.push(_this.toFormGroup([formControl], {
                                    ignoreMultiple: true,
                                    formValue: arrayItem
                                }));
                            });
                        }
                    }
                }
                else {
                    if (formControl instanceof DynamicSectionControl) {
                        var shouldCreateNestedGroup = dynamicControls.length > 1;
                        if (shouldCreateNestedGroup) {
                            result[formControl.key] = _this.toFormGroup(formControl.children, { formValue: config.formValue });
                        }
                        else {
                            result = _this.toFormGroup(formControl.children, { formValue: config.formValue });
                        }
                    }
                    else {
                        result[formControl.key] = new FormControl(formControl.defaultValue || null, { validators: formControl.validators, updateOn: formControl.validateOn ? formControl.validateOn : 'change' });
                    }
                }
            });
        }
        return (result instanceof FormGroup) ? result : this._formBuilder.group(result);
    };
    DynamicFormService.ctorParameters = function () { return [
        { type: FormBuilder }
    ]; };
    DynamicFormService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [FormBuilder])
    ], DynamicFormService);
    return DynamicFormService;
}());
export { DynamicFormService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Aa2FsdHVyYS1uZy9rYWx0dXJhLXVpLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtZm9ybS9keW5hbWljLWZvcm0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFRLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUcsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFJM0U7SUFDSSw0QkFBb0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBSSxDQUFDO0lBR25ELHdDQUFXLEdBQVgsVUFBWSxlQUE4QyxFQUFFLE1BQTREO1FBQXhILGlCQXVDQztRQXZDMkQsdUJBQUEsRUFBQSxXQUE0RDtRQUNwSCxJQUFJLE1BQU0sR0FBUSxFQUFFLENBQUM7UUFFckIsSUFBSSxlQUFlLEVBQUU7WUFDakIsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFdBQVc7Z0JBRS9CLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLFdBQVcsQ0FBQyxhQUFhLEVBQUU7b0JBQ3JELElBQU0sV0FBUyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBRXhFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7d0JBQzVCLDZEQUE2RDt3QkFDN0QsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBRXJELElBQUksVUFBVSxZQUFZLEtBQUssRUFBRTs0QkFDN0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7Z0NBQ3hCLFdBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFO29DQUMzQyxjQUFjLEVBQUUsSUFBSTtvQ0FDcEIsU0FBUyxFQUFFLFNBQVM7aUNBQ3ZCLENBQUMsQ0FBQyxDQUFDOzRCQUNSLENBQUMsQ0FBQyxDQUFDO3lCQUNOO3FCQUNKO2lCQUNKO3FCQUFNO29CQUNILElBQUksV0FBVyxZQUFZLHFCQUFxQixFQUFFO3dCQUM5QyxJQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO3dCQUMzRCxJQUFJLHVCQUF1QixFQUFFOzRCQUN6QixNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQzt5QkFDbkc7NkJBQUs7NEJBQ0YsTUFBTSxHQUFHLEtBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQzt5QkFDbEY7cUJBQ0o7eUJBQU07d0JBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRSxFQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsVUFBVSxFQUFFLFFBQVEsRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUMsQ0FBRSxDQUFDO3FCQUM1TDtpQkFDSjtZQUVMLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLENBQUMsTUFBTSxZQUFZLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BGLENBQUM7O2dCQTFDa0MsV0FBVzs7SUFEckMsa0JBQWtCO1FBRDlCLFVBQVUsRUFBRTt5Q0FFMEIsV0FBVztPQURyQyxrQkFBa0IsQ0E0QzlCO0lBQUQseUJBQUM7Q0FBQSxBQTVDRCxJQTRDQztTQTVDWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gICBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIFZhbGlkYXRvcnMsICBGb3JtQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbEJhc2UgfSBmcm9tICcuL2R5bmFtaWMtZm9ybS1jb250cm9sLWJhc2UnO1xuaW1wb3J0IHsgRHluYW1pY1NlY3Rpb25Db250cm9sIH0gZnJvbSAnLi9jb250cm9scy9keW5hbWljLXNlY3Rpb24tY29udHJvbCc7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIER5bmFtaWNGb3JtU2VydmljZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfZm9ybUJ1aWxkZXIgOiBGb3JtQnVpbGRlcikgeyB9XG5cblxuICAgIHRvRm9ybUdyb3VwKGR5bmFtaWNDb250cm9sczogRHluYW1pY0Zvcm1Db250cm9sQmFzZTxhbnk+W10sIGNvbmZpZyA6IHsgaWdub3JlTXVsdGlwbGU/IDogYm9vbGVhbiwgZm9ybVZhbHVlPyA6IHt9IH0gPSB7fSApIDogRm9ybUdyb3VwIHtcbiAgICAgICAgbGV0IHJlc3VsdDogYW55ID0ge307XG5cbiAgICAgICAgaWYgKGR5bmFtaWNDb250cm9scykge1xuICAgICAgICAgICAgZHluYW1pY0NvbnRyb2xzLmZvckVhY2goZm9ybUNvbnRyb2wgPT4ge1xuXG4gICAgICAgICAgICAgICAgaWYgKCFjb25maWcuaWdub3JlTXVsdGlwbGUgJiYgZm9ybUNvbnRyb2wuYWxsb3dNdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtQXJyYXkgPSByZXN1bHRbZm9ybUNvbnRyb2wua2V5XSA9IHRoaXMuX2Zvcm1CdWlsZGVyLmFycmF5KFtdKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5mb3JtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1aWxkIGFycmF5IGZvcm1Hcm91cCBpdGVtIGZvciBlYWNoIGFjdHVhbCByZWNvcmQgaW4gYXJyYXlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFycmF5SXRlbXMgPSBjb25maWcuZm9ybVZhbHVlW2Zvcm1Db250cm9sLmtleV07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnJheUl0ZW1zIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheUl0ZW1zLmZvckVhY2goYXJyYXlJdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUFycmF5LnB1c2godGhpcy50b0Zvcm1Hcm91cChbZm9ybUNvbnRyb2xdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVNdWx0aXBsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1WYWx1ZTogYXJyYXlJdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtQ29udHJvbCBpbnN0YW5jZW9mIER5bmFtaWNTZWN0aW9uQ29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkQ3JlYXRlTmVzdGVkR3JvdXAgPSBkeW5hbWljQ29udHJvbHMubGVuZ3RoID4gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRDcmVhdGVOZXN0ZWRHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmb3JtQ29udHJvbC5rZXldID0gdGhpcy50b0Zvcm1Hcm91cChmb3JtQ29udHJvbC5jaGlsZHJlbiwge2Zvcm1WYWx1ZTogY29uZmlnLmZvcm1WYWx1ZX0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudG9Gb3JtR3JvdXAoZm9ybUNvbnRyb2wuY2hpbGRyZW4sIHtmb3JtVmFsdWU6IGNvbmZpZy5mb3JtVmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmb3JtQ29udHJvbC5rZXldID0gbmV3IEZvcm1Db250cm9sKGZvcm1Db250cm9sLmRlZmF1bHRWYWx1ZSB8fCBudWxsLCB7dmFsaWRhdG9yczogZm9ybUNvbnRyb2wudmFsaWRhdG9ycywgdXBkYXRlT246IGZvcm1Db250cm9sLnZhbGlkYXRlT24gPyBmb3JtQ29udHJvbC52YWxpZGF0ZU9uIDogJ2NoYW5nZSd9ICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChyZXN1bHQgaW5zdGFuY2VvZiBGb3JtR3JvdXApID8gcmVzdWx0IDogdGhpcy5fZm9ybUJ1aWxkZXIuZ3JvdXAocmVzdWx0KTtcbiAgICB9XG59XG4iXX0=