import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, HostListener, Input, OnDestroy } from '@angular/core';
var KTooltipDirective = /** @class */ (function () {
    function KTooltipDirective(elementRef) {
        this.elementRef = elementRef;
        this._tooltipElement = null;
        this._tooltipContent = null;
        this._shouldBeVisible = false;
        this._tooltipHeight = null;
        this._tooltipWidth = null;
        this.tooltipResolver = null;
        this.escape = true;
        this.tooltipOffset = 8;
        this.placement = "top";
        this.delay = 300;
        this.maxWidth = 300;
        this.followTarget = false;
        this.showOnEllipsis = false;
    }
    Object.defineProperty(KTooltipDirective.prototype, "kTooltip", {
        set: function (value) {
            if (this.isValidContent(value)) {
                this._tooltipContent = value;
            }
            else {
                this._tooltipContent = null;
            }
            this._updateTooltipElement();
        },
        enumerable: true,
        configurable: true
    });
    KTooltipDirective.prototype.isValidContent = function (value) {
        return typeof value !== 'undefined' && value !== '' && value !== null;
    };
    KTooltipDirective.prototype._updateTooltipElement = function () {
        var _this = this;
        if (!this._tooltipContent) {
            if (this._isShowingTooltip()) {
                this._removeTooltipElement();
            }
        }
        else if (this._shouldBeVisible) {
            if (!this._isShowingTooltip()) {
                this._tooltipElement = document.createElement('span');
                this._tooltipElement.style.pointerEvents = 'none';
                this._tooltipElement.className += "ng-tooltip ng-tooltip-" + this.placement;
                if (this.maxWidth > 0) {
                    this._tooltipElement.style.maxWidth = this.maxWidth + "px";
                }
                var addTooltipVisibleClass = function () {
                    if (_this._tooltipElement) {
                        _this._tooltipElement.className += " ng-tooltip-show";
                    }
                };
                if (this.delay) {
                    setTimeout(addTooltipVisibleClass, this.delay);
                }
                else {
                    addTooltipVisibleClass();
                }
                document.body.appendChild(this._tooltipElement);
                if (this._updateTooltipElementContent()) {
                    this._updateTooltipElementPosition();
                }
            }
            else {
                if (this._updateTooltipElementContent()) {
                    this._updateTooltipElementPosition();
                }
            }
        }
        else {
            if (this._isShowingTooltip()) {
                this._removeTooltipElement();
            }
        }
    };
    KTooltipDirective.prototype.onMouseMove = function () {
        if (this.followTarget) {
            this._updateTooltipElementPosition();
        }
    };
    KTooltipDirective.prototype.onMouseEnter = function () {
        if (!this.showOnEllipsis || this.isInEllipsis()) {
            this._shouldBeVisible = true;
            this._updateTooltipElement();
        }
    };
    KTooltipDirective.prototype.onMouseLeave = function () {
        this._shouldBeVisible = false;
        this._updateTooltipElement();
    };
    KTooltipDirective.prototype.isInEllipsis = function () {
        // added the -1 threshold to support IE and edge which always show a 1px difference between offsetWidth and scrollWidth
        return this.elementRef.nativeElement.offsetWidth < (this.elementRef.nativeElement.scrollWidth - 1);
    };
    KTooltipDirective.prototype._removeTooltipElement = function () {
        if (this._tooltipElement) {
            if (this._tooltipElement.parentNode) {
                this._tooltipElement.parentNode.removeChild(this._tooltipElement);
            }
            this._tooltipElement = null;
            this._tooltipHeight = null;
            this._tooltipWidth = null;
        }
    };
    KTooltipDirective.prototype._isShowingTooltip = function () {
        return this._tooltipElement !== null;
    };
    KTooltipDirective.prototype._updateTooltipElementContent = function () {
        if (this._isShowingTooltip() && this._tooltipContent) {
            var content = '';
            if (this.tooltipResolver && typeof this.tooltipResolver === 'string') {
                content = this._tooltipContent[this.tooltipResolver];
            }
            else if (this.tooltipResolver && typeof this.tooltipResolver === 'function') {
                content = this.tooltipResolver(this._tooltipContent);
            }
            else {
                content = this._tooltipContent;
            }
            if (this.isValidContent(content)) {
                // re-check content type to handle scenarios when the tooltipResolver caused the value to be undefined
                this._tooltipElement.innerHTML = '';
                this._tooltipElement.textContent = '';
                if (this.escape) {
                    this._tooltipElement.textContent = content;
                }
                else {
                    this._tooltipElement.innerHTML = content;
                }
                this._tooltipHeight = this._tooltipElement.clientHeight;
                this._tooltipWidth = this._tooltipElement.offsetWidth;
                return true;
            }
            else {
                this._removeTooltipElement();
                return false;
            }
        }
    };
    KTooltipDirective.prototype._updateTooltipElementPosition = function () {
        if (this._isShowingTooltip()) {
            var elemPosition = this.elementRef.nativeElement.getBoundingClientRect();
            if (elemPosition) {
                var elemHeight = this.elementRef.nativeElement.offsetHeight;
                var elemWidth = this.elementRef.nativeElement.offsetWidth;
                if (this.placement == 'top') {
                    this._tooltipElement.style.top = elemPosition.top - (this._tooltipHeight + this.tooltipOffset) + 'px';
                }
                if (this.placement == 'bottom') {
                    this._tooltipElement.style.top = elemPosition.top + elemHeight + this.tooltipOffset + 'px';
                }
                if (this.placement == 'top' || this.placement == 'bottom') {
                    this._tooltipElement.style.left = (elemPosition.left + elemWidth / 2) - this._tooltipWidth / 2 + 'px';
                }
                if (this.placement == 'left') {
                    this._tooltipElement.style.left = elemPosition.left - this._tooltipWidth - this.tooltipOffset + 'px';
                }
                if (this.placement == 'right') {
                    this._tooltipElement.style.left = elemPosition.left + elemWidth + this.tooltipOffset + 'px';
                }
                if (this.placement == 'left' || this.placement == 'right') {
                    this._tooltipElement.style.top = elemPosition.top + elemHeight / 2 - this._tooltipElement.clientHeight / 2 + 'px';
                }
                // correct left positioning of tooltip if outside the screen
                var offsetLeft = parseInt(this._tooltipElement.style.left);
                if (offsetLeft < 0) {
                    this._tooltipElement.style.left = 0 + 'px';
                }
            }
        }
        else {
            this._updateTooltipElement();
        }
    };
    KTooltipDirective.prototype.ngOnDestroy = function () {
        this._removeTooltipElement();
    };
    KTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], KTooltipDirective.prototype, "tooltipResolver", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], KTooltipDirective.prototype, "escape", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], KTooltipDirective.prototype, "tooltipOffset", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], KTooltipDirective.prototype, "placement", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], KTooltipDirective.prototype, "delay", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], KTooltipDirective.prototype, "maxWidth", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], KTooltipDirective.prototype, "followTarget", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], KTooltipDirective.prototype, "showOnEllipsis", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], KTooltipDirective.prototype, "kTooltip", null);
    __decorate([
        HostListener("mousemove"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], KTooltipDirective.prototype, "onMouseMove", null);
    __decorate([
        HostListener("mouseenter"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], KTooltipDirective.prototype, "onMouseEnter", null);
    __decorate([
        HostListener("mouseleave"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], KTooltipDirective.prototype, "onMouseLeave", null);
    KTooltipDirective = __decorate([
        Directive({
            selector: '[kTooltip]'
        }),
        __metadata("design:paramtypes", [ElementRef])
    ], KTooltipDirective);
    return KTooltipDirective;
}());
export { KTooltipDirective };
//# sourceMappingURL=data:application/json;base64,