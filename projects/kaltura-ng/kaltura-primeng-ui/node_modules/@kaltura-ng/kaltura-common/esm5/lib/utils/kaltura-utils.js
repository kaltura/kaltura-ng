import { __read, __spread } from "tslib";
import { Download } from './download';
var _xmlCharMap = {
    '<': '&lt;',
    '>': '&gt;',
    '&': '&amp;'
};
var KalturaUtils = /** @class */ (function () {
    function KalturaUtils() {
    }
    KalturaUtils.escapeXml = function (value) {
        var parsedValue = value;
        switch (typeof value) {
            case 'string':
            case 'number':
            case 'boolean':
                parsedValue = value;
                break;
            default:
                parsedValue = value || '';
                break;
        }
        return String(parsedValue).replace(/[&<>]/g, function (char) { return _xmlCharMap[char]; });
    };
    KalturaUtils.getStartDateValue = function (value) {
        if (value) {
            var newValue = new Date(value.getTime());
            newValue.setHours(0);
            newValue.setMinutes(0);
            newValue.setSeconds(0);
            return newValue;
        }
        else {
            return null;
        }
    };
    KalturaUtils.getEndDateValue = function (value) {
        if (value) {
            var newValue = new Date(value.getTime());
            newValue.setHours(23);
            newValue.setMinutes(59);
            newValue.setSeconds(59);
            return newValue;
        }
        else {
            return null;
        }
    };
    KalturaUtils.removeEmptyProperties = function (value) {
        Object.keys(value).forEach(function (key) {
            if (value[key] && typeof value[key] === 'object') {
                KalturaUtils.removeEmptyProperties(value[key]);
            }
            else if (value[key] === null) {
                delete value[key];
            }
        });
        return value;
    };
    KalturaUtils.moveUpItems = function (list, selectedItems) {
        if (list && list.length && selectedItems && selectedItems.length) {
            var relevantItems = selectedItems.map(function (item) { return ({ selectedItem: item, index: list.indexOf(item) }); })
                .filter(function (item) { return item.index !== -1; })
                .sort(function (a, b) { return a.index - b.index; });
            if (relevantItems.length) {
                var minIndexInSelected = relevantItems[0].index;
                var nextIndex = Math.max(0, minIndexInSelected - 1);
                relevantItems.forEach(function (item, i) {
                    list.splice(item.index - i, 1);
                });
                list.splice.apply(list, __spread([nextIndex, 0], relevantItems.map(function (item) { return item.selectedItem; })));
                return true;
            }
        }
        return false;
    };
    KalturaUtils.moveDownItems = function (list, selectedItems) {
        if (selectedItems && selectedItems.length && list && list.length) {
            var relevantItems = selectedItems.map(function (item) { return ({ selectedItem: item, index: list.indexOf(item) }); })
                .filter(function (item) { return item.index !== -1; })
                .sort(function (a, b) { return a.index - b.index; });
            if (relevantItems.length) {
                var maxIndexInSelected = relevantItems[relevantItems.length - 1].index;
                var nextIndex = Math.min(list.length - 1, maxIndexInSelected + 1);
                relevantItems.forEach(function (item, i) {
                    list.splice(item.index - i, 1);
                });
                var correctedIndex = nextIndex - relevantItems.length;
                list.splice.apply(list, __spread([correctedIndex + 1, 0], relevantItems.map(function (item) { return item.selectedItem; })));
                return true;
            }
        }
        return false;
    };
    KalturaUtils.formatTime = function (value, addTimeChars) {
        if (addTimeChars === void 0) { addTimeChars = false; }
        var hours = Math.floor(Math.round(value) / 3600) % 24;
        var minutes = Math.floor((Math.round(value) / 60) % 60);
        var seconds = Math.round(value) % 60;
        var hoursStr = hours === 0 ? '' : addTimeChars ? hours.toString() + "h:" : hours.toString() + ":";
        var minutesStr = minutes === 0 && hours === 0 ? '00' : minutes < 10 ? '0' + minutes.toString() : minutes.toString();
        var secondsStr = seconds < 10 ? '0' + seconds.toString() : seconds.toString();
        if (addTimeChars) {
            minutesStr = minutesStr + "m";
            secondsStr = secondsStr + "s";
        }
        return hoursStr + minutesStr + ":" + secondsStr;
    };
    KalturaUtils.fromServerDate = function (value) {
        return (value ? new Date(value * 1000) : null);
    };
    KalturaUtils.toServerDate = function (value) {
        return value ? Math.round(value.getTime() / 1000) : null;
    };
    KalturaUtils.download = function (data, strFileName, strMimeType) {
        return Download(data, strFileName, strMimeType);
    };
    return KalturaUtils;
}());
export { KalturaUtils };
//# sourceMappingURL=data:application/json;base64,