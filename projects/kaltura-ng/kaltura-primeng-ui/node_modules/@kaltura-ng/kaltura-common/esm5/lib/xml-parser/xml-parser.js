import { XmlToJSON } from './xml-to-json';
import { KalturaUtils } from '../utils/kaltura-utils';
function convertAttributes(attributes) {
    var parsedAttributes = '';
    if (attributes) {
        Object.keys(attributes).forEach(function (attributeName) {
            var value = KalturaUtils.escapeXml(attributes[attributeName]);
            parsedAttributes += " " + attributeName + "=\"" + value + "\"";
        });
    }
    return parsedAttributes;
}
function convertObjectToXml(prefix, propertyName, propertyValue) {
    var result = "";
    var noPrefixPropertyName = (propertyName || '').indexOf('noprefix:') !== -1;
    if (noPrefixPropertyName) {
        propertyName = propertyName.replace('noprefix:', '');
        prefix = '';
    }
    if (Array.isArray(propertyValue)) {
        propertyValue.forEach(function (innerItem) {
            result += convertObjectToXml(prefix, propertyName, innerItem);
        });
    }
    else if (propertyValue && typeof propertyValue === 'object') {
        var parsedAttributes = convertAttributes(propertyValue['attr']);
        var parsedValue_1 = '';
        if (propertyValue['text']) {
            parsedValue_1 = KalturaUtils.escapeXml(propertyValue['text']);
        }
        else {
            Object.keys(propertyValue).forEach(function (innerProperty) {
                if (innerProperty !== 'attr') {
                    parsedValue_1 += convertObjectToXml(prefix, innerProperty, propertyValue[innerProperty]);
                }
            });
        }
        result += "<" + prefix + propertyName;
        if (parsedAttributes) {
            result += parsedAttributes + ">";
        }
        else {
            result += '>';
        }
        result += parsedValue_1 + "</" + prefix + propertyName + ">";
    }
    return result;
}
var XmlParser = /** @class */ (function () {
    function XmlParser() {
    }
    XmlParser.toJson = function (xml) {
        return XmlToJSON.parseString(xml, {
            textKey: 'text',
            valueKey: 'value',
            attrKey: 'attr',
            cdataKey: 'cdata',
            childrenAsArray: false,
            grokText: false,
            grokAttr: false,
            normalize: false,
        });
    };
    XmlParser.toXml = function (data, root, prefix) {
        if (prefix === void 0) { prefix = ''; }
        var parsedPrefix = prefix ? prefix + ":" : '';
        var parsedObject = '';
        var parsedAttributes = '';
        if (data) {
            parsedAttributes = convertAttributes(data['attr']);
            Object.keys(data).forEach(function (property) {
                if (property !== 'attr') {
                    parsedObject += convertObjectToXml(parsedPrefix, property, data[property]);
                }
            });
        }
        return "<" + parsedPrefix + root + parsedAttributes + ">" + parsedObject + "</" + parsedPrefix + root + ">";
    };
    XmlParser.toSimpleXml = function (data, config) {
        if (config === void 0) { config = {}; }
        var result = '';
        var _parseValueToXml = function (value) {
            var result;
            if (typeof value === 'object') {
                result = XmlParser.toSimpleXml(value, config);
            }
            else {
                result = KalturaUtils.escapeXml(value);
            }
            return result;
        };
        if (data) {
            Object.keys(data).forEach(function (key) {
                var propertyValue = data[key];
                var isEmptyValue = (propertyValue === null || typeof propertyValue === 'undefined' || propertyValue === '');
                if (!config.removeEmpty || (config.removeEmpty && !isEmptyValue)) {
                    if (propertyValue instanceof Array) {
                        propertyValue.map(function (arrayItem) {
                            var valueAsXml = _parseValueToXml(arrayItem);
                            var isEmptyValue = (valueAsXml === null || typeof valueAsXml === 'undefined' || valueAsXml === '');
                            if (!config.removeEmpty || (config.removeEmpty && !isEmptyValue)) {
                                result += "<" + key + ">" + valueAsXml + "</" + key + ">";
                            }
                        });
                    }
                    else if (typeof propertyValue === 'object') {
                        var valueAsXml = _parseValueToXml(propertyValue);
                        var isEmptyValue_1 = (valueAsXml === null || typeof valueAsXml === 'undefined' || valueAsXml === '');
                        if (!config.removeEmpty || (config.removeEmpty && !isEmptyValue_1)) {
                            result += "<" + key + ">" + valueAsXml + "</" + key + ">";
                        }
                    }
                    else {
                        var value = KalturaUtils.escapeXml(propertyValue);
                        result += "<" + key + ">" + value + "</" + key + ">";
                    }
                }
            });
        }
        return result;
    };
    return XmlParser;
}());
export { XmlParser };
//# sourceMappingURL=data:application/json;base64,