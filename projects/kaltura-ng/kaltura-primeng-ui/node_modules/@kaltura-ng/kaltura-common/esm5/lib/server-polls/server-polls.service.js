import { __read, __spread } from "tslib";
import { Observable } from 'rxjs';
import { FriendlyHashId } from '../friendly-hash-id';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { EmptyLogger } from '../kaltura-logger';
var ServerPolls = /** @class */ (function () {
    function ServerPolls(kalturaLogger) {
        this._pollQueue = {};
        this._tokenGenerator = new FriendlyHashId();
        this._missingDestoryHandling = false;
        this._subscriptions = [];
        this._state = new BehaviorSubject({ busy: false });
        this.state$ = this._state.asObservable();
        this._queueInterval = null;
        if (kalturaLogger) {
            this._logger = kalturaLogger;
        }
        else {
            this._logger = new EmptyLogger();
        }
        this._initialize();
    }
    ServerPolls.prototype._warnAboutMissingDestory = function () {
        // NOTICE: showing a warning every time since this is an implementation issue that must be addressed during development.
        var error = "calling method '_getOnDestroy$()' didn't return valid observable (did you remember to provide 'Observable' that will be invoked from ngOnDestroy method?)";
        this._logger.error(error);
    };
    ServerPolls.prototype._initialize = function () {
        var _this = this;
        this._logger.trace('_initialize()');
        setTimeout(function () {
            var onDestroy$ = _this._getOnDestroy$();
            if (!onDestroy$) {
                _this._missingDestoryHandling = true;
                _this._warnAboutMissingDestory();
            }
            else {
                onDestroy$.subscribe(function () {
                    _this._logger.trace('onDestroy$.subscribe()');
                    _this._cancelQueueInterval();
                    _this._subscriptions.forEach(function (item) {
                        item.unsubscribe();
                    });
                    _this._subscriptions = [];
                });
            }
        });
    };
    ServerPolls.prototype._cancelQueueInterval = function () {
        clearTimeout(this._queueTimeout);
    };
    ServerPolls.prototype._getPollQueueList = function () {
        var _this = this;
        return Object.keys(this._pollQueue).map(function (key) { return _this._pollQueue[key]; });
    };
    ServerPolls.prototype._setupQueueTimer = function () {
        var _this = this;
        this._cancelQueueInterval();
        var pollQueueList = this._getPollQueueList();
        if (this._missingDestoryHandling) {
            // NOTICE: showing a warning every time since this is an implementation issue that must be addressed during development.
            this._warnAboutMissingDestory();
        }
        if (!pollQueueList.length) {
            this._logger.info('no actions found in the queue. suspending interval until an action will be added');
            return;
        }
        var newInterval = null;
        var hasNewPolls = pollQueueList.some(function (_a) {
            var lastExecution = _a.lastExecution;
            return !!lastExecution;
        });
        if (!hasNewPolls) {
            newInterval = Math.min.apply(Math, __spread(pollQueueList.map(function (_a) {
                var interval = _a.interval;
                return interval;
            }))) / 2;
        }
        newInterval = newInterval && newInterval > 10 ? newInterval : 10; // default to ten seconds (minimum value)
        if (this._queueInterval !== newInterval) {
            this._logger.info("updating queue interval to poll server every " + newInterval + " seconds");
            this._queueInterval = newInterval;
        }
        this._queueTimeout = setTimeout(function () {
            _this._onQueueTimerTick();
        }, this._queueInterval * 1000);
    };
    ServerPolls.prototype.forcePolling = function () {
        var _this = this;
        this._logger.info('force server polling requested');
        // cancel active requests
        this._cancelQueueInterval();
        this._subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
        this._subscriptions = [];
        // enable all requests
        this._getPollQueueList().forEach(function (item) { return item.queryEnabled = true; });
        // send poll request for all requests
        var subscription = this._queryPollItems(this._getPollQueueList())
            .subscribe(function () { return _this._setupQueueTimer(); }, function () { return _this._setupQueueTimer(); });
    };
    ServerPolls.prototype._queryPollItems = function (items) {
        var _this = this;
        return Observable.create(function (observer) {
            _this._logger.debug("execute server polling");
            if (!_this._canExecute() || !items || items.length === 0) {
                _this._logger.debug("execute server polling ignored, cannot execute request or no items provided to query");
                observer.next(undefined);
                return;
            }
            var requests = items.map(function (item) {
                var ItemRequest;
                var error;
                try {
                    ItemRequest = item.requestFactory.create();
                }
                catch (err) {
                    _this._logger.error("failed to create a request for '" + item.id + "'. got the following error : '" + err.message + "'");
                    ItemRequest = null;
                    error = _this._createGlobalError(err);
                }
                if (error) {
                    _this._propagateServerResponse(item, { error: error, result: null });
                }
                return ItemRequest ? { pollItem: item, request: ItemRequest } : null;
            }).filter(Boolean);
            _this._logger.info("executing server poll for " + requests.length + " items");
            if (!requests.length) {
                observer.next(undefined);
            }
            else {
                var subscription_1 = _this._executeRequests(requests.map(function (item) { return item.request; }))
                    .subscribe(function (response) {
                    _this._removeSubscription(subscription_1);
                    _this._logger.info("got " + response.length + " responses. propagate responses to relevant actions");
                    requests.forEach(function (_a, index) {
                        var pollItem = _a.pollItem;
                        var result = response[index];
                        if (Array.isArray(result)) {
                            result = { result: result, error: null };
                        }
                        _this._propagateServerResponse(pollItem, result);
                    });
                    observer.next(undefined);
                }, function (error) {
                    _this._logger.error("failed to query the server. got the following error : '" + error.message + "'");
                    _this._removeSubscription(subscription_1);
                    var errorResponse = { error: _this._createGlobalError(error), result: null };
                    requests.forEach(function (_a) {
                        var pollItem = _a.pollItem;
                        _this._propagateServerResponse(pollItem, errorResponse);
                    });
                    observer.next(undefined);
                });
                _this._subscriptions.push(subscription_1);
                return function () {
                    _this._removeSubscription(subscription_1);
                };
            }
        });
    };
    ServerPolls.prototype._removeSubscription = function (subscription) {
        if (subscription) {
            var subscriptionIndex = this._subscriptions.indexOf(subscription);
            if (subscriptionIndex > -1) {
                this._subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    ServerPolls.prototype._onQueueTimerTick = function () {
        var _this = this;
        if (!this._canExecute()) {
            this._setupQueueTimer();
            this._logger.trace('_onQueueTimerTick(): canExecute() check failed. ignore current execution');
            return;
        }
        this._logger.debug('prepare server poll request');
        var now = Number(new Date());
        var itemsToBeExecuted = this._getPollQueueList()
            .filter(function (item) { return item.queryEnabled && (!item.lastExecution || (Number(item.lastExecution) + (item.interval * 1000) <= now)); });
        if (!itemsToBeExecuted.length) {
            this._logger.debug('nothing to run. Waiting next tick...');
            this._setupQueueTimer();
            return;
        }
        this._logger.info("set busy mode to true");
        this._state.next({ busy: true });
        this._queryPollItems(itemsToBeExecuted)
            .subscribe(function () {
            _this._state.next({ busy: false });
            _this._setupQueueTimer();
        }, function (error) {
            _this._state.next({ busy: false });
        });
    };
    ServerPolls.prototype._propagateServerResponse = function (item, response) {
        try {
            if (this._pollQueue[item.id]) {
                this._logger.debug("propagating response for " + item.id);
                item.lastExecution = new Date();
                item.observer.next(response);
            }
            else {
                this._logger.info("cannot find registered action for '" + item.id + " (it might indicate that this action was unsubscribed while a request to the server was executed)");
            }
        }
        catch (err) {
            this._logger.warn("error happened while propagating response of '" + item.id + "'.ignoring error. got the following error: " + err.message);
        }
    };
    ServerPolls.prototype.isBusy = function () {
        return this._state.getValue().busy;
    };
    ServerPolls.prototype.register = function (intervalInSeconds, requestFactory) {
        var _this = this;
        return Observable.create(function (observer) {
            var newPollId = _this._tokenGenerator.generateUnique(Object.keys(_this._pollQueue));
            _this._logger.info("register new poll request " + newPollId + " (interval = " + intervalInSeconds + " seconds)");
            var newPollItem = _this._pollQueue[newPollId] = {
                id: newPollId,
                interval: intervalInSeconds,
                lastExecution: null,
                queryEnabled: false,
                requestFactory: requestFactory,
                observer: observer
            };
            _this._logger.info("execute the added request '" + newPollId + "'");
            var initialRequest = _this._queryPollItems([newPollItem])
                .subscribe(function () {
                initialRequest = null;
                newPollItem.queryEnabled = true;
                _this._setupQueueTimer();
            }, function () {
                initialRequest = null;
                newPollItem.queryEnabled = true;
                _this._setupQueueTimer();
            });
            return function () {
                _this._logger.info("stop polling for " + newPollId);
                if (initialRequest) {
                    initialRequest.unsubscribe();
                }
                delete _this._pollQueue[newPollId];
            };
        });
    };
    return ServerPolls;
}());
export { ServerPolls };
//# sourceMappingURL=data:application/json;base64,