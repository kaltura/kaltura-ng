'use strict';
/**
 * Source - from http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/
 */
/**
 * The default alphabet is 25 numbers and lowercase letters.
 * Any numbers that look like letters and vice versa are removed:
 * 1 l, 0 o.
 * Also the following letters are not present, to prevent any
 * expletives: cfhistu
 */
var DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz';
// Governs the length of the ID.
// With an alphabet of 25 chars,
// a length of 8 gives us 25^8 or
// 152,587,890,625 possibilities.
// Should be enough...
var DEFAULT_ID_LENGTH = 5;
/**
 * Governs the number of times we should try to find
 * a unique value before giving up.
 */
var UNIQUE_RETRIES = 9999;
var FriendlyHashId = /** @class */ (function () {
    function FriendlyHashId() {
    }
    FriendlyHashId.generate = function (alphabetOptions) {
        if (!FriendlyHashId.defaultInstance) {
            FriendlyHashId.defaultInstance = new FriendlyHashId();
        }
        return FriendlyHashId.defaultInstance.generate(alphabetOptions);
    };
    /**
     * Returns a randomly-generated friendly ID.
     * Note that the friendly ID is not guaranteed to be
     * unique to any other ID generated by this same method,
     * so it is up to you to check for uniqueness.
     * return {String} friendly ID.
     */
    FriendlyHashId.prototype.generate = function (alphabetOptions) {
        var options = alphabetOptions || {};
        var alphabet = options.alphabet || DEFAULT_ALPHABET;
        var idLength = options.idLength || DEFAULT_ID_LENGTH;
        var rtn = '';
        for (var i = 0; i < idLength; i++) {
            rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));
        }
        return rtn;
    };
    ;
    /**
     * Tries to generate a unique ID that is not defined in the
     * `previous` array.
     * param  {Array} previous The list of previous ids to avoid.
     * return {String} A unique ID, or `null` if one could not be generated.
     */
    FriendlyHashId.prototype.generateUnique = function (previous) {
        previous = previous || [];
        var retries = 0;
        var id;
        // Try to generate a unique ID,
        // i.e. one that isn't in the previous.
        while (!id && retries < UNIQUE_RETRIES) {
            id = this.generate();
            if (previous.indexOf(id) !== -1) {
                id = null;
                retries++;
            }
        }
        return id;
    };
    ;
    FriendlyHashId.defaultInstance = null;
    return FriendlyHashId;
}());
export { FriendlyHashId };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJpZW5kbHktaGFzaC1pZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYWx0dXJhLW5nL2thbHR1cmEtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2ZyaWVuZGx5LWhhc2gtaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2I7O0dBRUc7QUFFSDs7Ozs7O0dBTUc7QUFDSCxJQUFJLGdCQUFnQixHQUNoQiwyQkFBMkIsQ0FBQztBQUVoQyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsc0JBQXNCO0FBQ3RCLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBRTFCOzs7R0FHRztBQUNILElBQUksY0FBYyxHQUFHLElBQUksQ0FBQztBQUkxQjtJQUFBO0lBd0RBLENBQUM7SUFyRFUsdUJBQVEsR0FBZixVQUFnQixlQUFzQjtRQUNsQyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFDbkM7WUFDSSxjQUFjLENBQUMsZUFBZSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7U0FDekQ7UUFDRCxPQUFPLGNBQWMsQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSCxpQ0FBUSxHQUFSLFVBQVMsZUFBc0I7UUFFM0IsSUFBSSxPQUFPLEdBQUcsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUVwQyxJQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLGdCQUFnQixDQUFDO1FBQ3BELElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksaUJBQWlCLENBQUM7UUFFckQsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQixHQUFHLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN2RTtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUFBLENBQUM7SUFFRjs7Ozs7T0FLRztJQUNILHVDQUFjLEdBQWQsVUFBZSxRQUFnQjtRQUMzQixRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDaEIsSUFBSSxFQUFFLENBQUM7UUFFUCwrQkFBK0I7UUFDL0IsdUNBQXVDO1FBQ3ZDLE9BQU8sQ0FBQyxFQUFFLElBQUksT0FBTyxHQUFHLGNBQWMsRUFBRTtZQUNwQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3JCLElBQUksUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDN0IsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDVixPQUFPLEVBQUUsQ0FBQzthQUNiO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFBQSxDQUFDO0lBcERLLDhCQUFlLEdBQW9CLElBQUksQ0FBQztJQXNEbkQscUJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXhEWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuLyoqXG4gKiBTb3VyY2UgLSBmcm9tIGh0dHA6Ly9maXpub29sLmNvbS9ibG9nLzIwMTQvMTEvMTYvc2hvcnQtaWQtZ2VuZXJhdGlvbi1pbi1qYXZhc2NyaXB0L1xuICovXG5cbi8qKlxuICogVGhlIGRlZmF1bHQgYWxwaGFiZXQgaXMgMjUgbnVtYmVycyBhbmQgbG93ZXJjYXNlIGxldHRlcnMuXG4gKiBBbnkgbnVtYmVycyB0aGF0IGxvb2sgbGlrZSBsZXR0ZXJzIGFuZCB2aWNlIHZlcnNhIGFyZSByZW1vdmVkOlxuICogMSBsLCAwIG8uXG4gKiBBbHNvIHRoZSBmb2xsb3dpbmcgbGV0dGVycyBhcmUgbm90IHByZXNlbnQsIHRvIHByZXZlbnQgYW55XG4gKiBleHBsZXRpdmVzOiBjZmhpc3R1XG4gKi9cbnZhciBERUZBVUxUX0FMUEhBQkVUID1cbiAgICAnMjM0NTY3ODlhYmRlZ2prbW5wcXJ2d3h5eic7XG5cbi8vIEdvdmVybnMgdGhlIGxlbmd0aCBvZiB0aGUgSUQuXG4vLyBXaXRoIGFuIGFscGhhYmV0IG9mIDI1IGNoYXJzLFxuLy8gYSBsZW5ndGggb2YgOCBnaXZlcyB1cyAyNV44IG9yXG4vLyAxNTIsNTg3LDg5MCw2MjUgcG9zc2liaWxpdGllcy5cbi8vIFNob3VsZCBiZSBlbm91Z2guLi5cbnZhciBERUZBVUxUX0lEX0xFTkdUSCA9IDU7XG5cbi8qKlxuICogR292ZXJucyB0aGUgbnVtYmVyIG9mIHRpbWVzIHdlIHNob3VsZCB0cnkgdG8gZmluZFxuICogYSB1bmlxdWUgdmFsdWUgYmVmb3JlIGdpdmluZyB1cC5cbiAqL1xudmFyIFVOSVFVRV9SRVRSSUVTID0gOTk5OTtcblxuXG5cbmV4cG9ydCBjbGFzcyBGcmllbmRseUhhc2hJZCB7XG5cbiAgICBzdGF0aWMgZGVmYXVsdEluc3RhbmNlIDogRnJpZW5kbHlIYXNoSWQgPSBudWxsO1xuICAgIHN0YXRpYyBnZW5lcmF0ZShhbHBoYWJldE9wdGlvbnM/IDogYW55KSA6IHN0cmluZyB7XG4gICAgICAgIGlmICghRnJpZW5kbHlIYXNoSWQuZGVmYXVsdEluc3RhbmNlKVxuICAgICAgICB7XG4gICAgICAgICAgICBGcmllbmRseUhhc2hJZC5kZWZhdWx0SW5zdGFuY2UgPSBuZXcgRnJpZW5kbHlIYXNoSWQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRnJpZW5kbHlIYXNoSWQuZGVmYXVsdEluc3RhbmNlLmdlbmVyYXRlKGFscGhhYmV0T3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJhbmRvbWx5LWdlbmVyYXRlZCBmcmllbmRseSBJRC5cbiAgICAgKiBOb3RlIHRoYXQgdGhlIGZyaWVuZGx5IElEIGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlXG4gICAgICogdW5pcXVlIHRvIGFueSBvdGhlciBJRCBnZW5lcmF0ZWQgYnkgdGhpcyBzYW1lIG1ldGhvZCxcbiAgICAgKiBzbyBpdCBpcyB1cCB0byB5b3UgdG8gY2hlY2sgZm9yIHVuaXF1ZW5lc3MuXG4gICAgICogcmV0dXJuIHtTdHJpbmd9IGZyaWVuZGx5IElELlxuICAgICAqL1xuICAgIGdlbmVyYXRlKGFscGhhYmV0T3B0aW9ucz8gOiBhbnkpIDogc3RyaW5nXG4gICAge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFscGhhYmV0T3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgYWxwaGFiZXQgPSBvcHRpb25zLmFscGhhYmV0IHx8IERFRkFVTFRfQUxQSEFCRVQ7XG4gICAgICAgIHZhciBpZExlbmd0aCA9IG9wdGlvbnMuaWRMZW5ndGggfHwgREVGQVVMVF9JRF9MRU5HVEg7XG5cbiAgICAgICAgdmFyIHJ0biA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJ0biArPSBhbHBoYWJldC5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxwaGFiZXQubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJ0bjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJpZXMgdG8gZ2VuZXJhdGUgYSB1bmlxdWUgSUQgdGhhdCBpcyBub3QgZGVmaW5lZCBpbiB0aGVcbiAgICAgKiBgcHJldmlvdXNgIGFycmF5LlxuICAgICAqIHBhcmFtICB7QXJyYXl9IHByZXZpb3VzIFRoZSBsaXN0IG9mIHByZXZpb3VzIGlkcyB0byBhdm9pZC5cbiAgICAgKiByZXR1cm4ge1N0cmluZ30gQSB1bmlxdWUgSUQsIG9yIGBudWxsYCBpZiBvbmUgY291bGQgbm90IGJlIGdlbmVyYXRlZC5cbiAgICAgKi9cbiAgICBnZW5lcmF0ZVVuaXF1ZShwcmV2aW91cyA6IGFueVtdKSB7XG4gICAgICAgIHByZXZpb3VzID0gcHJldmlvdXMgfHwgW107XG4gICAgICAgIHZhciByZXRyaWVzID0gMDtcbiAgICAgICAgdmFyIGlkO1xuXG4gICAgICAgIC8vIFRyeSB0byBnZW5lcmF0ZSBhIHVuaXF1ZSBJRCxcbiAgICAgICAgLy8gaS5lLiBvbmUgdGhhdCBpc24ndCBpbiB0aGUgcHJldmlvdXMuXG4gICAgICAgIHdoaWxlICghaWQgJiYgcmV0cmllcyA8IFVOSVFVRV9SRVRSSUVTKSB7XG4gICAgICAgICAgICBpZCA9IHRoaXMuZ2VuZXJhdGUoKTtcbiAgICAgICAgICAgIGlmIChwcmV2aW91cy5pbmRleE9mKGlkKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0cmllcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH07XG5cbn1cbiJdfQ==