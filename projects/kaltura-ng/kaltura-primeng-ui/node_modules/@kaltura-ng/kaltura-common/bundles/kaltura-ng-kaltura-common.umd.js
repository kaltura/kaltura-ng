(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/BehaviorSubject'), require('rxjs'), require('rxjs/add/operator/groupBy'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@kaltura-ng/kaltura-common', ['exports', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs', 'rxjs/add/operator/groupBy', '@angular/common'], factory) :
    (global = global || self, factory((global['kaltura-ng'] = global['kaltura-ng'] || {}, global['kaltura-ng']['kaltura-common'] = {}), global.ng.core, global.rxjs.BehaviorSubject, global.rxjs, global.rxjs['add/operator/groupBy'], global.ng.common));
}(this, (function (exports, core, BehaviorSubject, rxjs, groupBy, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var OperationTagStoreMediator = /** @class */ (function () {
        function OperationTagStoreMediator() {
        }
        OperationTagStoreMediator.register = function (operationsTagManager) {
            this._operationsTagManager = operationsTagManager;
        };
        OperationTagStoreMediator.increase = function (tag) {
            if (this._operationsTagManager) {
                this._operationsTagManager.increase(tag);
            }
        };
        OperationTagStoreMediator.decrease = function (tag) {
            if (this._operationsTagManager) {
                this._operationsTagManager.decrease(tag);
            }
        };
        OperationTagStoreMediator._operationsTagManager = null;
        return OperationTagStoreMediator;
    }());

    var OperationTagManagerService = /** @class */ (function () {
        function OperationTagManagerService() {
            this._tagStatus = new BehaviorSubject.BehaviorSubject({});
            // whenever a tag status changes this event is emitted
            this.tagStatus$ = this._tagStatus.asObservable();
        }
        // increase the count for a tag
        OperationTagManagerService.prototype.increase = function (tag) {
            var tagsData = this._tagStatus.getValue();
            if (!tagsData[tag]) {
                tagsData[tag] = 0;
            }
            tagsData[tag]++;
            this._tagStatus.next(tagsData);
        };
        OperationTagManagerService.prototype.decrease = function (tag) {
            var tagsData = this._tagStatus.getValue();
            if (tagsData[tag] > 0) {
                tagsData[tag]--;
                this._tagStatus.next(tagsData);
            }
            else {
                tagsData[tag] = 0;
                this._tagStatus.next(tagsData);
            }
        };
        OperationTagManagerService = __decorate([
            core.Injectable(),
            __metadata("design:paramtypes", [])
        ], OperationTagManagerService);
        return OperationTagManagerService;
    }());

    var OperationTagModule = /** @class */ (function () {
        // Prevents angular from creating another instance for operationTagManagerService when defined as provider in more than one place
        // (Each component will get the same instance as in the module/component that called the operationTagManagerService.forRoot)
        function OperationTagModule(operationTagManagerService) {
            if (operationTagManagerService) {
                OperationTagStoreMediator.register(operationTagManagerService);
            }
        }
        OperationTagModule_1 = OperationTagModule;
        OperationTagModule.forRoot = function () {
            return {
                ngModule: OperationTagModule_1,
                providers: [
                    OperationTagManagerService
                ]
            };
        };
        var OperationTagModule_1;
        OperationTagModule.ctorParameters = function () { return [
            { type: OperationTagManagerService, decorators: [{ type: core.Self }, { type: core.Optional }] }
        ]; };
        OperationTagModule = OperationTagModule_1 = __decorate([
            core.NgModule({
                imports: [],
                declarations: [],
                exports: [],
                providers: []
            }),
            __param(0, core.Self()), __param(0, core.Optional()),
            __metadata("design:paramtypes", [OperationTagManagerService])
        ], OperationTagModule);
        return OperationTagModule;
    }());

    'use strict';
    /**
     * Source - from http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/
     */
    /**
     * The default alphabet is 25 numbers and lowercase letters.
     * Any numbers that look like letters and vice versa are removed:
     * 1 l, 0 o.
     * Also the following letters are not present, to prevent any
     * expletives: cfhistu
     */
    var DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz';
    // Governs the length of the ID.
    // With an alphabet of 25 chars,
    // a length of 8 gives us 25^8 or
    // 152,587,890,625 possibilities.
    // Should be enough...
    var DEFAULT_ID_LENGTH = 5;
    /**
     * Governs the number of times we should try to find
     * a unique value before giving up.
     */
    var UNIQUE_RETRIES = 9999;
    var FriendlyHashId = /** @class */ (function () {
        function FriendlyHashId() {
        }
        FriendlyHashId.generate = function (alphabetOptions) {
            if (!FriendlyHashId.defaultInstance) {
                FriendlyHashId.defaultInstance = new FriendlyHashId();
            }
            return FriendlyHashId.defaultInstance.generate(alphabetOptions);
        };
        /**
         * Returns a randomly-generated friendly ID.
         * Note that the friendly ID is not guaranteed to be
         * unique to any other ID generated by this same method,
         * so it is up to you to check for uniqueness.
         * return {String} friendly ID.
         */
        FriendlyHashId.prototype.generate = function (alphabetOptions) {
            var options = alphabetOptions || {};
            var alphabet = options.alphabet || DEFAULT_ALPHABET;
            var idLength = options.idLength || DEFAULT_ID_LENGTH;
            var rtn = '';
            for (var i = 0; i < idLength; i++) {
                rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));
            }
            return rtn;
        };
        ;
        /**
         * Tries to generate a unique ID that is not defined in the
         * `previous` array.
         * param  {Array} previous The list of previous ids to avoid.
         * return {String} A unique ID, or `null` if one could not be generated.
         */
        FriendlyHashId.prototype.generateUnique = function (previous) {
            previous = previous || [];
            var retries = 0;
            var id;
            // Try to generate a unique ID,
            // i.e. one that isn't in the previous.
            while (!id && retries < UNIQUE_RETRIES) {
                id = this.generate();
                if (previous.indexOf(id) !== -1) {
                    id = null;
                    retries++;
                }
            }
            return id;
        };
        ;
        FriendlyHashId.defaultInstance = null;
        return FriendlyHashId;
    }());

    var KalturaLoggerInjectionToken = new core.InjectionToken('kaltura-logger');
    var EmptyLogger = /** @class */ (function () {
        function EmptyLogger() {
        }
        EmptyLogger.prototype.trace = function (message, context) {
        };
        EmptyLogger.prototype.debug = function (message, context) {
        };
        EmptyLogger.prototype.info = function (message, context) {
        };
        EmptyLogger.prototype.warn = function (message, context) {
        };
        EmptyLogger.prototype.error = function (message, context) {
        };
        EmptyLogger.prototype.fatal = function (message, context) {
        };
        EmptyLogger.prototype.subLogger = function (name) {
            return new EmptyLogger();
        };
        return EmptyLogger;
    }());

    var ServerPolls = /** @class */ (function () {
        function ServerPolls(kalturaLogger) {
            this._pollQueue = {};
            this._tokenGenerator = new FriendlyHashId();
            this._missingDestoryHandling = false;
            this._subscriptions = [];
            this._state = new BehaviorSubject.BehaviorSubject({ busy: false });
            this.state$ = this._state.asObservable();
            this._queueInterval = null;
            if (kalturaLogger) {
                this._logger = kalturaLogger;
            }
            else {
                this._logger = new EmptyLogger();
            }
            this._initialize();
        }
        ServerPolls.prototype._warnAboutMissingDestory = function () {
            // NOTICE: showing a warning every time since this is an implementation issue that must be addressed during development.
            var error = "calling method '_getOnDestroy$()' didn't return valid observable (did you remember to provide 'Observable' that will be invoked from ngOnDestroy method?)";
            this._logger.error(error);
        };
        ServerPolls.prototype._initialize = function () {
            var _this = this;
            this._logger.trace('_initialize()');
            setTimeout(function () {
                var onDestroy$ = _this._getOnDestroy$();
                if (!onDestroy$) {
                    _this._missingDestoryHandling = true;
                    _this._warnAboutMissingDestory();
                }
                else {
                    onDestroy$.subscribe(function () {
                        _this._logger.trace('onDestroy$.subscribe()');
                        _this._cancelQueueInterval();
                        _this._subscriptions.forEach(function (item) {
                            item.unsubscribe();
                        });
                        _this._subscriptions = [];
                    });
                }
            });
        };
        ServerPolls.prototype._cancelQueueInterval = function () {
            clearTimeout(this._queueTimeout);
        };
        ServerPolls.prototype._getPollQueueList = function () {
            var _this = this;
            return Object.keys(this._pollQueue).map(function (key) { return _this._pollQueue[key]; });
        };
        ServerPolls.prototype._setupQueueTimer = function () {
            var _this = this;
            this._cancelQueueInterval();
            var pollQueueList = this._getPollQueueList();
            if (this._missingDestoryHandling) {
                // NOTICE: showing a warning every time since this is an implementation issue that must be addressed during development.
                this._warnAboutMissingDestory();
            }
            if (!pollQueueList.length) {
                this._logger.info('no actions found in the queue. suspending interval until an action will be added');
                return;
            }
            var newInterval = null;
            var hasNewPolls = pollQueueList.some(function (_a) {
                var lastExecution = _a.lastExecution;
                return !!lastExecution;
            });
            if (!hasNewPolls) {
                newInterval = Math.min.apply(Math, __spread(pollQueueList.map(function (_a) {
                    var interval = _a.interval;
                    return interval;
                }))) / 2;
            }
            newInterval = newInterval && newInterval > 10 ? newInterval : 10; // default to ten seconds (minimum value)
            if (this._queueInterval !== newInterval) {
                this._logger.info("updating queue interval to poll server every " + newInterval + " seconds");
                this._queueInterval = newInterval;
            }
            this._queueTimeout = setTimeout(function () {
                _this._onQueueTimerTick();
            }, this._queueInterval * 1000);
        };
        ServerPolls.prototype.forcePolling = function () {
            var _this = this;
            this._logger.info('force server polling requested');
            // cancel active requests
            this._cancelQueueInterval();
            this._subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
            this._subscriptions = [];
            // enable all requests
            this._getPollQueueList().forEach(function (item) { return item.queryEnabled = true; });
            // send poll request for all requests
            var subscription = this._queryPollItems(this._getPollQueueList())
                .subscribe(function () { return _this._setupQueueTimer(); }, function () { return _this._setupQueueTimer(); });
        };
        ServerPolls.prototype._queryPollItems = function (items) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                _this._logger.debug("execute server polling");
                if (!_this._canExecute() || !items || items.length === 0) {
                    _this._logger.debug("execute server polling ignored, cannot execute request or no items provided to query");
                    observer.next(undefined);
                    return;
                }
                var requests = items.map(function (item) {
                    var ItemRequest;
                    var error;
                    try {
                        ItemRequest = item.requestFactory.create();
                    }
                    catch (err) {
                        _this._logger.error("failed to create a request for '" + item.id + "'. got the following error : '" + err.message + "'");
                        ItemRequest = null;
                        error = _this._createGlobalError(err);
                    }
                    if (error) {
                        _this._propagateServerResponse(item, { error: error, result: null });
                    }
                    return ItemRequest ? { pollItem: item, request: ItemRequest } : null;
                }).filter(Boolean);
                _this._logger.info("executing server poll for " + requests.length + " items");
                if (!requests.length) {
                    observer.next(undefined);
                }
                else {
                    var subscription_1 = _this._executeRequests(requests.map(function (item) { return item.request; }))
                        .subscribe(function (response) {
                        _this._removeSubscription(subscription_1);
                        _this._logger.info("got " + response.length + " responses. propagate responses to relevant actions");
                        requests.forEach(function (_a, index) {
                            var pollItem = _a.pollItem;
                            var result = response[index];
                            if (Array.isArray(result)) {
                                result = { result: result, error: null };
                            }
                            _this._propagateServerResponse(pollItem, result);
                        });
                        observer.next(undefined);
                    }, function (error) {
                        _this._logger.error("failed to query the server. got the following error : '" + error.message + "'");
                        _this._removeSubscription(subscription_1);
                        var errorResponse = { error: _this._createGlobalError(error), result: null };
                        requests.forEach(function (_a) {
                            var pollItem = _a.pollItem;
                            _this._propagateServerResponse(pollItem, errorResponse);
                        });
                        observer.next(undefined);
                    });
                    _this._subscriptions.push(subscription_1);
                    return function () {
                        _this._removeSubscription(subscription_1);
                    };
                }
            });
        };
        ServerPolls.prototype._removeSubscription = function (subscription) {
            if (subscription) {
                var subscriptionIndex = this._subscriptions.indexOf(subscription);
                if (subscriptionIndex > -1) {
                    this._subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        ServerPolls.prototype._onQueueTimerTick = function () {
            var _this = this;
            if (!this._canExecute()) {
                this._setupQueueTimer();
                this._logger.trace('_onQueueTimerTick(): canExecute() check failed. ignore current execution');
                return;
            }
            this._logger.debug('prepare server poll request');
            var now = Number(new Date());
            var itemsToBeExecuted = this._getPollQueueList()
                .filter(function (item) { return item.queryEnabled && (!item.lastExecution || (Number(item.lastExecution) + (item.interval * 1000) <= now)); });
            if (!itemsToBeExecuted.length) {
                this._logger.debug('nothing to run. Waiting next tick...');
                this._setupQueueTimer();
                return;
            }
            this._logger.info("set busy mode to true");
            this._state.next({ busy: true });
            this._queryPollItems(itemsToBeExecuted)
                .subscribe(function () {
                _this._state.next({ busy: false });
                _this._setupQueueTimer();
            }, function (error) {
                _this._state.next({ busy: false });
            });
        };
        ServerPolls.prototype._propagateServerResponse = function (item, response) {
            try {
                if (this._pollQueue[item.id]) {
                    this._logger.debug("propagating response for " + item.id);
                    item.lastExecution = new Date();
                    item.observer.next(response);
                }
                else {
                    this._logger.info("cannot find registered action for '" + item.id + " (it might indicate that this action was unsubscribed while a request to the server was executed)");
                }
            }
            catch (err) {
                this._logger.warn("error happened while propagating response of '" + item.id + "'.ignoring error. got the following error: " + err.message);
            }
        };
        ServerPolls.prototype.isBusy = function () {
            return this._state.getValue().busy;
        };
        ServerPolls.prototype.register = function (intervalInSeconds, requestFactory) {
            var _this = this;
            return rxjs.Observable.create(function (observer) {
                var newPollId = _this._tokenGenerator.generateUnique(Object.keys(_this._pollQueue));
                _this._logger.info("register new poll request " + newPollId + " (interval = " + intervalInSeconds + " seconds)");
                var newPollItem = _this._pollQueue[newPollId] = {
                    id: newPollId,
                    interval: intervalInSeconds,
                    lastExecution: null,
                    queryEnabled: false,
                    requestFactory: requestFactory,
                    observer: observer
                };
                _this._logger.info("execute the added request '" + newPollId + "'");
                var initialRequest = _this._queryPollItems([newPollItem])
                    .subscribe(function () {
                    initialRequest = null;
                    newPollItem.queryEnabled = true;
                    _this._setupQueueTimer();
                }, function () {
                    initialRequest = null;
                    newPollItem.queryEnabled = true;
                    _this._setupQueueTimer();
                });
                return function () {
                    _this._logger.info("stop polling for " + newPollId);
                    if (initialRequest) {
                        initialRequest.unsubscribe();
                    }
                    delete _this._pollQueue[newPollId];
                };
            });
        };
        return ServerPolls;
    }());

    var TrackedFileStatuses = /** @class */ (function () {
        function TrackedFileStatuses() {
        }
        TrackedFileStatuses.added = 'added'; // one-time status, cannot be assigned twice
        TrackedFileStatuses.pendingPrepare = 'pendingPrepare';
        TrackedFileStatuses.preparing = 'preparing';
        TrackedFileStatuses.prepared = 'prepared'; // one-time status, cannot be assigned twice
        TrackedFileStatuses.pendingUpload = 'waitingUpload';
        TrackedFileStatuses.uploading = 'uploading';
        TrackedFileStatuses.uploadCompleted = 'uploadCompleted'; // one-time status, cannot be assigned twice
        TrackedFileStatuses.failure = 'failure';
        TrackedFileStatuses.cancelled = 'cancelled';
        TrackedFileStatuses.purged = 'purged'; // one-time status, cannot be assigned twice
        return TrackedFileStatuses;
    }());
    var TrackedFile = /** @class */ (function () {
        function TrackedFile(id, data) {
            this.status = TrackedFileStatuses.added;
            this.progress = 0;
            this.uploadCompleteAt = null;
            this.uploadOrder = 0;
            this._statusHistory = {
                'added': true
            };
            this._id = id;
            this.data = data;
        }
        Object.defineProperty(TrackedFile.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: true,
            configurable: true
        });
        TrackedFile.prototype.asData = function () {
            return {
                id: this.id,
                status: this.status,
                uploadStartAt: this.uploadStartAt,
                progress: this.progress,
                uploadCompleteAt: this.uploadCompleteAt,
                uploadOrder: this.uploadOrder,
                failureType: this.failureType,
                failureReason: this.failureReason,
                data: this.data
            };
        };
        TrackedFile.prototype.update = function (changes) {
            if (changes.status && changes.status !== this.status) {
                if (!this.canTransitionTo(changes.status)) {
                    throw new Error("file " + this.id + ": cannot update status to '" + changes.status + "'");
                }
                this._statusHistory[changes.status] = true;
            }
            Object.assign(this, changes);
        };
        TrackedFile.prototype.wasInStatus = function (status) {
            return !!this._statusHistory[status];
        };
        TrackedFile.prototype.canTransitionTo = function (toStatus) {
            var result = false;
            var trackedFile = this;
            var fromStatus = trackedFile ? trackedFile.status : null;
            if (trackedFile && fromStatus && toStatus) {
                if (fromStatus === TrackedFileStatuses.purged) {
                    // never allow changing status once file was purged
                    result = false;
                }
                switch (toStatus) {
                    case TrackedFileStatuses.added:
                        // one-time status, cannot be assigned twice
                        result = !this.wasInStatus(TrackedFileStatuses.added);
                        break;
                    case TrackedFileStatuses.pendingPrepare:
                        result = !this.wasInStatus(TrackedFileStatuses.prepared);
                        break;
                    case TrackedFileStatuses.preparing:
                        result = !this.wasInStatus(TrackedFileStatuses.prepared)
                            && fromStatus === TrackedFileStatuses.pendingPrepare;
                        break;
                    case TrackedFileStatuses.prepared:
                        // one-time status, cannot be assigned twice
                        result = !this.wasInStatus(TrackedFileStatuses.prepared)
                            && fromStatus === TrackedFileStatuses.preparing;
                        break;
                    case TrackedFileStatuses.pendingUpload:
                        result = this.wasInStatus(TrackedFileStatuses.prepared)
                            && !this.wasInStatus(TrackedFileStatuses.uploadCompleted);
                        break;
                    case TrackedFileStatuses.uploading:
                        result = !this.wasInStatus(TrackedFileStatuses.uploadCompleted)
                            && fromStatus === TrackedFileStatuses.pendingUpload;
                        break;
                    case TrackedFileStatuses.uploadCompleted:
                        // one-time status, cannot be assigned twice
                        result = !this.wasInStatus(TrackedFileStatuses.uploadCompleted)
                            && fromStatus === TrackedFileStatuses.uploading;
                        break;
                    case TrackedFileStatuses.cancelled:
                        result = ([TrackedFileStatuses.cancelled, TrackedFileStatuses.uploadCompleted, TrackedFileStatuses.purged].indexOf(fromStatus) === -1);
                        break;
                    case TrackedFileStatuses.failure:
                        // always allow changing to 'failure' status (assuming 'purge' is handled separately before)
                        result = ([TrackedFileStatuses.uploadCompleted, TrackedFileStatuses.purged].indexOf(fromStatus) === -1);
                        break;
                    case TrackedFileStatuses.purged:
                        // one-time status, cannot be assigned twice
                        result = !this.wasInStatus(TrackedFileStatuses.purged);
                        break;
                    default:
                        throw new Error("unknown status provided '" + toStatus + "'");
                }
            }
            return result;
        };
        return TrackedFile;
    }());

    var __ngOnDestroySource__ = Symbol("__ngOnDestroySource__");
    var __ngOnDestroy__ = Symbol("__ngOnDestroy__");
    function cancelOnDestroy(instance, manualDestroy) {
        return function (source) { return source.lift(new CancelOnDestroyOperator(instance, manualDestroy)); };
    }
    var CancelOnDestroyOperator = /** @class */ (function () {
        function CancelOnDestroyOperator(instance, manualDestroy) {
            this.instance = instance;
            this.manualDestroy = manualDestroy;
            if (instance.ngOnDestroy) {
                if (!instance[__ngOnDestroySource__]) {
                    instance[__ngOnDestroySource__] = new rxjs.Subject();
                    instance[__ngOnDestroy__] = instance.ngOnDestroy;
                    instance.ngOnDestroy = function () {
                        this[__ngOnDestroy__].apply(this, arguments);
                        this[__ngOnDestroySource__].next();
                        this[__ngOnDestroySource__].complete();
                    };
                }
            }
        }
        CancelOnDestroyOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CancelOnDestroySubscriber(subscriber, this.instance, this.manualDestroy));
        };
        return CancelOnDestroyOperator;
    }());
    var CancelOnDestroySubscriber = /** @class */ (function (_super) {
        __extends(CancelOnDestroySubscriber, _super);
        function CancelOnDestroySubscriber(destination, _instance, manualDestroy) {
            var _this = _super.call(this, destination) || this;
            _this._instance = _instance;
            _this.manualDestroy = manualDestroy;
            var sources = manualDestroy
                ? rxjs.merge(manualDestroy, _instance[__ngOnDestroySource__])
                : _instance[__ngOnDestroySource__].asObservable();
            _this.add(sources.subscribe(function () {
                destination.unsubscribe();
            }));
            return _this;
        }
        return CancelOnDestroySubscriber;
    }(rxjs.Subscriber));

    function tag(action) {
        return function (source) { return source.lift(new TagOperator(action)); };
    }
    var TagOperator = /** @class */ (function () {
        function TagOperator(_tag) {
            this._tag = _tag;
        }
        TagOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new TagSubscriber(subscriber, this._tag));
        };
        return TagOperator;
    }());
    var TagSubscriber = /** @class */ (function (_super) {
        __extends(TagSubscriber, _super);
        function TagSubscriber(destination, _tag) {
            var _this = _super.call(this, destination) || this;
            _this._tag = _tag;
            _this._isDecreased = false;
            OperationTagStoreMediator.increase(_this._tag);
            return _this;
        }
        TagSubscriber.prototype._error = function (err) {
            if (this._tag && !this._isDecreased) {
                this._isDecreased = true;
                OperationTagStoreMediator.decrease(this._tag);
            }
            _super.prototype._error.call(this, err);
        };
        TagSubscriber.prototype._complete = function () {
            if (this._tag && !this._isDecreased) {
                this._isDecreased = true;
                OperationTagStoreMediator.decrease(this._tag);
            }
            _super.prototype._complete.call(this);
        };
        TagSubscriber.prototype.unsubscribe = function () {
            if (!this.closed && this._tag && !this._isDecreased) {
                this._isDecreased = true;
                OperationTagStoreMediator.decrease(this._tag);
            }
            _super.prototype.unsubscribe.call(this);
        };
        return TagSubscriber;
    }(rxjs.Subscriber));

    var UploadFileAdapterToken = new core.InjectionToken('upload-file-adapter');
    var UploadManagement = /** @class */ (function () {
        function UploadManagement(_uploadFileAdapter) {
            this._uploadFileAdapter = _uploadFileAdapter;
            this._trackedFiles = {};
            this._onTrackedFileChanged = new rxjs.Subject();
            this._maxUploadRequests = null;
            this.onTrackedFileChanged$ = this._onTrackedFileChanged.asObservable();
            this._tokenGenerator = new FriendlyHashId();
        }
        UploadManagement.prototype.setMaxUploadRequests = function (maxUploads) {
            if (maxUploads === null || maxUploads > 0) {
                this._log('info', "limit max upload requests to " + maxUploads);
                this._maxUploadRequests = maxUploads;
            }
            else {
                this._log('info', "remove max upload limitation");
                this._maxUploadRequests = null;
            }
        };
        // TODO [kmcng] replace this function with log library
        UploadManagement.prototype._log = function (level, message, fileId) {
            var messageContext = fileId ? "file '" + fileId + "'" : '';
            var origin = 'upload manager';
            var formattedMessage = "log: [" + level + "] [" + origin + "] " + messageContext + ": " + message;
            switch (level) {
                case 'silly':
                case 'debug':
                case 'info':
                    console.log(formattedMessage);
                    break;
                case 'warn':
                    console.warn(formattedMessage);
                    break;
                case 'error':
                    console.error(formattedMessage);
                    break;
            }
        };
        UploadManagement.prototype.getTrackedFiles = function () {
            var _this = this;
            return Object.keys(this._trackedFiles).map(function (fileId) { return _this._trackedFiles[fileId].asData(); });
        };
        UploadManagement.prototype.getTrackedFile = function (fileId) {
            var relevantFile = this._trackedFiles[fileId];
            return relevantFile ? relevantFile.asData() : null;
        };
        UploadManagement.prototype.addFile = function (file) {
            var _a = __read(this.addFiles([file]), 1), newFileId = _a[0];
            return newFileId;
        };
        UploadManagement.prototype.addFiles = function (files) {
            var _this = this;
            var result = [];
            files.forEach(function (fileData) {
                var newUploadId = _this._tokenGenerator.generateUnique(Object.keys(_this._trackedFiles));
                _this._log('info', "add new file '" + fileData.getFileName() + "' to queue with unique file id", newUploadId);
                _this._createTrackedFile(newUploadId, fileData);
                result.push({ id: newUploadId, data: fileData });
            });
            if (result.length) {
                this._syncUploadQueue();
            }
            return result;
        };
        UploadManagement.prototype.cancelUploadWithError = function (id, reason) {
            this._log('info', "cancel file upload with custom reason '" + reason + "'", id);
            var trackedFile = this._trackedFiles[id];
            if (trackedFile) {
                {
                    if (trackedFile.canTransitionTo(TrackedFileStatuses.cancelled)) {
                        this.cancelUpload(id, false);
                        if (trackedFile.canTransitionTo(TrackedFileStatuses.failure)) {
                            this._updateTrackedFile(trackedFile, {
                                status: TrackedFileStatuses.failure,
                                failureReason: reason || 'unknown error',
                                failureType: 'manual_error'
                            });
                        }
                    }
                }
            }
            else {
                this._log('warn', 'cannot cancel upload, failed to find file with provided id', id);
            }
        };
        UploadManagement.prototype.resumeUpload = function (id) {
            this.resumeUploads([id]);
        };
        UploadManagement.prototype.resumeUploads = function (files) {
            var _this = this;
            var syncUploadQueue = false;
            files.forEach(function (id) {
                _this._log('info', "resume file upload.", id);
                var trackedFile = _this._trackedFiles[id];
                if (trackedFile) {
                    if (trackedFile.wasInStatus(TrackedFileStatuses.prepared)) {
                        _this._updateTrackedFile(trackedFile, {
                            status: TrackedFileStatuses.pendingUpload
                        });
                    }
                    else {
                        _this._updateTrackedFile(trackedFile, {
                            status: TrackedFileStatuses.pendingPrepare
                        });
                    }
                }
                else {
                    _this._log('warn', 'cannot resume upload, failed to find file with provided id', id);
                }
            });
            this._syncUploadQueue();
        };
        UploadManagement.prototype.cancelUpload = function (id, purge) {
            if (purge === void 0) { purge = true; }
            this._log('info', "cancel file upload.", id);
            var trackedFile = this._trackedFiles[id];
            if (trackedFile) {
                if (trackedFile.status !== TrackedFileStatuses.cancelled
                    && trackedFile.canTransitionTo(TrackedFileStatuses.cancelled)) {
                    if (trackedFile.uploadSubscription) {
                        trackedFile.uploadSubscription.unsubscribe();
                        trackedFile.uploadSubscription = null;
                    }
                    this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.cancelled
                    });
                    if (purge) {
                        this.purgeUpload(id);
                    }
                    this._syncUploadQueue();
                }
            }
            else {
                this._log('warn', 'cannot cancel upload, failed to find file with provided id', id);
            }
        };
        UploadManagement.prototype.purgeUpload = function (id) {
            this._log('info', "purge file from queue.", id);
            var trackedFile = this._trackedFiles[id];
            if (trackedFile) {
                if (trackedFile.canTransitionTo(TrackedFileStatuses.purged)) {
                    this.cancelUpload(id, false);
                    this._updateTrackedFile(trackedFile, { status: TrackedFileStatuses.purged });
                    this._removeTrackedFile(trackedFile);
                }
            }
            else {
                this._log('warn', 'cannot purge upload, failed to find file with provided id', id);
            }
        };
        UploadManagement.prototype._removeTrackedFile = function (trackedFile) {
            this._log('info', "remove tracked file from queue", trackedFile.id);
            // Developer notice - this is a cleanup function just in case.
            if (trackedFile.uploadSubscription) {
                trackedFile.uploadSubscription.unsubscribe();
                trackedFile.uploadSubscription = null;
            }
            delete this._trackedFiles[trackedFile.id];
        };
        UploadManagement.prototype._syncUploadQueue = function () {
            var _this = this;
            if (this.syncUploadQueueTimeoutId) {
                clearTimeout(this.syncUploadQueueTimeoutId);
                this.syncUploadQueueTimeoutId = null;
            }
            // DEVELOPER NOTICE: This logic is delayed to the next event loop on purpose to prevent
            // collision between two sync requests
            this.syncUploadQueueTimeoutId = setTimeout(function () {
                _this._log('info', "syncing upload queue");
                _this.syncUploadQueueTimeoutId = null;
                _this._executePreparePhase();
                _this._executeUploadPhase();
            }, 200);
        };
        UploadManagement.prototype._executePreparePhase = function () {
            var _this = this;
            var files = Object.keys(this._trackedFiles).map(function (fileId) { return _this._trackedFiles[fileId]; }).filter(function (trackedFile) {
                return trackedFile.status === TrackedFileStatuses.pendingPrepare
                    && trackedFile.canTransitionTo(TrackedFileStatuses.preparing);
            });
            if (files.length) {
                this._log('info', "handling " + files.length + " files, waiting to be prepared");
                var groupedFiles = files.reduce(function (acc, curr) {
                    var uploadAdapter = _this._getUploadAdapter(curr.data) || null;
                    var matchedItem = acc.find(function (item) { return item.adapter ? item.adapter.constructor === uploadAdapter.constructor : item.adapter === null; });
                    if (matchedItem) {
                        matchedItem.files.push(curr);
                    }
                    else {
                        acc.push({ adapter: uploadAdapter, files: [curr] });
                    }
                    return acc;
                }, []);
                groupedFiles.forEach(function (item) {
                    if (item.adapter) {
                        _this._log('debug', "executing prepare phase for " + item.files.length + " files with adapter '" + item.adapter.label + "'");
                        item.files.forEach(function (file) {
                            _this._updateTrackedFile(file, { status: TrackedFileStatuses.preparing });
                        });
                        item.adapter.prepare(item.files)
                            .pipe(cancelOnDestroy(_this))
                            .subscribe(function (preparedFiles) {
                            _this._log('debug', "executing prepare phase succeeded for " + item.files.length + " files with adapter '" + item.adapter.label + "'.");
                            _this._handlePrepareAdapterResponse(preparedFiles);
                            _this._syncUploadQueue();
                        }, function (reason) {
                            _this._log('error', "executing prepare phase failed for " + item.files.length + " files with adapter '" + item.adapter.label + "'. error: " + reason.message);
                            _this._handlePrepareAdapterResponse(item.files.map(function (file) { return ({ id: file.id, status: false }); }));
                            _this._syncUploadQueue();
                        });
                    }
                    else {
                        item.files.forEach(function (file) {
                            _this._updateTrackedFile(file, {
                                status: TrackedFileStatuses.failure,
                                failureReason: 'upload destination is not supported',
                                failureType: 'unknown_destination'
                            });
                        });
                    }
                });
            }
        };
        UploadManagement.prototype._handlePrepareAdapterResponse = function (responseFiles) {
            var _this = this;
            responseFiles.forEach(function (responseFile) {
                var trackedFile = _this._trackedFiles[responseFile.id];
                if (!trackedFile) {
                    _this._log('warn', "cannot handle prepare response for file '" + responseFile.id + "' since there is no tracking information for that file (did the user purge the file during the prepare execution?)");
                }
                else if (trackedFile.status !== TrackedFileStatuses.preparing) {
                    _this._log('warn', "cannot handle file result from prepare action (did the user cancel the file upload during the prepare execution?)", trackedFile.id);
                }
                else if (responseFile.status) {
                    var changedStatusToPrepared = _this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.prepared
                    });
                    if (changedStatusToPrepared) {
                        _this._updateTrackedFile(trackedFile, {
                            status: TrackedFileStatuses.pendingUpload
                        });
                    }
                }
                else {
                    _this._updateTrackedFile(trackedFile, {
                        status: TrackedFileStatuses.failure,
                        failureReason: 'failed to prepare upload',
                        failureType: 'preparation_failed'
                    });
                }
            });
        };
        UploadManagement.prototype._executeUploadPhase = function () {
            var _this = this;
            var waitingForUploadsFiles = [];
            var activeUploadFiles = [];
            Object.keys(this._trackedFiles).forEach(function (fileId) {
                var trackedFile = _this._trackedFiles[fileId];
                if (trackedFile.status === TrackedFileStatuses.uploading) {
                    activeUploadFiles.push(trackedFile);
                }
                else if (trackedFile.status === TrackedFileStatuses.pendingUpload
                    && trackedFile.canTransitionTo(TrackedFileStatuses.uploading)) {
                    waitingForUploadsFiles.push(trackedFile);
                }
            });
            var activeUploadsCount = activeUploadFiles.length;
            var waitingFilesCount = waitingForUploadsFiles.length;
            if (waitingFilesCount > 0) {
                var nextUploadFiles = [];
                this._log('silly', "active uploads: " + activeUploadsCount + " | pending files: " + waitingFilesCount);
                var availableUploadSlots = (this._maxUploadRequests && this._maxUploadRequests > 0) ? this._maxUploadRequests - activeUploadsCount : waitingFilesCount;
                if (availableUploadSlots > 0) {
                    nextUploadFiles = __spread(waitingForUploadsFiles.sort(function (pendingFile) { return pendingFile.uploadOrder || 1000; })).slice(0, availableUploadSlots);
                }
                this._log('debug', "available upload slots to be used " + availableUploadSlots);
                nextUploadFiles.forEach(function (pendingFile) {
                    _this._initiateUpload(pendingFile);
                });
            }
        };
        UploadManagement.prototype._createTrackedFile = function (id, fileData) {
            var newTrackedFile = this._trackedFiles[id] = new TrackedFile(id, fileData);
            this._onTrackedFileChanged.next(newTrackedFile.asData());
            this._updateTrackedFile(newTrackedFile, { status: TrackedFileStatuses.pendingPrepare });
        };
        UploadManagement.prototype._updateTrackedFile = function (trackedFile, changes) {
            var result = true;
            if (changes.status && changes.status !== trackedFile.status) {
                if (trackedFile.canTransitionTo(changes.status)) {
                    this._log('info', "notify file status changes from '" + trackedFile.status + "' to '" + changes.status + "'", trackedFile.id);
                    trackedFile.update(changes);
                }
                else {
                    this._log('error', "cannot update file data from '" + trackedFile.status + "' to '" + changes.status + ". target status is not allowed. update to status 'failure' instead.", trackedFile.id);
                    trackedFile.update({
                        status: TrackedFileStatuses.failure,
                        failureReason: 'cannot change status',
                        failureType: 'change_not_allowed'
                    });
                    result = false;
                }
            }
            else {
                //this._log('info', `notify file data changes`,trackedFile.id);
                trackedFile.update(changes);
            }
            this._onTrackedFileChanged.next(trackedFile.asData());
            return result;
        };
        UploadManagement.prototype.supportChunkUpload = function (uploadFileData) {
            var uploadAdapter = this._getUploadAdapter(uploadFileData);
            return uploadAdapter ? uploadAdapter.supportChunkUpload() : false;
        };
        UploadManagement.prototype._initiateUpload = function (trackedFile) {
            var _this = this;
            var data = trackedFile.data, id = trackedFile.id;
            var uploadAdapter = this._getUploadAdapter(data);
            this._log('info', "initiate new upload for file '" + id + "'");
            if (!uploadAdapter) {
                this._log('warn', "cannot find destination adapter for requested file, failing upload request");
                this._updateTrackedFile(trackedFile, {
                    status: TrackedFileStatuses.failure,
                    failureReason: 'upload destination is not supported',
                    failureType: 'unknown_destination'
                });
                this._syncUploadQueue();
            }
            else if (trackedFile.canTransitionTo(TrackedFileStatuses.uploading)) {
                if (trackedFile.uploadSubscription) {
                    this._log('warn', "an active upload was found while the status indicated no upload currently in progress. cancel previous upload");
                    trackedFile.uploadSubscription.unsubscribe();
                    trackedFile.uploadSubscription = null;
                }
                this._updateTrackedFile(trackedFile, {
                    status: TrackedFileStatuses.uploading,
                    progress: 0,
                    uploadStartAt: new Date(),
                });
                var canHandleResponse_1 = function (id, actionDescription) {
                    var result = false;
                    var trackedFileStillExists = !!_this._trackedFiles[id];
                    if (!trackedFileStillExists) {
                        _this._log('warn', "cannot handle file upload " + actionDescription + ". There is no tracking file with the provided id (was the file purged?)", id);
                    }
                    else if (trackedFile.status !== TrackedFileStatuses.uploading) {
                        _this._log('warn', "cannot handle file upload " + actionDescription + ". The file status it not 'uploading' (was the file upload cancelled?)", id);
                    }
                    else {
                        result = true;
                    }
                    return result;
                };
                trackedFile.uploadSubscription = uploadAdapter.upload(id, data)
                    .subscribe(function (uploadChanges) {
                    if (canHandleResponse_1(id, 'progress')) {
                        _this._updateTrackedFile(trackedFile, {
                            progress: uploadChanges.progress
                        });
                    }
                }, function (error) {
                    trackedFile.uploadSubscription = null;
                    if (canHandleResponse_1(id, 'failure')) {
                        var failureReason = error && error.message ? error.message : '';
                        _this._updateTrackedFile(trackedFile, {
                            status: TrackedFileStatuses.failure,
                            failureReason: failureReason,
                            failureType: 'general_error'
                        });
                    }
                    _this._syncUploadQueue();
                }, function () {
                    trackedFile.uploadSubscription = null;
                    if (canHandleResponse_1(id, 'completion')) {
                        _this._updateTrackedFile(trackedFile, {
                            status: TrackedFileStatuses.uploadCompleted,
                            progress: 1,
                            uploadCompleteAt: new Date()
                        });
                        _this._removeTrackedFile(trackedFile);
                        _this._syncUploadQueue();
                    }
                });
            }
        };
        UploadManagement.prototype._getUploadAdapter = function (fileData) {
            if (this._uploadFileAdapter) {
                return this._uploadFileAdapter.find(function (uploadFileAdapter) {
                    return uploadFileAdapter.canHandle(fileData);
                });
            }
            else {
                return null;
            }
        };
        UploadManagement.prototype.ngOnDestroy = function () {
            var _this = this;
            Object.keys(this._trackedFiles).forEach(function (id) {
                _this.purgeUpload(id);
            });
        };
        UploadManagement.ctorParameters = function () { return [
            { type: Array, decorators: [{ type: core.Inject, args: [UploadFileAdapterToken,] }, { type: core.Optional }] }
        ]; };
        UploadManagement = __decorate([
            core.Injectable(),
            __param(0, core.Inject(UploadFileAdapterToken)), __param(0, core.Optional()),
            __metadata("design:paramtypes", [Array])
        ], UploadManagement);
        return UploadManagement;
    }());

    var UploadManagementModule = /** @class */ (function () {
        function UploadManagementModule() {
        }
        UploadManagementModule = __decorate([
            core.NgModule({
                imports: [],
                declarations: [],
                exports: [],
                providers: [
                    UploadManagement
                ]
            })
        ], UploadManagementModule);
        return UploadManagementModule;
    }());

    var UploadFileAdapter = /** @class */ (function () {
        function UploadFileAdapter() {
        }
        return UploadFileAdapter;
    }());

    //download.js v4.2, by dandavis; 2008-2016. [CCBY2] see http://danml.com/download.html for tests/usage
    var Download = function (data, strFileName, strMimeType) {
        var self = window, // this script is only for browsers anyway...
        defaultMime = "application/octet-stream", // this default mime also triggers iframe downloads
        mimeType = strMimeType || defaultMime, payload = data, url = !strFileName && !strMimeType && payload, anchor = document.createElement("a"), toString = function (a) { return String(a); }, myBlob = (self['Blob'] || self['MozBlob'] || self['WebKitBlob'] || toString), fileName = strFileName || "download", blob, reader;
        myBlob = myBlob.call ? myBlob.bind(self) : Blob;
        if (String(this) === "true") { //reverse arguments, allowing download.bind(true, "text/xml", "export.xml") to act as a callback
            payload = [payload, mimeType];
            mimeType = payload[0];
            payload = payload[1];
        }
        //go ahead and download dataURLs right away
        if (/^data\:[\w+\-]+\/[\w+\-]+[,;]/.test(payload)) {
            if (payload.length > (1024 * 1024 * 1.999) && myBlob !== toString) {
                payload = dataUrlToBlob(payload);
                mimeType = payload.type || defaultMime;
            }
            else {
                return navigator.msSaveBlob ? // IE10 can't do a[download], only Blobs:
                    navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :
                    saver(payload, false); // everyone else can save dataURLs un-processed
            }
        } //end if dataURL passed?
        blob = payload instanceof myBlob ?
            payload :
            new myBlob([payload], { type: mimeType });
        function dataUrlToBlob(strUrl) {
            var parts = strUrl.split(/[:;,]/), type = parts[1], decoder = parts[2] == "base64" ? atob : decodeURIComponent, binData = decoder(parts.pop()), mx = binData.length, i = 0, uiArr = new Uint8Array(mx);
            for (i; i < mx; ++i)
                uiArr[i] = binData.charCodeAt(i);
            return new myBlob([uiArr], { type: type });
        }
        function saver(url, winMode) {
            if ('download' in anchor) { //html5 A[download]
                anchor.href = url;
                anchor.setAttribute("download", fileName);
                anchor.className = "download-js-link";
                anchor.innerHTML = "downloading...";
                anchor.style.display = "none";
                document.body.appendChild(anchor);
                setTimeout(function () {
                    anchor.click();
                    document.body.removeChild(anchor);
                    if (winMode === true) {
                        setTimeout(function () { self.URL.revokeObjectURL(anchor.href); }, 250);
                    }
                }, 66);
                return true;
            }
            // handle non-a[download] safari as best we can:
            if (/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
                url = url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
                if (!window.open(url)) { // popup blocked, offer direct download:
                    if (confirm("Displaying New Document\n\nUse Save As... to download, then click back to return to this page.")) {
                        location.href = url;
                    }
                }
                return true;
            }
            //do iframe dataURL download (old ch+FF):
            var f = document.createElement("iframe");
            document.body.appendChild(f);
            if (!winMode) { // force a mime that will download:
                url = "data:" + url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
            }
            f.src = url;
            setTimeout(function () { document.body.removeChild(f); }, 333);
        } //end saver
        if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
            return navigator.msSaveBlob(blob, fileName);
        }
        if (self.URL) { // simple fast and modern way using Blob and URL:
            saver(self.URL.createObjectURL(blob), true);
        }
        else {
            // handle non-Blob()+non-URL browsers:
            if (typeof blob === "string" || blob.constructor === toString) {
                try {
                    return saver("data:" + mimeType + ";base64," + self.btoa(blob), false);
                }
                catch (y) {
                    return saver("data:" + mimeType + "," + encodeURIComponent(blob), false);
                }
            }
            // Blob but not URL support:
            reader = new FileReader();
            reader.onload = function (e) {
                saver(this.result, false);
            };
            reader.readAsDataURL(blob);
        }
        return true;
    };

    var _xmlCharMap = {
        '<': '&lt;',
        '>': '&gt;',
        '&': '&amp;'
    };
    var KalturaUtils = /** @class */ (function () {
        function KalturaUtils() {
        }
        KalturaUtils.escapeXml = function (value) {
            var parsedValue = value;
            switch (typeof value) {
                case 'string':
                case 'number':
                case 'boolean':
                    parsedValue = value;
                    break;
                default:
                    parsedValue = value || '';
                    break;
            }
            return String(parsedValue).replace(/[&<>]/g, function (char) { return _xmlCharMap[char]; });
        };
        KalturaUtils.getStartDateValue = function (value) {
            if (value) {
                var newValue = new Date(value.getTime());
                newValue.setHours(0);
                newValue.setMinutes(0);
                newValue.setSeconds(0);
                return newValue;
            }
            else {
                return null;
            }
        };
        KalturaUtils.getEndDateValue = function (value) {
            if (value) {
                var newValue = new Date(value.getTime());
                newValue.setHours(23);
                newValue.setMinutes(59);
                newValue.setSeconds(59);
                return newValue;
            }
            else {
                return null;
            }
        };
        KalturaUtils.removeEmptyProperties = function (value) {
            Object.keys(value).forEach(function (key) {
                if (value[key] && typeof value[key] === 'object') {
                    KalturaUtils.removeEmptyProperties(value[key]);
                }
                else if (value[key] === null) {
                    delete value[key];
                }
            });
            return value;
        };
        KalturaUtils.moveUpItems = function (list, selectedItems) {
            if (list && list.length && selectedItems && selectedItems.length) {
                var relevantItems = selectedItems.map(function (item) { return ({ selectedItem: item, index: list.indexOf(item) }); })
                    .filter(function (item) { return item.index !== -1; })
                    .sort(function (a, b) { return a.index - b.index; });
                if (relevantItems.length) {
                    var minIndexInSelected = relevantItems[0].index;
                    var nextIndex = Math.max(0, minIndexInSelected - 1);
                    relevantItems.forEach(function (item, i) {
                        list.splice(item.index - i, 1);
                    });
                    list.splice.apply(list, __spread([nextIndex, 0], relevantItems.map(function (item) { return item.selectedItem; })));
                    return true;
                }
            }
            return false;
        };
        KalturaUtils.moveDownItems = function (list, selectedItems) {
            if (selectedItems && selectedItems.length && list && list.length) {
                var relevantItems = selectedItems.map(function (item) { return ({ selectedItem: item, index: list.indexOf(item) }); })
                    .filter(function (item) { return item.index !== -1; })
                    .sort(function (a, b) { return a.index - b.index; });
                if (relevantItems.length) {
                    var maxIndexInSelected = relevantItems[relevantItems.length - 1].index;
                    var nextIndex = Math.min(list.length - 1, maxIndexInSelected + 1);
                    relevantItems.forEach(function (item, i) {
                        list.splice(item.index - i, 1);
                    });
                    var correctedIndex = nextIndex - relevantItems.length;
                    list.splice.apply(list, __spread([correctedIndex + 1, 0], relevantItems.map(function (item) { return item.selectedItem; })));
                    return true;
                }
            }
            return false;
        };
        KalturaUtils.formatTime = function (value, addTimeChars) {
            if (addTimeChars === void 0) { addTimeChars = false; }
            var hours = Math.floor(Math.round(value) / 3600) % 24;
            var minutes = Math.floor((Math.round(value) / 60) % 60);
            var seconds = Math.round(value) % 60;
            var hoursStr = hours === 0 ? '' : addTimeChars ? hours.toString() + "h:" : hours.toString() + ":";
            var minutesStr = minutes === 0 && hours === 0 ? '00' : minutes < 10 ? '0' + minutes.toString() : minutes.toString();
            var secondsStr = seconds < 10 ? '0' + seconds.toString() : seconds.toString();
            if (addTimeChars) {
                minutesStr = minutesStr + "m";
                secondsStr = secondsStr + "s";
            }
            return hoursStr + minutesStr + ":" + secondsStr;
        };
        KalturaUtils.fromServerDate = function (value) {
            return (value ? new Date(value * 1000) : null);
        };
        KalturaUtils.toServerDate = function (value) {
            return value ? Math.round(value.getTime() / 1000) : null;
        };
        KalturaUtils.download = function (data, strFileName, strMimeType) {
            return Download(data, strFileName, strMimeType);
        };
        return KalturaUtils;
    }());

    /* Copyright 2013 William Summers, Metatribal Research
     * adapted from https://developer.mozilla.org/en-US/docs/JXON
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * @author William Summers
     *
     */
    var XmlToJSON = (function () {
        var options = {
            mergeCDATA: true,
            grokAttr: true,
            grokText: true,
            normalize: true,
            xmlns: true,
            namespaceKey: '_ns',
            textKey: '_text',
            valueKey: '_value',
            attrKey: '_attr',
            cdataKey: '_cdata',
            attrsAsObject: true,
            stripAttrPrefix: true,
            stripElemPrefix: true,
            childrenAsArray: true // force children into arrays
        };
        var prefixMatch = new RegExp(/(?!xmlns)^.*:/);
        var trimMatch = new RegExp(/^\s+|\s+$/g);
        var grokType = function (sValue) {
            if (/^\s*$/.test(sValue)) {
                return null;
            }
            if (/^(?:true|false)$/i.test(sValue)) {
                return sValue.toLowerCase() === "true";
            }
            if (isFinite(sValue)) {
                return parseFloat(sValue);
            }
            return sValue;
        };
        var parseString = function (xmlString, opt) {
            return this.parseXML(stringToXML(xmlString), opt);
        };
        var parseXML = function (oXMLParent, opt) {
            // initialize options
            for (var key in opt) {
                options[key] = opt[key];
            }
            var vResult = {}, nLength = 0, sCollectedTxt = "";
            // parse namespace information
            if (options.xmlns && oXMLParent.namespaceURI) {
                vResult[options.namespaceKey] = oXMLParent.namespaceURI;
            }
            // parse attributes
            // using attributes property instead of hasAttributes method to support older browsers
            if (oXMLParent.attributes && oXMLParent.attributes.length > 0) {
                var vAttribs = {};
                for (nLength; nLength < oXMLParent.attributes.length; nLength++) {
                    var oAttrib = oXMLParent.attributes.item(nLength);
                    vContent = {};
                    var attribName = '';
                    if (options.stripAttrPrefix) {
                        attribName = oAttrib.name.replace(prefixMatch, '');
                    }
                    else {
                        attribName = oAttrib.name;
                    }
                    if (options.grokAttr) {
                        vContent[options.valueKey] = grokType(oAttrib.value.replace(trimMatch, ''));
                    }
                    else {
                        vContent[options.valueKey] = oAttrib.value.replace(trimMatch, '');
                    }
                    if (options.xmlns && oAttrib.namespaceURI) {
                        vContent[options.namespaceKey] = oAttrib.namespaceURI;
                    }
                    if (options.attrsAsObject) { // attributes with same local name must enable prefixes
                        vAttribs[attribName] = vContent;
                    }
                    else {
                        vResult[options.attrKey + attribName] = vContent;
                    }
                }
                if (options.attrsAsObject) {
                    vResult[options.attrKey] = vAttribs;
                }
                else { }
            }
            // iterate over the children
            if (oXMLParent.hasChildNodes()) {
                for (var oNode, sProp, vContent, nItem = 0; nItem < oXMLParent.childNodes.length; nItem++) {
                    oNode = oXMLParent.childNodes.item(nItem);
                    if (oNode.nodeType === 4) {
                        if (options.mergeCDATA) {
                            sCollectedTxt += oNode.nodeValue;
                        }
                        else {
                            if (vResult.hasOwnProperty(options.cdataKey)) {
                                if (vResult[options.cdataKey].constructor !== Array) {
                                    vResult[options.cdataKey] = [vResult[options.cdataKey]];
                                }
                                vResult[options.cdataKey].push(oNode.nodeValue);
                            }
                            else {
                                if (options.childrenAsArray) {
                                    vResult[options.cdataKey] = [];
                                    vResult[options.cdataKey].push(oNode.nodeValue);
                                }
                                else {
                                    vResult[options.cdataKey] = oNode.nodeValue;
                                }
                            }
                        }
                    } /* nodeType is "CDATASection" (4) */
                    else if (oNode.nodeType === 3) {
                        sCollectedTxt += oNode.nodeValue;
                    } /* nodeType is "Text" (3) */
                    else if (oNode.nodeType === 1) { /* nodeType is "Element" (1) */
                        if (nLength === 0) {
                            vResult = {};
                        }
                        // using nodeName to support browser (IE) implementation with no 'localName' property
                        if (options.stripElemPrefix) {
                            sProp = oNode.nodeName.replace(prefixMatch, '');
                        }
                        else {
                            sProp = oNode.nodeName;
                        }
                        vContent = parseXML(oNode);
                        if (vResult.hasOwnProperty(sProp)) {
                            if (vResult[sProp].constructor !== Array) {
                                vResult[sProp] = [vResult[sProp]];
                            }
                            vResult[sProp].push(vContent);
                        }
                        else {
                            if (options.childrenAsArray) {
                                vResult[sProp] = [];
                                vResult[sProp].push(vContent);
                            }
                            else {
                                vResult[sProp] = vContent;
                            }
                            nLength++;
                        }
                    }
                }
            }
            else if (!sCollectedTxt) { // no children and no text, return null
                if (options.childrenAsArray) {
                    vResult[options.textKey] = [];
                    vResult[options.textKey].push(null);
                }
                else {
                    vResult[options.textKey] = null;
                }
            }
            if (sCollectedTxt) {
                if (options.grokText) {
                    var value = grokType(sCollectedTxt.replace(trimMatch, ''));
                    if (value) {
                        vResult[options.textKey] = value;
                    }
                }
                else if (options.normalize) {
                    vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '').replace(/\s+/g, " ");
                }
                else {
                    vResult[options.textKey] = sCollectedTxt.replace(trimMatch, '');
                }
            }
            return vResult;
        };
        // Convert xmlDocument to a string
        // Returns null on failure
        var xmlToString = function (xmlDoc) {
            try {
                var xmlString = xmlDoc.xml ? xmlDoc.xml : (new XMLSerializer()).serializeToString(xmlDoc);
                return xmlString;
            }
            catch (err) {
                return null;
            }
        };
        // Convert a string to XML Node Structure
        // Returns null on failure
        var stringToXML = function (xmlString) {
            try {
                var xmlDoc = null;
                if (typeof DOMParser === 'function') {
                    var parser = new DOMParser();
                    xmlDoc = parser.parseFromString(xmlString, "text/xml");
                    return xmlDoc;
                }
                else {
                    return null;
                    // TODO [kmcng] consider if to allow active x object
                    // xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
                    // xmlDoc.async = false;
                    // xmlDoc.loadXML(xmlString);
                    //
                    // return xmlDoc;
                }
            }
            catch (e) {
                return null;
            }
        };
        // this is the "revealed"/public part of the module
        return {
            parseXML: parseXML,
            parseString: parseString,
            xmlToString: xmlToString,
            stringToXML: stringToXML
        };
    }());

    function convertAttributes(attributes) {
        var parsedAttributes = '';
        if (attributes) {
            Object.keys(attributes).forEach(function (attributeName) {
                var value = KalturaUtils.escapeXml(attributes[attributeName]);
                parsedAttributes += " " + attributeName + "=\"" + value + "\"";
            });
        }
        return parsedAttributes;
    }
    function convertObjectToXml(prefix, propertyName, propertyValue) {
        var result = "";
        var noPrefixPropertyName = (propertyName || '').indexOf('noprefix:') !== -1;
        if (noPrefixPropertyName) {
            propertyName = propertyName.replace('noprefix:', '');
            prefix = '';
        }
        if (Array.isArray(propertyValue)) {
            propertyValue.forEach(function (innerItem) {
                result += convertObjectToXml(prefix, propertyName, innerItem);
            });
        }
        else if (propertyValue && typeof propertyValue === 'object') {
            var parsedAttributes = convertAttributes(propertyValue['attr']);
            var parsedValue_1 = '';
            if (propertyValue['text']) {
                parsedValue_1 = KalturaUtils.escapeXml(propertyValue['text']);
            }
            else {
                Object.keys(propertyValue).forEach(function (innerProperty) {
                    if (innerProperty !== 'attr') {
                        parsedValue_1 += convertObjectToXml(prefix, innerProperty, propertyValue[innerProperty]);
                    }
                });
            }
            result += "<" + prefix + propertyName;
            if (parsedAttributes) {
                result += parsedAttributes + ">";
            }
            else {
                result += '>';
            }
            result += parsedValue_1 + "</" + prefix + propertyName + ">";
        }
        return result;
    }
    var XmlParser = /** @class */ (function () {
        function XmlParser() {
        }
        XmlParser.toJson = function (xml) {
            return XmlToJSON.parseString(xml, {
                textKey: 'text',
                valueKey: 'value',
                attrKey: 'attr',
                cdataKey: 'cdata',
                childrenAsArray: false,
                grokText: false,
                grokAttr: false,
                normalize: false,
            });
        };
        XmlParser.toXml = function (data, root, prefix) {
            if (prefix === void 0) { prefix = ''; }
            var parsedPrefix = prefix ? prefix + ":" : '';
            var parsedObject = '';
            var parsedAttributes = '';
            if (data) {
                parsedAttributes = convertAttributes(data['attr']);
                Object.keys(data).forEach(function (property) {
                    if (property !== 'attr') {
                        parsedObject += convertObjectToXml(parsedPrefix, property, data[property]);
                    }
                });
            }
            return "<" + parsedPrefix + root + parsedAttributes + ">" + parsedObject + "</" + parsedPrefix + root + ">";
        };
        XmlParser.toSimpleXml = function (data, config) {
            if (config === void 0) { config = {}; }
            var result = '';
            var _parseValueToXml = function (value) {
                var result;
                if (typeof value === 'object') {
                    result = XmlParser.toSimpleXml(value, config);
                }
                else {
                    result = KalturaUtils.escapeXml(value);
                }
                return result;
            };
            if (data) {
                Object.keys(data).forEach(function (key) {
                    var propertyValue = data[key];
                    var isEmptyValue = (propertyValue === null || typeof propertyValue === 'undefined' || propertyValue === '');
                    if (!config.removeEmpty || (config.removeEmpty && !isEmptyValue)) {
                        if (propertyValue instanceof Array) {
                            propertyValue.map(function (arrayItem) {
                                var valueAsXml = _parseValueToXml(arrayItem);
                                var isEmptyValue = (valueAsXml === null || typeof valueAsXml === 'undefined' || valueAsXml === '');
                                if (!config.removeEmpty || (config.removeEmpty && !isEmptyValue)) {
                                    result += "<" + key + ">" + valueAsXml + "</" + key + ">";
                                }
                            });
                        }
                        else if (typeof propertyValue === 'object') {
                            var valueAsXml = _parseValueToXml(propertyValue);
                            var isEmptyValue_1 = (valueAsXml === null || typeof valueAsXml === 'undefined' || valueAsXml === '');
                            if (!config.removeEmpty || (config.removeEmpty && !isEmptyValue_1)) {
                                result += "<" + key + ">" + valueAsXml + "</" + key + ">";
                            }
                        }
                        else {
                            var value = KalturaUtils.escapeXml(propertyValue);
                            result += "<" + key + ">" + value + "</" + key + ">";
                        }
                    }
                });
            }
            return result;
        };
        return XmlParser;
    }());

    var APP_STORAGE_TOKEN = new core.InjectionToken('APP_STORAGE_TOKEN');
    var AppStorage = /** @class */ (function () {
        function AppStorage() {
            this.storage = {};
        }
        AppStorage.prototype.setInLocalStorage = function (key, value) {
            this.storage[key] = value;
        };
        AppStorage.prototype.getFromLocalStorage = function (key) {
            return this.storage[key];
        };
        AppStorage.prototype.removeFromLocalStorage = function (key) {
            delete this.storage[key];
        };
        AppStorage.prototype.setInSessionStorage = function (key, value) {
            this.storage[key] = value;
        };
        AppStorage.prototype.getFromSessionStorage = function (key) {
            return this.storage[key];
        };
        AppStorage.prototype.removeFromSessionStorage = function (key) {
            delete this.storage[key];
        };
        return AppStorage;
    }());

    var KalturaCommonModule = /** @class */ (function () {
        function KalturaCommonModule() {
        }
        KalturaCommonModule_1 = KalturaCommonModule;
        // constructor(@Optional() @SkipSelf() module : KalturaCoreModule, private appBootstrap : AppBootstrap)
        // {
        //     if (module) {
        //         throw new Error("KMCngCoreModule module imported twice.");
        //     }
        // }
        KalturaCommonModule.forRoot = function () {
            return {
                ngModule: KalturaCommonModule_1,
                providers: [
                    { provide: APP_STORAGE_TOKEN, useClass: AppStorage },
                    KalturaUtils,
                    { provide: KalturaLoggerInjectionToken, useClass: EmptyLogger }
                ]
            };
        };
        var KalturaCommonModule_1;
        KalturaCommonModule = KalturaCommonModule_1 = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                ],
                declarations: [],
                exports: [],
                providers: []
            })
        ], KalturaCommonModule);
        return KalturaCommonModule;
    }());

    exports.APP_STORAGE_TOKEN = APP_STORAGE_TOKEN;
    exports.AppStorage = AppStorage;
    exports.Download = Download;
    exports.EmptyLogger = EmptyLogger;
    exports.FriendlyHashId = FriendlyHashId;
    exports.KalturaCommonModule = KalturaCommonModule;
    exports.KalturaLoggerInjectionToken = KalturaLoggerInjectionToken;
    exports.KalturaUtils = KalturaUtils;
    exports.OperationTagManagerService = OperationTagManagerService;
    exports.OperationTagModule = OperationTagModule;
    exports.ServerPolls = ServerPolls;
    exports.TrackedFile = TrackedFile;
    exports.TrackedFileStatuses = TrackedFileStatuses;
    exports.UploadFileAdapter = UploadFileAdapter;
    exports.UploadFileAdapterToken = UploadFileAdapterToken;
    exports.UploadManagement = UploadManagement;
    exports.UploadManagementModule = UploadManagementModule;
    exports.XmlParser = XmlParser;
    exports.cancelOnDestroy = cancelOnDestroy;
    exports.tag = tag;
    exports.ɵa = XmlToJSON;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=kaltura-ng-kaltura-common.umd.js.map
