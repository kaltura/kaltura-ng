import { merge, Subject, Subscriber } from "rxjs";
const __ngOnDestroySource__ = Symbol("__ngOnDestroySource__");
const __ngOnDestroy__ = Symbol("__ngOnDestroy__");
export function cancelOnDestroy(instance, manualDestroy) {
    return (source) => source.lift(new CancelOnDestroyOperator(instance, manualDestroy));
}
class CancelOnDestroyOperator {
    constructor(instance, manualDestroy) {
        this.instance = instance;
        this.manualDestroy = manualDestroy;
        if (instance.ngOnDestroy) {
            if (!instance[__ngOnDestroySource__]) {
                instance[__ngOnDestroySource__] = new Subject();
                instance[__ngOnDestroy__] = instance.ngOnDestroy;
                instance.ngOnDestroy = function () {
                    this[__ngOnDestroy__].apply(this, arguments);
                    this[__ngOnDestroySource__].next();
                    this[__ngOnDestroySource__].complete();
                };
            }
        }
    }
    call(subscriber, source) {
        return source.subscribe(new CancelOnDestroySubscriber(subscriber, this.instance, this.manualDestroy));
    }
}
class CancelOnDestroySubscriber extends Subscriber {
    constructor(destination, _instance, manualDestroy) {
        super(destination);
        this._instance = _instance;
        this.manualDestroy = manualDestroy;
        const sources = manualDestroy
            ? merge(manualDestroy, _instance[__ngOnDestroySource__])
            : _instance[__ngOnDestroySource__].asObservable();
        this.add(sources.subscribe(() => {
            destination.unsubscribe();
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FuY2VsLW9uLWRlc3Ryb3kuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Aa2FsdHVyYS1uZy9rYWx0dXJhLWNvbW1vbi8iLCJzb3VyY2VzIjpbImxpYi9yeGpzL29wZXJhdG9ycy9jYW5jZWwtb24tZGVzdHJveS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFrRCxPQUFPLEVBQUUsVUFBVSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUcvRyxNQUFNLHFCQUFxQixHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0FBQzlELE1BQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBT2xELE1BQU0sVUFBVSxlQUFlLENBQUksUUFBbUIsRUFDbkIsYUFBK0I7SUFDaEUsT0FBTyxDQUFDLE1BQXFCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUN0RyxDQUFDO0FBRUQsTUFBTSx1QkFBdUI7SUFDM0IsWUFBb0IsUUFBbUIsRUFBVSxhQUErQjtRQUE1RCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQzlFLElBQUksUUFBUSxDQUFDLFdBQVcsRUFBRTtZQUN4QixJQUFJLENBQXFCLFFBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO2dCQUNyQyxRQUFTLENBQUMscUJBQXFCLENBQUMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO2dCQUNqRCxRQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQztnQkFFdEUsUUFBUSxDQUFDLFdBQVcsR0FBRztvQkFFckIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7b0JBQzdDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNuQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDekMsQ0FBQyxDQUFDO2FBQ0g7U0FDRjtJQUNILENBQUM7SUFFRCxJQUFJLENBQUMsVUFBeUIsRUFBRSxNQUFXO1FBRXpDLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLHlCQUF5QixDQUFDLFVBQVUsRUFBcUIsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUMzSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLHlCQUE2QixTQUFRLFVBQWE7SUFDdEQsWUFBWSxXQUEwQixFQUNsQixTQUE0QixFQUM1QixhQUErQjtRQUNqRCxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFGRCxjQUFTLEdBQVQsU0FBUyxDQUFtQjtRQUM1QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFHakQsTUFBTSxPQUFPLEdBQUcsYUFBYTtZQUMzQixDQUFDLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUN4RCxDQUFDLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFcEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUN4QixHQUFHLEVBQUU7WUFDSCxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDNUIsQ0FBQyxDQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7bWVyZ2UsIE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbiwgT2JzZXJ2YWJsZSwgT3BlcmF0b3IsIFN1YmplY3QsIFN1YnNjcmliZXIsIFRlYXJkb3duTG9naWN9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQge09uRGVzdHJveX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuY29uc3QgX19uZ09uRGVzdHJveVNvdXJjZV9fID0gU3ltYm9sKFwiX19uZ09uRGVzdHJveVNvdXJjZV9fXCIpO1xuY29uc3QgX19uZ09uRGVzdHJveV9fID0gU3ltYm9sKFwiX19uZ09uRGVzdHJveV9fXCIpO1xuXG5pbnRlcmZhY2UgRW5oYW5jZWRPbkRlc3Ryb3kgZXh0ZW5kcyBPbkRlc3Ryb3kge1xuICBbX19uZ09uRGVzdHJveVNvdXJjZV9fXTogU3ViamVjdDxzdHJpbmc+O1xuICBbX19uZ09uRGVzdHJveV9fXTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbE9uRGVzdHJveTxUPihpbnN0YW5jZTogT25EZXN0cm95LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYW51YWxEZXN0cm95PzogT2JzZXJ2YWJsZTxhbnk+KTogTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFQ+IHtcbiAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IHNvdXJjZS5saWZ0KG5ldyBDYW5jZWxPbkRlc3Ryb3lPcGVyYXRvcihpbnN0YW5jZSwgbWFudWFsRGVzdHJveSkpO1xufVxuXG5jbGFzcyBDYW5jZWxPbkRlc3Ryb3lPcGVyYXRvcjxUPiBpbXBsZW1lbnRzIE9wZXJhdG9yPFQsIFQ+IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbnN0YW5jZTogT25EZXN0cm95LCBwcml2YXRlIG1hbnVhbERlc3Ryb3k/OiBPYnNlcnZhYmxlPGFueT4pIHtcbiAgICBpZiAoaW5zdGFuY2UubmdPbkRlc3Ryb3kpIHtcbiAgICAgIGlmICghKDxFbmhhbmNlZE9uRGVzdHJveT5pbnN0YW5jZSlbX19uZ09uRGVzdHJveVNvdXJjZV9fXSkge1xuICAgICAgICAoPEVuaGFuY2VkT25EZXN0cm95Pmluc3RhbmNlKVtfX25nT25EZXN0cm95U291cmNlX19dID0gbmV3IFN1YmplY3QoKTtcbiAgICAgICAgKDxFbmhhbmNlZE9uRGVzdHJveT5pbnN0YW5jZSlbX19uZ09uRGVzdHJveV9fXSA9IGluc3RhbmNlLm5nT25EZXN0cm95O1xuXG4gICAgICAgIGluc3RhbmNlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKHRoaXM6IEVuaGFuY2VkT25EZXN0cm95KSB7XG5cbiAgICAgICAgICB0aGlzW19fbmdPbkRlc3Ryb3lfX10uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICB0aGlzW19fbmdPbkRlc3Ryb3lTb3VyY2VfX10ubmV4dCgpO1xuICAgICAgICAgIHRoaXNbX19uZ09uRGVzdHJveVNvdXJjZV9fXS5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNhbGwoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPiwgc291cmNlOiBhbnkpOiBUZWFyZG93bkxvZ2ljIHtcblxuICAgIHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBDYW5jZWxPbkRlc3Ryb3lTdWJzY3JpYmVyKHN1YnNjcmliZXIsIDxFbmhhbmNlZE9uRGVzdHJveT50aGlzLmluc3RhbmNlLCB0aGlzLm1hbnVhbERlc3Ryb3kpKTtcbiAgfVxufVxuXG5jbGFzcyBDYW5jZWxPbkRlc3Ryb3lTdWJzY3JpYmVyPFQ+IGV4dGVuZHMgU3Vic2NyaWJlcjxUPiB7XG4gIGNvbnN0cnVjdG9yKGRlc3RpbmF0aW9uOiBTdWJzY3JpYmVyPFQ+LFxuICAgICAgICAgICAgICBwcml2YXRlIF9pbnN0YW5jZTogRW5oYW5jZWRPbkRlc3Ryb3ksXG4gICAgICAgICAgICAgIHByaXZhdGUgbWFudWFsRGVzdHJveT86IE9ic2VydmFibGU8YW55Pikge1xuICAgIHN1cGVyKGRlc3RpbmF0aW9uKTtcblxuICAgIGNvbnN0IHNvdXJjZXMgPSBtYW51YWxEZXN0cm95XG4gICAgICA/IG1lcmdlKG1hbnVhbERlc3Ryb3ksIF9pbnN0YW5jZVtfX25nT25EZXN0cm95U291cmNlX19dKVxuICAgICAgOiBfaW5zdGFuY2VbX19uZ09uRGVzdHJveVNvdXJjZV9fXS5hc09ic2VydmFibGUoKTtcblxuICAgIHRoaXMuYWRkKHNvdXJjZXMuc3Vic2NyaWJlKFxuICAgICAgKCkgPT4ge1xuICAgICAgICBkZXN0aW5hdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgfVxuICAgICkpO1xuICB9XG59XG4iXX0=