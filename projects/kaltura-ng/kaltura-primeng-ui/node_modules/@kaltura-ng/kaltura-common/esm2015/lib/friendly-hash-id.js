'use strict';
/**
 * Source - from http://fiznool.com/blog/2014/11/16/short-id-generation-in-javascript/
 */
/**
 * The default alphabet is 25 numbers and lowercase letters.
 * Any numbers that look like letters and vice versa are removed:
 * 1 l, 0 o.
 * Also the following letters are not present, to prevent any
 * expletives: cfhistu
 */
var DEFAULT_ALPHABET = '23456789abdegjkmnpqrvwxyz';
// Governs the length of the ID.
// With an alphabet of 25 chars,
// a length of 8 gives us 25^8 or
// 152,587,890,625 possibilities.
// Should be enough...
var DEFAULT_ID_LENGTH = 5;
/**
 * Governs the number of times we should try to find
 * a unique value before giving up.
 */
var UNIQUE_RETRIES = 9999;
export class FriendlyHashId {
    static generate(alphabetOptions) {
        if (!FriendlyHashId.defaultInstance) {
            FriendlyHashId.defaultInstance = new FriendlyHashId();
        }
        return FriendlyHashId.defaultInstance.generate(alphabetOptions);
    }
    /**
     * Returns a randomly-generated friendly ID.
     * Note that the friendly ID is not guaranteed to be
     * unique to any other ID generated by this same method,
     * so it is up to you to check for uniqueness.
     * return {String} friendly ID.
     */
    generate(alphabetOptions) {
        var options = alphabetOptions || {};
        var alphabet = options.alphabet || DEFAULT_ALPHABET;
        var idLength = options.idLength || DEFAULT_ID_LENGTH;
        var rtn = '';
        for (var i = 0; i < idLength; i++) {
            rtn += alphabet.charAt(Math.floor(Math.random() * alphabet.length));
        }
        return rtn;
    }
    ;
    /**
     * Tries to generate a unique ID that is not defined in the
     * `previous` array.
     * param  {Array} previous The list of previous ids to avoid.
     * return {String} A unique ID, or `null` if one could not be generated.
     */
    generateUnique(previous) {
        previous = previous || [];
        var retries = 0;
        var id;
        // Try to generate a unique ID,
        // i.e. one that isn't in the previous.
        while (!id && retries < UNIQUE_RETRIES) {
            id = this.generate();
            if (previous.indexOf(id) !== -1) {
                id = null;
                retries++;
            }
        }
        return id;
    }
    ;
}
FriendlyHashId.defaultInstance = null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJpZW5kbHktaGFzaC1pZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYWx0dXJhLW5nL2thbHR1cmEtY29tbW9uLyIsInNvdXJjZXMiOlsibGliL2ZyaWVuZGx5LWhhc2gtaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBQ2I7O0dBRUc7QUFFSDs7Ozs7O0dBTUc7QUFDSCxJQUFJLGdCQUFnQixHQUNoQiwyQkFBMkIsQ0FBQztBQUVoQyxnQ0FBZ0M7QUFDaEMsZ0NBQWdDO0FBQ2hDLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsc0JBQXNCO0FBQ3RCLElBQUksaUJBQWlCLEdBQUcsQ0FBQyxDQUFDO0FBRTFCOzs7R0FHRztBQUNILElBQUksY0FBYyxHQUFHLElBQUksQ0FBQztBQUkxQixNQUFNLE9BQU8sY0FBYztJQUd2QixNQUFNLENBQUMsUUFBUSxDQUFDLGVBQXNCO1FBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUNuQztZQUNJLGNBQWMsQ0FBQyxlQUFlLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQztTQUN6RDtRQUNELE9BQU8sY0FBYyxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILFFBQVEsQ0FBQyxlQUFzQjtRQUUzQixJQUFJLE9BQU8sR0FBRyxlQUFlLElBQUksRUFBRSxDQUFDO1FBRXBDLElBQUksUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksZ0JBQWdCLENBQUM7UUFDcEQsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxpQkFBaUIsQ0FBQztRQUVyRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQy9CLEdBQUcsSUFBSSxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQUEsQ0FBQztJQUVGOzs7OztPQUtHO0lBQ0gsY0FBYyxDQUFDLFFBQWdCO1FBQzNCLFFBQVEsR0FBRyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQzFCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLEVBQUUsQ0FBQztRQUVQLCtCQUErQjtRQUMvQix1Q0FBdUM7UUFDdkMsT0FBTyxDQUFDLEVBQUUsSUFBSSxPQUFPLEdBQUcsY0FBYyxFQUFFO1lBQ3BDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDckIsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUNWLE9BQU8sRUFBRSxDQUFDO2FBQ2I7U0FDSjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUFBLENBQUM7O0FBcERLLDhCQUFlLEdBQW9CLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0Jztcbi8qKlxuICogU291cmNlIC0gZnJvbSBodHRwOi8vZml6bm9vbC5jb20vYmxvZy8yMDE0LzExLzE2L3Nob3J0LWlkLWdlbmVyYXRpb24taW4tamF2YXNjcmlwdC9cbiAqL1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IGFscGhhYmV0IGlzIDI1IG51bWJlcnMgYW5kIGxvd2VyY2FzZSBsZXR0ZXJzLlxuICogQW55IG51bWJlcnMgdGhhdCBsb29rIGxpa2UgbGV0dGVycyBhbmQgdmljZSB2ZXJzYSBhcmUgcmVtb3ZlZDpcbiAqIDEgbCwgMCBvLlxuICogQWxzbyB0aGUgZm9sbG93aW5nIGxldHRlcnMgYXJlIG5vdCBwcmVzZW50LCB0byBwcmV2ZW50IGFueVxuICogZXhwbGV0aXZlczogY2ZoaXN0dVxuICovXG52YXIgREVGQVVMVF9BTFBIQUJFVCA9XG4gICAgJzIzNDU2Nzg5YWJkZWdqa21ucHFydnd4eXonO1xuXG4vLyBHb3Zlcm5zIHRoZSBsZW5ndGggb2YgdGhlIElELlxuLy8gV2l0aCBhbiBhbHBoYWJldCBvZiAyNSBjaGFycyxcbi8vIGEgbGVuZ3RoIG9mIDggZ2l2ZXMgdXMgMjVeOCBvclxuLy8gMTUyLDU4Nyw4OTAsNjI1IHBvc3NpYmlsaXRpZXMuXG4vLyBTaG91bGQgYmUgZW5vdWdoLi4uXG52YXIgREVGQVVMVF9JRF9MRU5HVEggPSA1O1xuXG4vKipcbiAqIEdvdmVybnMgdGhlIG51bWJlciBvZiB0aW1lcyB3ZSBzaG91bGQgdHJ5IHRvIGZpbmRcbiAqIGEgdW5pcXVlIHZhbHVlIGJlZm9yZSBnaXZpbmcgdXAuXG4gKi9cbnZhciBVTklRVUVfUkVUUklFUyA9IDk5OTk7XG5cblxuXG5leHBvcnQgY2xhc3MgRnJpZW5kbHlIYXNoSWQge1xuXG4gICAgc3RhdGljIGRlZmF1bHRJbnN0YW5jZSA6IEZyaWVuZGx5SGFzaElkID0gbnVsbDtcbiAgICBzdGF0aWMgZ2VuZXJhdGUoYWxwaGFiZXRPcHRpb25zPyA6IGFueSkgOiBzdHJpbmcge1xuICAgICAgICBpZiAoIUZyaWVuZGx5SGFzaElkLmRlZmF1bHRJbnN0YW5jZSlcbiAgICAgICAge1xuICAgICAgICAgICAgRnJpZW5kbHlIYXNoSWQuZGVmYXVsdEluc3RhbmNlID0gbmV3IEZyaWVuZGx5SGFzaElkKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEZyaWVuZGx5SGFzaElkLmRlZmF1bHRJbnN0YW5jZS5nZW5lcmF0ZShhbHBoYWJldE9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSByYW5kb21seS1nZW5lcmF0ZWQgZnJpZW5kbHkgSUQuXG4gICAgICogTm90ZSB0aGF0IHRoZSBmcmllbmRseSBJRCBpcyBub3QgZ3VhcmFudGVlZCB0byBiZVxuICAgICAqIHVuaXF1ZSB0byBhbnkgb3RoZXIgSUQgZ2VuZXJhdGVkIGJ5IHRoaXMgc2FtZSBtZXRob2QsXG4gICAgICogc28gaXQgaXMgdXAgdG8geW91IHRvIGNoZWNrIGZvciB1bmlxdWVuZXNzLlxuICAgICAqIHJldHVybiB7U3RyaW5nfSBmcmllbmRseSBJRC5cbiAgICAgKi9cbiAgICBnZW5lcmF0ZShhbHBoYWJldE9wdGlvbnM/IDogYW55KSA6IHN0cmluZ1xuICAgIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhbHBoYWJldE9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdmFyIGFscGhhYmV0ID0gb3B0aW9ucy5hbHBoYWJldCB8fCBERUZBVUxUX0FMUEhBQkVUO1xuICAgICAgICB2YXIgaWRMZW5ndGggPSBvcHRpb25zLmlkTGVuZ3RoIHx8IERFRkFVTFRfSURfTEVOR1RIO1xuXG4gICAgICAgIHZhciBydG4gPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBydG4gKz0gYWxwaGFiZXQuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFscGhhYmV0Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydG47XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyaWVzIHRvIGdlbmVyYXRlIGEgdW5pcXVlIElEIHRoYXQgaXMgbm90IGRlZmluZWQgaW4gdGhlXG4gICAgICogYHByZXZpb3VzYCBhcnJheS5cbiAgICAgKiBwYXJhbSAge0FycmF5fSBwcmV2aW91cyBUaGUgbGlzdCBvZiBwcmV2aW91cyBpZHMgdG8gYXZvaWQuXG4gICAgICogcmV0dXJuIHtTdHJpbmd9IEEgdW5pcXVlIElELCBvciBgbnVsbGAgaWYgb25lIGNvdWxkIG5vdCBiZSBnZW5lcmF0ZWQuXG4gICAgICovXG4gICAgZ2VuZXJhdGVVbmlxdWUocHJldmlvdXMgOiBhbnlbXSkge1xuICAgICAgICBwcmV2aW91cyA9IHByZXZpb3VzIHx8IFtdO1xuICAgICAgICB2YXIgcmV0cmllcyA9IDA7XG4gICAgICAgIHZhciBpZDtcblxuICAgICAgICAvLyBUcnkgdG8gZ2VuZXJhdGUgYSB1bmlxdWUgSUQsXG4gICAgICAgIC8vIGkuZS4gb25lIHRoYXQgaXNuJ3QgaW4gdGhlIHByZXZpb3VzLlxuICAgICAgICB3aGlsZSAoIWlkICYmIHJldHJpZXMgPCBVTklRVUVfUkVUUklFUykge1xuICAgICAgICAgICAgaWQgPSB0aGlzLmdlbmVyYXRlKCk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMuaW5kZXhPZihpZCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHJpZXMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9O1xuXG59XG4iXX0=