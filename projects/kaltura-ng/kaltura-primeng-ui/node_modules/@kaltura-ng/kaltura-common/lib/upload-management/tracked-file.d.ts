import { UploadFileData } from './upload-file-data';
import { ISubscription } from 'rxjs/Subscription';
export declare type TrackedFileStatus = string;
export declare class TrackedFileStatuses {
    static readonly added: TrackedFileStatus;
    static readonly pendingPrepare: TrackedFileStatus;
    static readonly preparing: TrackedFileStatus;
    static readonly prepared: TrackedFileStatus;
    static readonly pendingUpload: TrackedFileStatus;
    static readonly uploading: TrackedFileStatus;
    static readonly uploadCompleted: TrackedFileStatus;
    static readonly failure: TrackedFileStatus;
    static readonly cancelled: TrackedFileStatus;
    static readonly purged: TrackedFileStatus;
}
export interface TrackedFileData {
    id: string;
    status: TrackedFileStatus;
    uploadStartAt: Date;
    progress: number;
    uploadCompleteAt?: Date;
    uploadOrder: number;
    failureType?: string;
    failureReason?: string;
    data: UploadFileData;
}
export interface TrackedFileChanges {
    status?: TrackedFileStatus;
    uploadStartAt?: Date;
    progress?: number;
    uploadCompleteAt?: Date;
    uploadOrder?: number;
    failureType?: string;
    failureReason?: string;
}
export declare class TrackedFile {
    private _id;
    get id(): string;
    status: TrackedFileStatus;
    uploadStartAt?: Date;
    progress: number;
    uploadCompleteAt: Date;
    uploadOrder: number;
    failureType: string;
    failureReason: string;
    data: UploadFileData;
    uploadSubscription: ISubscription;
    private _statusHistory;
    constructor(id: string, data: UploadFileData);
    asData(): TrackedFileData;
    update(changes: TrackedFileChanges): void;
    wasInStatus(status: TrackedFileStatus): boolean;
    canTransitionTo(toStatus: string): boolean;
}
