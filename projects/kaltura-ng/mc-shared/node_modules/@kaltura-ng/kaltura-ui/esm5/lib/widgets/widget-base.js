import { Observable } from 'rxjs/Observable';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import 'rxjs/add/observable/of';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/do';
import { EmptyLogger } from '@kaltura-ng/kaltura-common';
// DEVELOPER NOTE: Don't implement ngOnDestroy - the inheritor will probably override this without calling super()
var WidgetBase = /** @class */ (function () {
    function WidgetBase(_key, logger) {
        this._key = _key;
        // DEVELOPER NOTE: this class cannot use 'cancelOnDestroy' operation
        // because it must assume the inheriter will override it
        this._activateSubscription = null;
        this._dataSource = new ReplaySubject(1);
        this.data$ = this._dataSource.asObservable();
        this._widgetState = { key: this.key, isValid: true, isDirty: false, isAttached: false, isBusy: false, isActive: false, wasActivated: false };
        this._widgetReset = new Subject();
        this.widgetReset$ = this._widgetReset.asObservable();
        if (!_key) {
            throw new Error("Form widget key is required when constructing widget of type '" + typeof this);
        }
        this._logger = logger ? logger.subLogger("widgets." + _key) : new EmptyLogger();
    }
    Object.defineProperty(WidgetBase.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    WidgetBase.prototype.onDataSaving = function (newData, request, originalData) {
    };
    Object.defineProperty(WidgetBase.prototype, "wasActivated", {
        get: function () {
            return this._widgetState.wasActivated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetBase.prototype, "isValid", {
        get: function () {
            return this._widgetState.isValid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetBase.prototype, "isDirty", {
        get: function () {
            return this._widgetState.isDirty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetBase.prototype, "isActive", {
        get: function () {
            return this._widgetState.isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetBase.prototype, "isAttached", {
        get: function () {
            return this._widgetState.isAttached;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetBase.prototype, "isBusy", {
        get: function () {
            return this._widgetState.isBusy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetBase.prototype, "key", {
        get: function () {
            return this._key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetBase.prototype, "isNewData", {
        get: function () {
            return this.form.isNewData;
        },
        enumerable: true,
        configurable: true
    });
    WidgetBase.prototype.onValidate = function (wasActivated) {
        return Observable.of({ isValid: true });
    };
    WidgetBase.prototype.updateState = function (stateUpdate) {
        this._updateState(stateUpdate);
    };
    WidgetBase.prototype._updateState = function (stateUpdate) {
        var _this = this;
        this._verifyRegistered();
        var stateHasChanges = Object.keys(stateUpdate).reduce(function (result, propertyName) { return result || _this._widgetState[propertyName] !== stateUpdate[propertyName]; }, false);
        if (stateHasChanges) {
            Object.assign(this._widgetState, stateUpdate);
            if (this.form) {
                var newWidgetState = Object.assign({}, this._widgetState);
                this.form._updateWidgetState(newWidgetState);
            }
        }
    };
    WidgetBase.prototype.onDataLoaded = function (data) {
    };
    WidgetBase.prototype.onDataLoading = function (dataId) {
    };
    WidgetBase.prototype.onActivate = function (firstTimeActivating) {
    };
    WidgetBase.prototype._setForm = function (manager) {
        this.form = manager;
    };
    WidgetBase.prototype._handleDataLoading = function (dataId) {
        this._verifyRegistered();
        this._setData(null);
        this.onDataLoading(dataId);
    };
    WidgetBase.prototype._setData = function (data) {
        this._data = data;
        this._dataSource.next(data);
    };
    WidgetBase.prototype._handleDataLoaded = function (data) {
        this._verifyRegistered();
        this._setData(data);
        this.onDataLoaded(data);
    };
    WidgetBase.prototype._validate = function () {
        var _this = this;
        this._verifyRegistered();
        return this.onValidate(this.wasActivated)
            .do(function (response) {
            var updateState = (response.isValid !== _this._widgetState.isValid);
            if (updateState) {
                _this._logger.info("[widget] widget '" + _this.key + "': widget 'isValid' state doesn't match result of 'onValidate'. updating status to '" + (response.isValid ? 'valid' : 'invalid') + "'");
                _this.updateState({ isValid: response.isValid });
            }
        });
    };
    WidgetBase.prototype._handleDataSaving = function (newData, request, originalData) {
        this._verifyRegistered();
        this.onDataSaving(newData, request, originalData);
    };
    WidgetBase.prototype._reset = function () {
        this._verifyRegistered();
        this._logger.info("[widget] widget '" + this.key + "': reset widget");
        if (this._activateSubscription) {
            this._activateSubscription.unsubscribe();
            this._activateSubscription = null;
        }
        this._widgetReset.next('');
        this._updateState({ isValid: true, isDirty: false, isActive: false, isBusy: false });
        this.onReset();
    };
    WidgetBase.prototype._verifyRegistered = function () {
        if (!this.form) {
            this._logger.error("[widget] widget '" + this.key + "': cannot perform action, widget is not registered to a manager (did you forgot to register it in the main route component?)");
            throw new Error("[widget] cannot perform action. widget with key ''" + this.key + "'' is not registered to a manager");
        }
    };
    WidgetBase.prototype.activate = function () {
        var _this = this;
        this._verifyRegistered();
        if (this.data && this.isAttached && !this.isActive) {
            this._reset();
            var previousStatus_1 = {
                wasActivated: this.wasActivated
            };
            this._logger.info("[widget] widget '" + this.key + "': activating widget (first time = " + !previousStatus_1.wasActivated + ")");
            var activate$ = this.onActivate(!this.wasActivated);
            this._updateState({ isActive: true, wasActivated: true });
            if (activate$ instanceof Observable) {
                this._logger.info("[widget] widget '" + this.key + "': widget requested for async activation operation. executing async operation.");
                this._activateSubscription = activate$
                    .catch(function (error, caught) { return Observable.of({ failed: true, error: error }); })
                    .subscribe(function (response) {
                    if (response && response.failed) {
                        _this._logger.info("[widget] widget '" + _this.key + "': async widget activation failed. revert state to " + JSON.stringify(previousStatus_1) + ")");
                        _this._updateState({ isActive: false, wasActivated: previousStatus_1.wasActivated });
                    }
                    else {
                        _this._logger.info("[widget] widget '" + _this.key + "': async widget activation completed");
                    }
                }, function () {
                    _this._activateSubscription = null;
                }, function () {
                    _this._activateSubscription = null;
                });
            }
        }
    };
    WidgetBase.prototype.attachForm = function () {
        this._verifyRegistered();
        if (this.isAttached) {
            this._logger.warn("[widget] widget with key '" + this.key + "' is already attached (did you attached two components to the same widget? did you forgot to detach the widget upon ngOnDestroy?)");
        }
        else {
            this._logger.info("[widget] widget '" + this.key + "': attaching widget");
            this._updateState({ isAttached: true });
            this.activate();
        }
    };
    WidgetBase.prototype.detachForm = function () {
        this._verifyRegistered();
        if (!this.isAttached) {
            this._logger.warn("[widget] widget with key '" + this.key + "' is already detached (did you attached two components to the same widget? did you forgot to attach the widget upon ngOnInit?)");
        }
        else {
            this._logger.info("[widget] widget '" + this.key + "': detaching widget");
            this._updateState({ isAttached: false });
        }
    };
    WidgetBase.prototype.destory = function () {
        this._reset();
        this._widgetReset.complete();
    };
    return WidgetBase;
}());
export { WidgetBase };
//# sourceMappingURL=data:application/json;base64,