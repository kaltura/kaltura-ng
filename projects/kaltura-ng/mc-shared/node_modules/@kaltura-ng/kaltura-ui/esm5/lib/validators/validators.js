// accepts http/https/ftp
export var urlRegex = new RegExp("(ftp|https?):\\/\\/(www\\.)?[-a-zA-Z0-9^@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9^@:%_\\+.~#?&//=]*)", "i");
// accepts http/https
export var urlHttpRegex = new RegExp("(https?):\\/\\/(www\\.)?[-a-zA-Z0-9^@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9^@:%_\\+.~#?&//=]*)", "i");
export var ipRegex = new RegExp("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", "i");
/**
 * Provides a set of validators used by form controls.
 *
 * A validator is a function that processes a {@link FormControl} or collection of
 * controls and returns a map of errors. A null map means that validation has passed.
 *
 * ### Example
 *
 * ```typescript
 * var loginControl = new FormControl("", [Validators.ip, Validators.required])
 * ```
 *
 */
var KalturaValidators = /** @class */ (function () {
    function KalturaValidators() {
    }
    /**
     * Validator that requires controls to have a value represented as IP (value not required).
     */
    KalturaValidators.ip = function (control) {
        if (!control.value || !control.value.length)
            return null;
        return ipRegex.test(control.value) ? null : { 'ip': true };
    };
    /**
     * Validator that requires controls to have a value represented as URL (value not required).
     */
    KalturaValidators.url = function (control) {
        if (!control.value || !control.value.length)
            return null;
        return urlRegex.test(control.value) ? null : { 'url': true };
    };
    /**
     * Validator that requires controls to have a value represented as URL (value not required).
     */
    KalturaValidators.urlHttp = function (control) {
        if (!control.value || !control.value.length)
            return null;
        return urlHttpRegex.test(control.value) ? null : { 'url': true };
    };
    /**
     * Url validation
     */
    KalturaValidators.isUrlValid = function (url) {
        return urlRegex.test(url);
    };
    return KalturaValidators;
}());
export { KalturaValidators };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYWx0dXJhLW5nL2thbHR1cmEtdWkvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy92YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHlCQUF5QjtBQUN6QixNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsNEdBQTRHLEVBQUMsR0FBRyxDQUFDLENBQUM7QUFFckoscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBRSxJQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyx3R0FBd0csRUFBQyxHQUFHLENBQUMsQ0FBQztBQUN0SixNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsMkdBQTJHLEVBQUMsR0FBRyxDQUFDLENBQUM7QUFDbko7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0g7SUFBQTtJQWtDQSxDQUFDO0lBaENHOztPQUVHO0lBQ0ksb0JBQUUsR0FBVCxVQUFVLE9BQXdCO1FBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFDekQsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxxQkFBRyxHQUFWLFVBQVcsT0FBd0I7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUN6RCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO0lBQy9ELENBQUM7SUFFRDs7T0FFRztJQUNJLHlCQUFPLEdBQWQsVUFBZSxPQUF3QjtRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQ3pELE9BQU8sWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUM7SUFDbkUsQ0FBQztJQUdEOztPQUVHO0lBQ0ksNEJBQVUsR0FBakIsVUFBa0IsR0FBVztRQUN6QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVMLHdCQUFDO0FBQUQsQ0FBQyxBQWxDRCxJQWtDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcblxuLy8gYWNjZXB0cyBodHRwL2h0dHBzL2Z0cFxuZXhwb3J0IGNvbnN0IHVybFJlZ2V4ID0gbmV3IFJlZ0V4cChcIihmdHB8aHR0cHM/KTpcXFxcL1xcXFwvKHd3d1xcXFwuKT9bLWEtekEtWjAtOV5AOiUuX1xcXFwrfiM9XXsyLDI1Nn1cXFxcLlthLXpdezIsNn1cXFxcYihbLWEtekEtWjAtOV5AOiVfXFxcXCsufiM/Ji8vPV0qKVwiLFwiaVwiKTtcblxuLy8gYWNjZXB0cyBodHRwL2h0dHBzXG5leHBvcnQgIGNvbnN0IHVybEh0dHBSZWdleCA9IG5ldyBSZWdFeHAoXCIoaHR0cHM/KTpcXFxcL1xcXFwvKHd3d1xcXFwuKT9bLWEtekEtWjAtOV5AOiUuX1xcXFwrfiM9XXsyLDI1Nn1cXFxcLlthLXpdezIsNn1cXFxcYihbLWEtekEtWjAtOV5AOiVfXFxcXCsufiM/Ji8vPV0qKVwiLFwiaVwiKTtcbmV4cG9ydCBjb25zdCBpcFJlZ2V4ID0gbmV3IFJlZ0V4cChcIl4oKFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pXFwuKXszfShbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKSRcIixcImlcIik7XG4vKipcbiAqIFByb3ZpZGVzIGEgc2V0IG9mIHZhbGlkYXRvcnMgdXNlZCBieSBmb3JtIGNvbnRyb2xzLlxuICpcbiAqIEEgdmFsaWRhdG9yIGlzIGEgZnVuY3Rpb24gdGhhdCBwcm9jZXNzZXMgYSB7QGxpbmsgRm9ybUNvbnRyb2x9IG9yIGNvbGxlY3Rpb24gb2ZcbiAqIGNvbnRyb2xzIGFuZCByZXR1cm5zIGEgbWFwIG9mIGVycm9ycy4gQSBudWxsIG1hcCBtZWFucyB0aGF0IHZhbGlkYXRpb24gaGFzIHBhc3NlZC5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHZhciBsb2dpbkNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woXCJcIiwgW1ZhbGlkYXRvcnMuaXAsIFZhbGlkYXRvcnMucmVxdWlyZWRdKVxuICogYGBgXG4gKlxuICovXG5leHBvcnQgY2xhc3MgS2FsdHVyYVZhbGlkYXRvcnMge1xuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIHJlcHJlc2VudGVkIGFzIElQICh2YWx1ZSBub3QgcmVxdWlyZWQpLlxuICAgICAqL1xuICAgIHN0YXRpYyBpcChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzfG51bGwge1xuICAgICAgICBpZiAoIWNvbnRyb2wudmFsdWUgfHwgIWNvbnRyb2wudmFsdWUubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIGlwUmVnZXgudGVzdChjb250cm9sLnZhbHVlKSA/IG51bGwgOiB7J2lwJzogdHJ1ZX07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIHJlcHJlc2VudGVkIGFzIFVSTCAodmFsdWUgbm90IHJlcXVpcmVkKS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdXJsKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnN8bnVsbCB7XG4gICAgICAgIGlmICghY29udHJvbC52YWx1ZSB8fCAhY29udHJvbC52YWx1ZS5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdXJsUmVnZXgudGVzdChjb250cm9sLnZhbHVlKSA/IG51bGwgOiB7J3VybCc6IHRydWV9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSByZXByZXNlbnRlZCBhcyBVUkwgKHZhbHVlIG5vdCByZXF1aXJlZCkuXG4gICAgICovXG4gICAgc3RhdGljIHVybEh0dHAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9yc3xudWxsIHtcbiAgICAgICAgaWYgKCFjb250cm9sLnZhbHVlIHx8ICFjb250cm9sLnZhbHVlLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiB1cmxIdHRwUmVnZXgudGVzdChjb250cm9sLnZhbHVlKSA/IG51bGwgOiB7J3VybCc6IHRydWV9O1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVXJsIHZhbGlkYXRpb25cbiAgICAgKi9cbiAgICBzdGF0aWMgaXNVcmxWYWxpZCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdXJsUmVnZXgudGVzdCh1cmwpO1xuICAgIH1cblxufVxuIl19