import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
var StickyScrollService = /** @class */ (function () {
    function StickyScrollService() {
        this._scrollSubject = new Subject();
        this.scrollStatus$ = this._scrollSubject.asObservable();
        this._resizeSubject = new Subject();
        this.resizeStatus$ = this._resizeSubject.asObservable();
        this._layoutSubject = new BehaviorSubject({});
        this.layoutSubject$ = this._layoutSubject.asObservable();
        this.stickyElements = {};
        this.manageScrollFunc = this.manageScrollEvent.bind(this);
        this.manageResizeFunc = this.manageResizeEvent.bind(this);
        window.addEventListener('scroll', this.manageScrollFunc);
        window.addEventListener('resize', this.manageResizeFunc);
    }
    StickyScrollService.prototype.ngOnDestroy = function () {
        window.removeEventListener('scroll', this.manageScrollFunc);
        window.removeEventListener('resize', this.manageResizeFunc);
    };
    StickyScrollService.prototype.manageScrollEvent = function () {
        this._scrollSubject.next({});
    };
    StickyScrollService.prototype.manageResizeEvent = function () {
        this._resizeSubject.next({});
    };
    StickyScrollService.prototype.attach = function (id) {
        if (!id) {
            throw new Error("sticky service::missing id on attach!");
        }
        else if (typeof this.stickyElements[id] !== "undefined") {
            throw new Error("sticky service::id already exists! (" + id + ")");
        }
        else {
            this.stickyElements[id] = null;
        }
    };
    StickyScrollService.prototype.detach = function (id) {
        if (!id) {
            console.warn("sticky service::missing id on attach!");
        }
        else {
            delete this.stickyElements[id];
        }
    };
    StickyScrollService.prototype.update = function (id, height, offset) {
        if (!id) {
            console.warn("sticky service::missing id!");
        }
        else {
            var currentValue = this.stickyElements[id];
            if (typeof currentValue !== "undefined") {
                if (currentValue === null || currentValue.height !== height || currentValue.offset !== offset) {
                    this.stickyElements[id] = { height: height, offset: offset };
                    this._layoutSubject.next(this.stickyElements);
                }
            }
            else {
                throw new Error("unknown sticky element '" + id + "' (did you attach it before updating?)");
            }
        }
    };
    StickyScrollService = __decorate([
        Injectable(),
        __metadata("design:paramtypes", [])
    ], StickyScrollService);
    return StickyScrollService;
}());
export { StickyScrollService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RpY2t5LXNjcm9sbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbHR1cmEtbmcva2FsdHVyYS11aS8iLCJzb3VyY2VzIjpbImxpYi9zdGlja3kvc2VydmljZXMvc3RpY2t5LXNjcm9sbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXZEO0lBYUM7UUFYUSxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFNLENBQUM7UUFDcEMsa0JBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2xELG1CQUFjLEdBQUcsSUFBSSxPQUFPLEVBQU0sQ0FBQztRQUNwQyxrQkFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbEQsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBSyxFQUFFLENBQUMsQ0FBQztRQUM5QyxtQkFBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFbkQsbUJBQWMsR0FBUSxFQUFFLENBQUM7UUFDekIscUJBQWdCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyRCxxQkFBZ0IsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBSTVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQseUNBQVcsR0FBWDtRQUNDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDNUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsK0NBQWlCLEdBQWpCO1FBQ0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELCtDQUFpQixHQUFqQjtRQUNDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxvQ0FBTSxHQUFOLFVBQU8sRUFBVTtRQUNoQixJQUFJLENBQUMsRUFBRSxFQUFDO1lBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQ3pEO2FBQUssSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEtBQUssV0FBVyxFQUFFO1lBQ3pELE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLEdBQUMsRUFBRSxHQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQy9EO2FBQUk7WUFDSixJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFFRCxvQ0FBTSxHQUFOLFVBQU8sRUFBVTtRQUNoQixJQUFJLENBQUMsRUFBRSxFQUFDO1lBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQ3REO2FBQUs7WUFDTCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0I7SUFDRixDQUFDO0lBRUQsb0NBQU0sR0FBTixVQUFPLEVBQVUsRUFBRSxNQUFjLEVBQUUsTUFBYztRQUNoRCxJQUFJLENBQUMsRUFBRSxFQUFDO1lBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1NBQzVDO2FBQUs7WUFDTCxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdDLElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxFQUFFO2dCQUN4QyxJQUFJLFlBQVksS0FBSyxJQUFJLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7b0JBQzlGLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQyxNQUFNLFFBQUEsRUFBRSxNQUFNLFFBQUEsRUFBQyxDQUFDO29CQUMzQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7aUJBQzlDO2FBQ0Q7aUJBQU07Z0JBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBMkIsRUFBRSwyQ0FBd0MsQ0FBQyxDQUFDO2FBQ3ZGO1NBQ0Q7SUFDRixDQUFDO0lBaEVXLG1CQUFtQjtRQUQvQixVQUFVLEVBQUU7O09BQ0EsbUJBQW1CLENBaUUvQjtJQUFELDBCQUFDO0NBQUEsQUFqRUQsSUFpRUM7U0FqRVksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMvQmVoYXZpb3JTdWJqZWN0JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3RpY2t5U2Nyb2xsU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveVxue1xuXHRwcml2YXRlIF9zY3JvbGxTdWJqZWN0ID0gbmV3IFN1YmplY3Q8e30+KCk7XG5cdHB1YmxpYyBzY3JvbGxTdGF0dXMkID0gdGhpcy5fc2Nyb2xsU3ViamVjdC5hc09ic2VydmFibGUoKTtcblx0cHJpdmF0ZSBfcmVzaXplU3ViamVjdCA9IG5ldyBTdWJqZWN0PHt9PigpO1xuXHRwdWJsaWMgcmVzaXplU3RhdHVzJCA9IHRoaXMuX3Jlc2l6ZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cdHByaXZhdGUgX2xheW91dFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHt9Pih7fSk7XG5cdHB1YmxpYyBsYXlvdXRTdWJqZWN0JCA9IHRoaXMuX2xheW91dFN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cblx0cHJpdmF0ZSBzdGlja3lFbGVtZW50czogYW55ID0ge307XG5cdHByaXZhdGUgbWFuYWdlU2Nyb2xsRnVuYyA9IHRoaXMubWFuYWdlU2Nyb2xsRXZlbnQuYmluZCh0aGlzKTtcblx0cHJpdmF0ZSBtYW5hZ2VSZXNpemVGdW5jID0gdGhpcy5tYW5hZ2VSZXNpemVFdmVudC5iaW5kKHRoaXMpO1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm1hbmFnZVNjcm9sbEZ1bmMpO1xuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm1hbmFnZVJlc2l6ZUZ1bmMpO1xuXHR9XG5cblx0bmdPbkRlc3Ryb3koKXtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5tYW5hZ2VTY3JvbGxGdW5jKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5tYW5hZ2VSZXNpemVGdW5jKTtcblx0fVxuXG5cdG1hbmFnZVNjcm9sbEV2ZW50KCl7XG5cdFx0dGhpcy5fc2Nyb2xsU3ViamVjdC5uZXh0KHt9KTtcblx0fVxuXG5cdG1hbmFnZVJlc2l6ZUV2ZW50KCl7XG5cdFx0dGhpcy5fcmVzaXplU3ViamVjdC5uZXh0KHt9KTtcblx0fVxuXG5cdGF0dGFjaChpZDogc3RyaW5nKXtcblx0XHRpZiAoIWlkKXtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcInN0aWNreSBzZXJ2aWNlOjptaXNzaW5nIGlkIG9uIGF0dGFjaCFcIik7XG5cdFx0fWVsc2UgaWYgKHR5cGVvZiB0aGlzLnN0aWNreUVsZW1lbnRzW2lkXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwic3RpY2t5IHNlcnZpY2U6OmlkIGFscmVhZHkgZXhpc3RzISAoXCIraWQrXCIpXCIpO1xuXHRcdH1lbHNle1xuXHRcdFx0dGhpcy5zdGlja3lFbGVtZW50c1tpZF0gPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdGRldGFjaChpZDogc3RyaW5nKXtcblx0XHRpZiAoIWlkKXtcblx0XHRcdGNvbnNvbGUud2FybihcInN0aWNreSBzZXJ2aWNlOjptaXNzaW5nIGlkIG9uIGF0dGFjaCFcIik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0ZGVsZXRlIHRoaXMuc3RpY2t5RWxlbWVudHNbaWRdO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZShpZDogc3RyaW5nLCBoZWlnaHQ6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpe1xuXHRcdGlmICghaWQpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwic3RpY2t5IHNlcnZpY2U6Om1pc3NpbmcgaWQhXCIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuc3RpY2t5RWxlbWVudHNbaWRdO1xuXHRcdFx0aWYgKHR5cGVvZiBjdXJyZW50VmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA9PT0gbnVsbCB8fCBjdXJyZW50VmFsdWUuaGVpZ2h0ICE9PSBoZWlnaHQgfHwgY3VycmVudFZhbHVlLm9mZnNldCAhPT0gb2Zmc2V0KSB7XG5cdFx0XHRcdFx0dGhpcy5zdGlja3lFbGVtZW50c1tpZF0gPSB7aGVpZ2h0LCBvZmZzZXR9O1xuXHRcdFx0XHRcdHRoaXMuX2xheW91dFN1YmplY3QubmV4dCh0aGlzLnN0aWNreUVsZW1lbnRzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHN0aWNreSBlbGVtZW50ICcke2lkfScgKGRpZCB5b3UgYXR0YWNoIGl0IGJlZm9yZSB1cGRhdGluZz8pYCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG4iXX0=