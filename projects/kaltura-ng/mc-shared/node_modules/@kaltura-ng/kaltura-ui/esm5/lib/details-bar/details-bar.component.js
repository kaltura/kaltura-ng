import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, Input, QueryList, ContentChildren, ViewChild, HostListener } from '@angular/core';
import { DetailInfoComponent } from './detail-info.component';
var DetailsBarComponent = /** @class */ (function () {
    function DetailsBarComponent() {
        this.basicDetailsLabel = "Basic Details";
        this.moreDetailsLabel = "More Details";
        this._shouldUpdateItems = false;
        this._showMore = false;
        this._showBasic = false;
        this.lineScroll = 0;
        this.disableScroll = false;
    }
    Object.defineProperty(DetailsBarComponent.prototype, "data", {
        set: function (dataObj) {
            this._data = dataObj;
            this._shouldUpdateItems = true;
            this.reset();
        },
        enumerable: true,
        configurable: true
    });
    DetailsBarComponent.prototype.onWindowResize = function () {
        this.reset();
    };
    DetailsBarComponent.prototype.ngAfterViewChecked = function () {
        var _this = this;
        if (this._shouldUpdateItems) {
            this._shouldUpdateItems = false;
            setTimeout(function () {
                _this.items.forEach(function (item) {
                    item._setData(_this._data);
                });
            }, 0);
        }
    };
    DetailsBarComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.updateLayout();
        this._itemsChangesSubscription = this.items.changes.subscribe(function (changes) {
            _this._shouldUpdateItems = true;
        });
    };
    DetailsBarComponent.prototype._updateItems = function () {
        var _this = this;
        if (this.items) {
            this.items.forEach(function (item) { return item._setData(_this._data); });
        }
    };
    DetailsBarComponent.prototype.updateLayout = function () {
        var _this = this;
        //we use a cancelable interval to improve performances on window resize
        if (this.showMoreCheckIntervalID) {
            clearInterval(this.showMoreCheckIntervalID);
            this.showMoreCheckIntervalID = null;
        }
        this.showMoreCheckIntervalID = setTimeout(function () {
            _this.items.forEach(function (item) {
                item.isLastItem = false;
            });
            _this.items.last.isLastItem = true;
            var marginTop = parseInt(window.getComputedStyle(_this.dataWrapper.nativeElement).top);
            var elementHeight = _this.dataWrapper.nativeElement.children.length ? _this.dataWrapper.nativeElement.children[0].clientHeight : 0;
            _this._showMore = _this.dataWrapper.nativeElement.clientHeight > _this.dataPanel.nativeElement.getBoundingClientRect().height && Math.abs(marginTop) < (_this.dataWrapper.nativeElement.clientHeight + marginTop);
            _this._showBasic = _this.dataWrapper.nativeElement.clientHeight > _this.dataPanel.nativeElement.getBoundingClientRect().height && marginTop < 0;
            // code to remove last separators in each line
            var topArr = [];
            if (_this.dataWrapper.nativeElement.children.length) {
                for (var i = 0; i < _this.dataWrapper.nativeElement.children.length; i++) {
                    var elm = _this.dataWrapper.nativeElement.children[i];
                    var top_1 = elm.getBoundingClientRect().top;
                    topArr.push(top_1);
                }
                var _loop_1 = function (i) {
                    if (topArr[i] < topArr[i + 1] && _this.items.length >= i) {
                        _this.items.forEach(function (item, index) {
                            if (i === index) {
                                item.isLastItem = true;
                            }
                        });
                    }
                };
                for (var i = 0; i < topArr.length - 1; i++) {
                    _loop_1(i);
                }
            }
            _this.showMoreCheckIntervalID = null;
        }, 100);
    };
    DetailsBarComponent.prototype.show = function (direction) {
        var _this = this;
        if (!this.disableScroll) {
            this.disableScroll = true;
            if (direction === "more") {
                this.lineScroll++;
            }
            else {
                this.lineScroll--;
            }
            this.dataWrapper.nativeElement.style.top = this.dataWrapper.nativeElement.children[0].clientHeight * (-1) * this.lineScroll + "px";
            setTimeout(function () {
                _this.updateLayout(); // allow animation to finish before recalculating
                _this.disableScroll = false;
            }, 350);
        }
    };
    DetailsBarComponent.prototype.reset = function () {
        var _this = this;
        this.lineScroll = 0;
        this.dataWrapper.nativeElement.style.top = "0px";
        setTimeout(function () {
            _this.updateLayout(); // allow animation to finish before recalculating
        }, 350);
    };
    DetailsBarComponent.prototype.ngOnDestroy = function () {
        if (this._itemsChangesSubscription) {
            this._itemsChangesSubscription.unsubscribe();
            this._itemsChangesSubscription = null;
        }
    };
    __decorate([
        ContentChildren(DetailInfoComponent),
        __metadata("design:type", QueryList)
    ], DetailsBarComponent.prototype, "items", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DetailsBarComponent.prototype, "basicDetailsLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], DetailsBarComponent.prototype, "moreDetailsLabel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], DetailsBarComponent.prototype, "data", null);
    __decorate([
        ViewChild('dataPanel', { static: true }),
        __metadata("design:type", ElementRef)
    ], DetailsBarComponent.prototype, "dataPanel", void 0);
    __decorate([
        ViewChild('dataWrapper', { static: true }),
        __metadata("design:type", ElementRef)
    ], DetailsBarComponent.prototype, "dataWrapper", void 0);
    __decorate([
        HostListener("window:resize", []),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], DetailsBarComponent.prototype, "onWindowResize", null);
    DetailsBarComponent = __decorate([
        Component({
            selector: 'k-details-bar',
            template: "<div class=\"kContent kDetailsBar\" #dataPanel>\n    <i class=\"kLink kIcondropdown_arrow_bottom\" [class.disabled]=\"!_showMore\" [class.hidden]=\"!_showMore && !_showBasic\" (click)=\"show('more')\"></i>\n    <i class=\"kLink kIcondropdown_arrow_top\" [class.disabled]=\"!_showBasic\" [class.hidden]=\"!_showMore && !_showBasic\" (click)=\"show('basic')\"></i>\n    <div class=\"kItemsWrapper\" #dataWrapper>\n        <ng-content *ngIf=\"_data\" ></ng-content>\n    </div>\n</div>",
            styles: [".kDetailsBar{display:block;height:26px;line-height:26px;overflow-y:hidden;font-size:14px;color:#666}.kDetailsBar .kLink{font-size:14px;float:right;margin-left:8px;border:0;cursor:pointer;margin-top:5px}.kDetailsBar .kLink.disabled{opacity:.4;pointer-events:none}.kDetailsBar .kLink.hidden{opacity:0;pointer-events:none}.kDetailsBar .kItemsWrapper{position:relative;flex:1 1 auto;height:auto;display:flex;flex-flow:wrap;transition:top .3s}"]
        }),
        __metadata("design:paramtypes", [])
    ], DetailsBarComponent);
    return DetailsBarComponent;
}());
export { DetailsBarComponent };
//# sourceMappingURL=data:application/json;base64,