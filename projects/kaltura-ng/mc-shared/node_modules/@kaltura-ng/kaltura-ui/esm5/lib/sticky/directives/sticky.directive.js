import { __decorate, __metadata } from "tslib";
import { Directive, Input, Renderer2, ElementRef, AfterViewInit, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';
import { StickyScrollService } from '../services/sticky-scroll.service';
import { cancelOnDestroy } from '@kaltura-ng/kaltura-common';
var StickyDirective = /** @class */ (function () {
    function StickyDirective(elementRef, renderer, _stickyScrollService) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this._stickyScrollService = _stickyScrollService;
        this.lastScroll = 0;
        this.isSticky = false;
        this._destroyed = false;
        this.onStickyEvent = new EventEmitter();
        this.onUnStickyEvent = new EventEmitter();
        this.scrollOffset = 0;
        this.stickyId = "";
        this.sticksTo = "";
        this.elementSelector = "";
        this._parentTop = null;
        this._parentOffset = null;
        this._stickyTop = null;
        this._stickyOffset = null;
    }
    StickyDirective.prototype._getStickyElement = function (elementRef) {
        return elementRef.nativeElement;
    };
    StickyDirective.prototype.ngAfterViewInit = function () {
        // console.log(`[${this.stickyId}] - ngAfterViewInit`);
        this._stickyElement = this._getStickyElement(this.elementRef);
        this.update();
    };
    StickyDirective.prototype.ngOnInit = function () {
        var _this = this;
        // console.log(`[${this.stickyId}] - attached`);
        if (this.stickyId) {
            this._stickyScrollService.attach(this.stickyId);
        }
        this._stickyScrollService.scrollStatus$.pipe(cancelOnDestroy(this)).subscribe(function (event) {
            // console.log(`[${this.stickyId}] - handle scroll`);
            _this._render();
        });
        this._stickyScrollService.resizeStatus$.pipe(cancelOnDestroy(this)).subscribe(function (event) {
            _this.onResize();
        });
        this._stickyScrollService.layoutSubject$.pipe(cancelOnDestroy(this)).subscribe(function (elements) {
            var data = _this.sticksTo ? elements[_this.sticksTo] : { height: 0, offset: 0 };
            if (data && (_this._parentTop !== data.height ||
                _this._parentOffset !== data.offset)) {
                _this._parentTop = data.height;
                _this._parentOffset = data.offset;
                _this.update();
            }
        });
    };
    StickyDirective.prototype.ngOnDestroy = function () {
        // console.log(`[${this.stickyId}] - destroyed`);
        this._destroyed = true;
        this._stickyScrollService.detach(this.stickyId);
    };
    StickyDirective.prototype.update = function () {
        var _this = this;
        if (this._parentTop !== null
            && this._parentOffset != null) {
            // console.log(`[${this.stickyId}] - handle layout update`);
            var stickyOffset = this._parentOffset + this.scrollOffset;
            if (this._stickyTop !== this._parentTop ||
                this._stickyOffset !== stickyOffset) {
                // console.log(`[${this.stickyId}] - update cached values`);
                this._stickyTop = this._parentTop;
                this._stickyOffset = stickyOffset;
                this._render();
            }
            if (this.stickyId && this._stickyElement) {
                // console.log(`[${this.stickyId}] - update service`);
                var elementHeight_1 = this._stickyElement.getBoundingClientRect()['height'];
                setTimeout(function () {
                    _this._stickyScrollService.update(_this.stickyId, elementHeight_1 + _this._stickyTop, _this._stickyOffset);
                }, 0);
            }
        }
    };
    StickyDirective.prototype._render = function () {
        if (!this._destroyed && this._stickyElement) {
            // console.log(`[${this.stickyId}] - _render`);
            if (this._stickyTop !== null
                && this._stickyOffset != null) {
                var scroll_1 = window.pageYOffset;
                if (scroll_1 > this.lastScroll && !this.isSticky && this._stickyElement.getBoundingClientRect()['top'] <= this._stickyTop) {
                    // console.log(`[${this.stickyId}] - _render (set sticky mode)`);
                    this.setSticky();
                }
                else if (scroll_1 < this.lastScroll && this.isSticky && scroll_1 <= this._stickyOffset) {
                    // console.log(`[${this.stickyId}] - _render (unset sticky mode)`);
                    this.unsetSticky();
                }
                else {
                    if (this.isSticky && scroll_1 === this.lastScroll) {
                        this.setStyle('top', this._stickyTop + 'px');
                        // console.log(`[${this.stickyId}] - _render (update sitcky values) - TODO!!!!!!`);
                    }
                }
                this.lastScroll = scroll_1;
            }
        }
    };
    StickyDirective.prototype.setSticky = function () {
        if (!this.isSticky) {
            this.isSticky = true;
            // console.log(`[${this.stickyId}] - top = ${this._stickyElement.clientTop}`);
            this.originalCss = {
                position: this._stickyElement.style.position,
                top: this._stickyElement.clientTop,
                marginTop: this._stickyElement.style.marginTop,
                left: this._stickyElement.clientLeft
            };
            this.setStyle('position', 'fixed');
            this.setStyle('top', this._stickyTop + 'px');
            if (this.appendTo) {
                this.setStyle('left', this.appendTo.getBoundingClientRect()['left'] + 'px');
            }
            this.setClass(true);
            this.onStickyEvent.emit();
            this._onSticky();
        }
    };
    StickyDirective.prototype._onSticky = function () {
        var _this = this;
        setTimeout(function () { _this.update(); }, 0);
    };
    StickyDirective.prototype.unsetSticky = function () {
        if (this.isSticky) {
            this.isSticky = false;
            this.setStyle('position', this.originalCss.position);
            this.setStyle('marginTop', this.originalCss.marginTop);
            this.setStyle('top', this.originalCss.top + 'px');
            if (this.appendTo) {
                this.setStyle('left', this.originalCss.left + 'px');
            }
            this.setClass(false);
            this.onUnStickyEvent.emit();
            this._onUnsetSticky();
        }
    };
    StickyDirective.prototype._onUnsetSticky = function () {
        var _this = this;
        setTimeout(function () { _this.update(); }, 0);
    };
    StickyDirective.prototype.onResize = function () { };
    ; // used by primeng directive to update table layout
    StickyDirective.prototype.setStyle = function (key, value) {
        this.renderer.setStyle(this._stickyElement, key, value);
    };
    StickyDirective.prototype.setClass = function (add) {
        if (add) {
            this.renderer.addClass(this._stickyElement, this.stickyClass);
        }
        else {
            this.renderer.removeClass(this._stickyElement, this.stickyClass);
        }
    };
    StickyDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: StickyScrollService }
    ]; };
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StickyDirective.prototype, "onStickyEvent", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], StickyDirective.prototype, "onUnStickyEvent", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StickyDirective.prototype, "stickyClass", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Number)
    ], StickyDirective.prototype, "scrollOffset", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], StickyDirective.prototype, "appendTo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StickyDirective.prototype, "stickyId", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StickyDirective.prototype, "sticksTo", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], StickyDirective.prototype, "elementSelector", void 0);
    StickyDirective = __decorate([
        Directive({
            selector: '[kSticky]'
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2, StickyScrollService])
    ], StickyDirective);
    return StickyDirective;
}());
export { StickyDirective };
//# sourceMappingURL=data:application/json;base64,