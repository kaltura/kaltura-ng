import { __decorate, __metadata } from "tslib";
import { Directive, ElementRef, Renderer2, Input, AfterViewInit } from '@angular/core';
var AutofocusDirective = /** @class */ (function () {
    function AutofocusDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this._autofocus = true;
    }
    AutofocusDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this._autofocus) {
            setTimeout(function () {
                _this.renderer.selectRootElement(_this.el.nativeElement).focus();
            });
        }
    };
    Object.defineProperty(AutofocusDirective.prototype, "inputAutofocus", {
        set: function (allowed) {
            this._autofocus = allowed;
        },
        enumerable: true,
        configurable: true
    });
    AutofocusDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], AutofocusDirective.prototype, "inputAutofocus", null);
    AutofocusDirective = __decorate([
        Directive({
            selector: '[kAutofocus]'
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer2])
    ], AutofocusDirective);
    return AutofocusDirective;
}());
export { AutofocusDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtYXV0b2ZvY3VzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbHR1cmEtbmcva2FsdHVyYS11aS8iLCJzb3VyY2VzIjpbImxpYi9pbnB1dC1hdXRvZm9jdXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBS3ZGO0lBR0UsNEJBQW9CLEVBQWMsRUFBVSxRQUFtQjtRQUEzQyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUZ2RCxlQUFVLEdBQUcsSUFBSSxDQUFDO0lBRzFCLENBQUM7SUFFRCw0Q0FBZSxHQUFmO1FBQUEsaUJBTUM7UUFMQyxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsVUFBVSxDQUFDO2dCQUNULEtBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqRSxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUdELHNCQUFJLDhDQUFjO2FBQWxCLFVBQW1CLE9BQWdCO1lBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO1FBQzVCLENBQUM7OztPQUFBOztnQkFkdUIsVUFBVTtnQkFBb0IsU0FBUzs7SUFZL0Q7UUFEQyxLQUFLLEVBQUU7Ozs0REFHUDtJQWpCVSxrQkFBa0I7UUFIOUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLGNBQWM7U0FDekIsQ0FBQzt5Q0FJd0IsVUFBVSxFQUFvQixTQUFTO09BSHBELGtCQUFrQixDQWtCOUI7SUFBRCx5QkFBQztDQUFBLEFBbEJELElBa0JDO1NBbEJZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdba0F1dG9mb2N1c10nXG59KVxuZXhwb3J0IGNsYXNzIEF1dG9mb2N1c0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBwcml2YXRlIF9hdXRvZm9jdXMgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLl9hdXRvZm9jdXMpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnNlbGVjdFJvb3RFbGVtZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCkuZm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCBpbnB1dEF1dG9mb2N1cyhhbGxvd2VkOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYXV0b2ZvY3VzID0gYWxsb3dlZDtcbiAgfVxufVxuIl19