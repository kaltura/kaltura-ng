import { __read, __spread } from "tslib";
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/forkJoin';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/map';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { EmptyLogger } from '@kaltura-ng/kaltura-common';
import { cancelOnDestroy } from '@kaltura-ng/kaltura-common';
export var OnDataSavingReasons;
(function (OnDataSavingReasons) {
    OnDataSavingReasons[OnDataSavingReasons["attachedWidgetBusy"] = 0] = "attachedWidgetBusy";
    OnDataSavingReasons[OnDataSavingReasons["validationErrors"] = 1] = "validationErrors";
    OnDataSavingReasons[OnDataSavingReasons["buildRequestFailure"] = 2] = "buildRequestFailure";
})(OnDataSavingReasons || (OnDataSavingReasons = {}));
var WidgetsManagerBase = /** @class */ (function () {
    function WidgetsManagerBase(logger) {
        this._widgets = [];
        this._widgetsState = new BehaviorSubject({});
        this._isNewData = false;
        this.widgetsState$ = this._widgetsState.asObservable();
        this._logger = logger ? logger.subLogger("widgetsManager") : new EmptyLogger();
    }
    Object.defineProperty(WidgetsManagerBase.prototype, "widgetsState", {
        get: function () {
            return this._widgetsState.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WidgetsManagerBase.prototype, "isNewData", {
        get: function () {
            return this._isNewData;
        },
        enumerable: true,
        configurable: true
    });
    WidgetsManagerBase.prototype._updateWidgetState = function (newWidgetState) {
        var currentWidgetsState = this._widgetsState.getValue();
        if (!newWidgetState || !newWidgetState.key) {
            this._logger.warn('[widgets manager] cannot update widget state, missing widget key');
        }
        else {
            this._logger.info("[widgets manager] widget '" + newWidgetState.key + "': update widget state", newWidgetState);
            currentWidgetsState[newWidgetState.key] = newWidgetState;
            this._widgetsState.next(currentWidgetsState);
        }
    };
    WidgetsManagerBase.prototype.registerWidgets = function (widgets) {
        var _this = this;
        if (widgets) {
            widgets.forEach(function (widget) {
                var existingRegisteredWidget = _this._widgets.find(function (registeredWidget) { return registeredWidget === widget || registeredWidget.key === widget.key; });
                if (existingRegisteredWidget) {
                    throw new Error("a widget with key '" + widget.key + "' is already registered (did you registered the same widget twice?)");
                }
                else {
                    _this._logger.info("[widgets manager] widget '" + widget.key + "': registered to a form widgets manager");
                    widget._setForm(_this);
                    _this._widgets.push(widget);
                }
            });
        }
    };
    WidgetsManagerBase.prototype.notifyDataLoading = function (dataId) {
        this._logger.info("[widgets manager] notify data loading. data identifier '" + dataId + "'");
        this._widgets.filter(function (widget) { return widget.isActive; }).forEach(function (widget) {
            widget._reset();
        });
        this._widgets.forEach(function (widget) {
            widget._handleDataLoading(dataId);
        });
    };
    WidgetsManagerBase.prototype.notifyDataLoaded = function (data, settings) {
        this._logger.info("[widgets manager] notify data loaded.");
        var errors = [];
        this._isNewData = settings.isNewData;
        this._logger.info("[widgets manager] treat data as '" + (this._isNewData ? 'new' : 'existing') + " data'.");
        this._widgets.forEach(function (widget) {
            try {
                widget._handleDataLoaded(data);
                widget.activate();
            }
            catch (e) {
                errors.push(e);
            }
        });
        return { errors: errors };
    };
    WidgetsManagerBase.prototype._widgetsOnDataSaving = function (newData, request, originalData) {
        var _this = this;
        var errors = [];
        var widgets = this._isNewData ? this._widgets : this._widgets.filter(function (widget) { return widget.isActive; });
        widgets.forEach(function (widget) {
            try {
                _this._logger.info("[widgets manager] widget '" + widget.key + "': build save request content");
                widget._handleDataSaving(newData, request, originalData);
            }
            catch (err) {
                _this._logger.error("[widgets manager] widget '" + widget.key + "': failed to prepare data for save. Save operation aborted.", err); // keep error
                errors.push(err);
            }
        });
        return { errors: errors };
    };
    WidgetsManagerBase.prototype.notifyDataSaving = function (newData, request, originalData) {
        var _this = this;
        this._logger.info("[widgets manager] notify data saving.");
        var isAttachedWidgetBusy = !!this._widgets.find(function (widget) { return widget.isAttached && widget.isBusy; });
        return Observable.of(isAttachedWidgetBusy ?
            {
                ready: false,
                reason: OnDataSavingReasons.attachedWidgetBusy
            } : { ready: true })
            .pipe(cancelOnDestroy(this))
            .flatMap(function (response) {
            if (response.ready) {
                return _this._validateWidgets()
                    .catch(function (error, caught) { return Observable.of({ isValid: false }); })
                    .map(function (response) { return response.isValid ? { ready: true } : {
                    ready: false,
                    reason: OnDataSavingReasons.validationErrors
                }; });
            }
            else {
                return Observable.of(response);
            }
        })
            .map(function (response) {
            if (response.ready) {
                var saveContent = _this._widgetsOnDataSaving(newData, request, originalData);
                if (saveContent.errors.length === 0) {
                    return { ready: true, reason: null };
                }
                else {
                    return {
                        ready: false,
                        reason: OnDataSavingReasons.buildRequestFailure,
                        errors: saveContent.errors
                    };
                }
            }
            else {
                return response;
            }
        });
    };
    WidgetsManagerBase.prototype._validateWidgets = function () {
        var _this = this;
        var widgets = this._isNewData ? this._widgets : this._widgets.filter(function (widget) { return widget.isActive; });
        var widgetsResults = widgets.map(function (widget) {
            return widget._validate()
                .pipe(cancelOnDestroy(_this))
                .catch(function (err, caught) { return Observable.of({ isValid: false }); });
        });
        if (widgetsResults.length) {
            return Observable.forkJoin.apply(Observable, __spread(widgetsResults)).map(function (responses) {
                return responses.find(function (response) { return !response.isValid; }) || { isValid: true };
            });
        }
        else {
            return Observable.of({ isValid: true });
        }
    };
    WidgetsManagerBase.prototype.ngOnDestroy = function () {
        this._widgets.forEach(function (widget) {
            widget.destory();
        });
        this._logger.warn('[widgets manager] form widgets manager ngOnDestroy');
        this._widgetsState.complete();
    };
    return WidgetsManagerBase;
}());
export { WidgetsManagerBase };
//# sourceMappingURL=data:application/json;base64,