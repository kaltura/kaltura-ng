import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
/*
 * Convert bytes into largest possible unit.
 * Takes an precision argument that defaults to 2.
 * Usage:
 *   bytes | fileSize:precision
 * Example:
 *   {{ 1024 |  fileSize}}
 *   formats to: 1 KB
 */
var FileSizePipe = /** @class */ (function () {
    function FileSizePipe() {
        this.units = [
            'bytes',
            'KB',
            'MB',
            'GB',
            'TB',
            'PB'
        ];
    }
    FileSizePipe.prototype.transform = function (bytes, precision) {
        if (bytes === void 0) { bytes = 0; }
        if (precision === void 0) { precision = 2; }
        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes))
            return 'N/A';
        var unit = 0;
        while (bytes >= 1024) {
            bytes /= 1024;
            unit++;
        }
        return bytes.toFixed(+precision) + ' ' + this.units[unit];
    };
    FileSizePipe = __decorate([
        Pipe({ name: 'kFileSize' })
    ], FileSizePipe);
    return FileSizePipe;
}());
export { FileSizePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zaXplLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Aa2FsdHVyYS1uZy9rYWx0dXJhLXVpLyIsInNvdXJjZXMiOlsibGliL2ZpbGUtc2l6ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRDs7Ozs7Ozs7R0FRRztBQUVIO0lBQUE7UUFFWSxVQUFLLEdBQUc7WUFDWixPQUFPO1lBQ1AsSUFBSTtZQUNKLElBQUk7WUFDSixJQUFJO1lBQ0osSUFBSTtZQUNKLElBQUk7U0FDUCxDQUFDO0lBY04sQ0FBQztJQVpHLGdDQUFTLEdBQVQsVUFBVSxLQUFpQixFQUFFLFNBQXFCO1FBQXhDLHNCQUFBLEVBQUEsU0FBaUI7UUFBRSwwQkFBQSxFQUFBLGFBQXFCO1FBQzlDLElBQUssS0FBSyxDQUFFLFVBQVUsQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUUsQ0FBQyxJQUFJLENBQUUsUUFBUSxDQUFFLEtBQUssQ0FBRTtZQUFHLE9BQU8sS0FBSyxDQUFDO1FBRS9FLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztRQUViLE9BQVEsS0FBSyxJQUFJLElBQUksRUFBRztZQUNwQixLQUFLLElBQUksSUFBSSxDQUFDO1lBQ2QsSUFBSSxFQUFHLENBQUM7U0FDWDtRQUVELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBRSxDQUFFLFNBQVMsQ0FBRSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBRSxDQUFDO0lBQ25FLENBQUM7SUF0QlEsWUFBWTtRQUR4QixJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFDLENBQUM7T0FDYixZQUFZLENBdUJ4QjtJQUFELG1CQUFDO0NBQUEsQUF2QkQsSUF1QkM7U0F2QlksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLypcbiAqIENvbnZlcnQgYnl0ZXMgaW50byBsYXJnZXN0IHBvc3NpYmxlIHVuaXQuXG4gKiBUYWtlcyBhbiBwcmVjaXNpb24gYXJndW1lbnQgdGhhdCBkZWZhdWx0cyB0byAyLlxuICogVXNhZ2U6XG4gKiAgIGJ5dGVzIHwgZmlsZVNpemU6cHJlY2lzaW9uXG4gKiBFeGFtcGxlOlxuICogICB7eyAxMDI0IHwgIGZpbGVTaXplfX1cbiAqICAgZm9ybWF0cyB0bzogMSBLQlxuICovXG5AUGlwZSh7bmFtZTogJ2tGaWxlU2l6ZSd9KVxuZXhwb3J0IGNsYXNzIEZpbGVTaXplUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gICAgcHJpdmF0ZSB1bml0cyA9IFtcbiAgICAgICAgJ2J5dGVzJyxcbiAgICAgICAgJ0tCJyxcbiAgICAgICAgJ01CJyxcbiAgICAgICAgJ0dCJyxcbiAgICAgICAgJ1RCJyxcbiAgICAgICAgJ1BCJ1xuICAgIF07XG5cbiAgICB0cmFuc2Zvcm0oYnl0ZXM6IG51bWJlciA9IDAsIHByZWNpc2lvbjogbnVtYmVyID0gMiApIDogc3RyaW5nIHtcbiAgICAgICAgaWYgKCBpc05hTiggcGFyc2VGbG9hdCggU3RyaW5nKGJ5dGVzKSApKSB8fCAhIGlzRmluaXRlKCBieXRlcyApICkgcmV0dXJuICdOL0EnO1xuXG4gICAgICAgIGxldCB1bml0ID0gMDtcblxuICAgICAgICB3aGlsZSAoIGJ5dGVzID49IDEwMjQgKSB7XG4gICAgICAgICAgICBieXRlcyAvPSAxMDI0O1xuICAgICAgICAgICAgdW5pdCArKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBieXRlcy50b0ZpeGVkKCArIHByZWNpc2lvbiApICsgJyAnICsgdGhpcy51bml0c1sgdW5pdCBdO1xuICAgIH1cbn0iXX0=