import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/forkJoin';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/map';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { EmptyLogger } from '@kaltura-ng/kaltura-common';
import { cancelOnDestroy } from '@kaltura-ng/kaltura-common';
export var OnDataSavingReasons;
(function (OnDataSavingReasons) {
    OnDataSavingReasons[OnDataSavingReasons["attachedWidgetBusy"] = 0] = "attachedWidgetBusy";
    OnDataSavingReasons[OnDataSavingReasons["validationErrors"] = 1] = "validationErrors";
    OnDataSavingReasons[OnDataSavingReasons["buildRequestFailure"] = 2] = "buildRequestFailure";
})(OnDataSavingReasons || (OnDataSavingReasons = {}));
export class WidgetsManagerBase {
    constructor(logger) {
        this._widgets = [];
        this._widgetsState = new BehaviorSubject({});
        this._isNewData = false;
        this.widgetsState$ = this._widgetsState.asObservable();
        this._logger = logger ? logger.subLogger(`widgetsManager`) : new EmptyLogger();
    }
    get widgetsState() {
        return this._widgetsState.getValue();
    }
    get isNewData() {
        return this._isNewData;
    }
    _updateWidgetState(newWidgetState) {
        const currentWidgetsState = this._widgetsState.getValue();
        if (!newWidgetState || !newWidgetState.key) {
            this._logger.warn('[widgets manager] cannot update widget state, missing widget key');
        }
        else {
            this._logger.info(`[widgets manager] widget '${newWidgetState.key}': update widget state`, newWidgetState);
            currentWidgetsState[newWidgetState.key] = newWidgetState;
            this._widgetsState.next(currentWidgetsState);
        }
    }
    registerWidgets(widgets) {
        if (widgets) {
            widgets.forEach(widget => {
                const existingRegisteredWidget = this._widgets.find(registeredWidget => registeredWidget === widget || registeredWidget.key === widget.key);
                if (existingRegisteredWidget) {
                    throw new Error(`a widget with key '${widget.key}' is already registered (did you registered the same widget twice?)`);
                }
                else {
                    this._logger.info(`[widgets manager] widget '${widget.key}': registered to a form widgets manager`);
                    widget._setForm(this);
                    this._widgets.push(widget);
                }
            });
        }
    }
    notifyDataLoading(dataId) {
        this._logger.info(`[widgets manager] notify data loading. data identifier '${dataId}'`);
        this._widgets.filter(widget => widget.isActive).forEach(widget => {
            widget._reset();
        });
        this._widgets.forEach(widget => {
            widget._handleDataLoading(dataId);
        });
    }
    notifyDataLoaded(data, settings) {
        this._logger.info(`[widgets manager] notify data loaded.`);
        const errors = [];
        this._isNewData = settings.isNewData;
        this._logger.info(`[widgets manager] treat data as '${this._isNewData ? 'new' : 'existing'} data'.`);
        this._widgets.forEach(widget => {
            try {
                widget._handleDataLoaded(data);
                widget.activate();
            }
            catch (e) {
                errors.push(e);
            }
        });
        return { errors };
    }
    _widgetsOnDataSaving(newData, request, originalData) {
        const errors = [];
        const widgets = this._isNewData ? this._widgets : this._widgets.filter(widget => widget.isActive);
        widgets.forEach(widget => {
            try {
                this._logger.info(`[widgets manager] widget '${widget.key}': build save request content`);
                widget._handleDataSaving(newData, request, originalData);
            }
            catch (err) {
                this._logger.error(`[widgets manager] widget '${widget.key}': failed to prepare data for save. Save operation aborted.`, err); // keep error
                errors.push(err);
            }
        });
        return { errors };
    }
    notifyDataSaving(newData, request, originalData) {
        this._logger.info(`[widgets manager] notify data saving.`);
        const isAttachedWidgetBusy = !!this._widgets.find(widget => widget.isAttached && widget.isBusy);
        return Observable.of(isAttachedWidgetBusy ?
            {
                ready: false,
                reason: OnDataSavingReasons.attachedWidgetBusy
            } : { ready: true })
            .pipe(cancelOnDestroy(this))
            .flatMap(response => {
            if (response.ready) {
                return this._validateWidgets()
                    .catch((error, caught) => Observable.of({ isValid: false }))
                    .map(response => response.isValid ? { ready: true } : {
                    ready: false,
                    reason: OnDataSavingReasons.validationErrors
                });
            }
            else {
                return Observable.of(response);
            }
        })
            .map(response => {
            if (response.ready) {
                const saveContent = this._widgetsOnDataSaving(newData, request, originalData);
                if (saveContent.errors.length === 0) {
                    return { ready: true, reason: null };
                }
                else {
                    return {
                        ready: false,
                        reason: OnDataSavingReasons.buildRequestFailure,
                        errors: saveContent.errors
                    };
                }
            }
            else {
                return response;
            }
        });
    }
    _validateWidgets() {
        const widgets = this._isNewData ? this._widgets : this._widgets.filter(widget => widget.isActive);
        const widgetsResults = widgets.map(widget => {
            return widget._validate()
                .pipe(cancelOnDestroy(this))
                .catch((err, caught) => Observable.of({ isValid: false }));
        });
        if (widgetsResults.length) {
            return Observable.forkJoin(...widgetsResults).map(responses => {
                return responses.find(response => !response.isValid) || { isValid: true };
            });
        }
        else {
            return Observable.of({ isValid: true });
        }
    }
    ngOnDestroy() {
        this._widgets.forEach(widget => {
            widget.destory();
        });
        this._logger.warn('[widgets manager] form widgets manager ngOnDestroy');
        this._widgetsState.complete();
    }
}
//# sourceMappingURL=data:application/json;base64,