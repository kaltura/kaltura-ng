import { __decorate } from "tslib";
import { Pipe } from '@angular/core';
/*
 * Convert bytes into largest possible unit.
 * Takes an precision argument that defaults to 2.
 * Usage:
 *   bytes | fileSize:precision
 * Example:
 *   {{ 1024 |  fileSize}}
 *   formats to: 1 KB
 */
let FileSizePipe = class FileSizePipe {
    constructor() {
        this.units = [
            'bytes',
            'KB',
            'MB',
            'GB',
            'TB',
            'PB'
        ];
    }
    transform(bytes = 0, precision = 2) {
        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes))
            return 'N/A';
        let unit = 0;
        while (bytes >= 1024) {
            bytes /= 1024;
            unit++;
        }
        return bytes.toFixed(+precision) + ' ' + this.units[unit];
    }
};
FileSizePipe = __decorate([
    Pipe({ name: 'kFileSize' })
], FileSizePipe);
export { FileSizePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1zaXplLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Aa2FsdHVyYS1uZy9rYWx0dXJhLXVpLyIsInNvdXJjZXMiOlsibGliL2ZpbGUtc2l6ZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRDs7Ozs7Ozs7R0FRRztBQUVILElBQWEsWUFBWSxHQUF6QixNQUFhLFlBQVk7SUFBekI7UUFFWSxVQUFLLEdBQUc7WUFDWixPQUFPO1lBQ1AsSUFBSTtZQUNKLElBQUk7WUFDSixJQUFJO1lBQ0osSUFBSTtZQUNKLElBQUk7U0FDUCxDQUFDO0lBY04sQ0FBQztJQVpHLFNBQVMsQ0FBQyxRQUFnQixDQUFDLEVBQUUsWUFBb0IsQ0FBQztRQUM5QyxJQUFLLEtBQUssQ0FBRSxVQUFVLENBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFFLENBQUMsSUFBSSxDQUFFLFFBQVEsQ0FBRSxLQUFLLENBQUU7WUFBRyxPQUFPLEtBQUssQ0FBQztRQUUvRSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7UUFFYixPQUFRLEtBQUssSUFBSSxJQUFJLEVBQUc7WUFDcEIsS0FBSyxJQUFJLElBQUksQ0FBQztZQUNkLElBQUksRUFBRyxDQUFDO1NBQ1g7UUFFRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUUsQ0FBRSxTQUFTLENBQUUsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUUsQ0FBQztJQUNuRSxDQUFDO0NBQ0osQ0FBQTtBQXZCWSxZQUFZO0lBRHhCLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMsQ0FBQztHQUNiLFlBQVksQ0F1QnhCO1NBdkJZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qXG4gKiBDb252ZXJ0IGJ5dGVzIGludG8gbGFyZ2VzdCBwb3NzaWJsZSB1bml0LlxuICogVGFrZXMgYW4gcHJlY2lzaW9uIGFyZ3VtZW50IHRoYXQgZGVmYXVsdHMgdG8gMi5cbiAqIFVzYWdlOlxuICogICBieXRlcyB8IGZpbGVTaXplOnByZWNpc2lvblxuICogRXhhbXBsZTpcbiAqICAge3sgMTAyNCB8ICBmaWxlU2l6ZX19XG4gKiAgIGZvcm1hdHMgdG86IDEgS0JcbiAqL1xuQFBpcGUoe25hbWU6ICdrRmlsZVNpemUnfSlcbmV4cG9ydCBjbGFzcyBGaWxlU2l6ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAgIHByaXZhdGUgdW5pdHMgPSBbXG4gICAgICAgICdieXRlcycsXG4gICAgICAgICdLQicsXG4gICAgICAgICdNQicsXG4gICAgICAgICdHQicsXG4gICAgICAgICdUQicsXG4gICAgICAgICdQQidcbiAgICBdO1xuXG4gICAgdHJhbnNmb3JtKGJ5dGVzOiBudW1iZXIgPSAwLCBwcmVjaXNpb246IG51bWJlciA9IDIgKSA6IHN0cmluZyB7XG4gICAgICAgIGlmICggaXNOYU4oIHBhcnNlRmxvYXQoIFN0cmluZyhieXRlcykgKSkgfHwgISBpc0Zpbml0ZSggYnl0ZXMgKSApIHJldHVybiAnTi9BJztcblxuICAgICAgICBsZXQgdW5pdCA9IDA7XG5cbiAgICAgICAgd2hpbGUgKCBieXRlcyA+PSAxMDI0ICkge1xuICAgICAgICAgICAgYnl0ZXMgLz0gMTAyNDtcbiAgICAgICAgICAgIHVuaXQgKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYnl0ZXMudG9GaXhlZCggKyBwcmVjaXNpb24gKSArICcgJyArIHRoaXMudW5pdHNbIHVuaXQgXTtcbiAgICB9XG59Il19