import { __decorate, __metadata } from "tslib";
import { Component, ElementRef, Input, AfterViewInit, OnDestroy, ViewChild, Renderer2 } from '@angular/core';
import { StickyScrollService } from '../services/sticky-scroll.service';
import { StickyDirective } from '../directives/sticky.directive';
import { cancelOnDestroy } from '@kaltura-ng/kaltura-common';
let StickyComponent = class StickyComponent {
    constructor(_stickyScrollService, _renderer) {
        this._stickyScrollService = _stickyScrollService;
        this._renderer = _renderer;
        this.wrapperHeight = 0;
        this.scrollOffset = 0;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            this._updateLayout();
        }, 0);
        this._stickyScrollService.resizeStatus$.pipe(cancelOnDestroy(this)).subscribe(event => {
            this._updateDimensions();
        });
    }
    _updateLayout() {
        if (this.content.nativeElement.children.length > 0) {
            this.wrapperHeight = this.content.nativeElement.children[0].clientHeight;
        }
        else {
            console.warn("Sticky component::could not access content.");
        }
    }
    updateLayout(manual = true) {
        setTimeout(() => {
            this._updateLayout();
            this._sticky.update();
        }, 0);
    }
    _updateDimensions() {
        this._renderer.setStyle(this.stickyDiv.nativeElement, 'width', `${this.content.nativeElement.offsetWidth}px`);
    }
    ngOnDestroy() {
    }
};
StickyComponent.ctorParameters = () => [
    { type: StickyScrollService },
    { type: Renderer2 }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], StickyComponent.prototype, "scrollOffset", void 0);
__decorate([
    Input('stickyClass'),
    __metadata("design:type", String)
], StickyComponent.prototype, "stickyClass", void 0);
__decorate([
    Input('container'),
    __metadata("design:type", Object)
], StickyComponent.prototype, "container", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], StickyComponent.prototype, "stickyId", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], StickyComponent.prototype, "sticksTo", void 0);
__decorate([
    ViewChild('contentWrapper', { static: true }),
    __metadata("design:type", ElementRef)
], StickyComponent.prototype, "content", void 0);
__decorate([
    ViewChild('stickyDiv', { static: true }),
    __metadata("design:type", ElementRef)
], StickyComponent.prototype, "stickyDiv", void 0);
__decorate([
    ViewChild(StickyDirective, { static: true }),
    __metadata("design:type", StickyDirective)
], StickyComponent.prototype, "_sticky", void 0);
StickyComponent = __decorate([
    Component({
        selector: 'kSticky',
        template: "<div class=\"kStickyWrapper\" [style.height]=\"wrapperHeight + 'px'\" #contentWrapper>\n    <div #stickyDiv class=\"kSticky\" kSticky [scrollOffset]=\"scrollOffset\" [sticksTo]=\"sticksTo\" [stickyClass]=\"stickyClass\" [stickyId]=\"stickyId\" (onStickyEvent)=\"_updateDimensions()\" (onUnStickyEvent)=\"_updateDimensions()\">\n        <ng-content></ng-content>\n    </div>\n</div>\n",
        styles: [".kStickyWrapper{display:block}.kStickyWrapper .kSticky{z-index:501}"]
    }),
    __metadata("design:paramtypes", [StickyScrollService, Renderer2])
], StickyComponent);
export { StickyComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RpY2t5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYWx0dXJhLW5nL2thbHR1cmEtdWkvIiwic291cmNlcyI6WyJsaWIvc3RpY2t5L2NvbXBvbmVudHMvc3RpY2t5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDakUsT0FBTyxFQUFFLGVBQWUsRUFBTyxNQUFNLDRCQUE0QixDQUFDO0FBT2xFLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFnQjNCLFlBQW9CLG9CQUF5QyxFQUFVLFNBQW9CO1FBQXZFLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBcUI7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBZHBGLGtCQUFhLEdBQVUsQ0FBQyxDQUFDO1FBRXZCLGlCQUFZLEdBQUcsQ0FBQyxDQUFDO0lBWW9FLENBQUM7SUFFL0YsZUFBZTtRQUNkLFVBQVUsQ0FBQyxHQUFFLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ0wsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUM1RSxLQUFLLENBQUMsRUFBRTtZQUNQLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FDRCxDQUFDO0lBQ0gsQ0FBQztJQUVPLGFBQWE7UUFDcEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuRCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7U0FDekU7YUFBTTtZQUNOLE9BQU8sQ0FBQyxJQUFJLENBQUMsNkNBQTZDLENBQUMsQ0FBQztTQUM1RDtJQUNGLENBQUM7SUFFTSxZQUFZLENBQUMsU0FBa0IsSUFBSTtRQUN6QyxVQUFVLENBQUMsR0FBRSxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdkIsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUVNLGlCQUFpQjtRQUNyQixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDO0lBQ2pILENBQUM7SUFFRCxXQUFXO0lBRVgsQ0FBQztDQUVELENBQUE7O1lBcEMwQyxtQkFBbUI7WUFBcUIsU0FBUzs7QUFabEY7SUFBUixLQUFLLEVBQUU7O3FEQUFrQjtBQUNKO0lBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7O29EQUFxQjtBQUV0QjtJQUFuQixLQUFLLENBQUMsV0FBVyxDQUFDOztrREFBZ0I7QUFFMUI7SUFBUixLQUFLLEVBQUU7O2lEQUFrQjtBQUNqQjtJQUFSLEtBQUssRUFBRTs7aURBQWtCO0FBRXFCO0lBQTlDLFNBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQzs4QkFBVSxVQUFVO2dEQUFDO0FBQ3pCO0lBQXpDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7OEJBQVksVUFBVTtrREFBQztBQUNsQjtJQUE3QyxTQUFTLENBQUMsZUFBZSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDOzhCQUFVLGVBQWU7Z0RBQUM7QUFkM0QsZUFBZTtJQUwzQixTQUFTLENBQUM7UUFDVixRQUFRLEVBQUUsU0FBUztRQUNuQiwyWUFBc0M7O0tBRXRDLENBQUM7cUNBaUJ5QyxtQkFBbUIsRUFBcUIsU0FBUztHQWhCL0UsZUFBZSxDQW9EM0I7U0FwRFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgVmlld0NoaWxkLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0aWNreVNjcm9sbFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9zdGlja3ktc2Nyb2xsLnNlcnZpY2UnO1xuaW1wb3J0IHsgU3RpY2t5RGlyZWN0aXZlIH0gZnJvbSAnLi4vZGlyZWN0aXZlcy9zdGlja3kuZGlyZWN0aXZlJztcbmltcG9ydCB7IGNhbmNlbE9uRGVzdHJveSwgdGFnIH0gZnJvbSAnQGthbHR1cmEtbmcva2FsdHVyYS1jb21tb24nO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdrU3RpY2t5Jyxcblx0dGVtcGxhdGVVcmw6ICcuL3N0aWNreS5jb21wb25lbnQuaHRtbCcsXG5cdHN0eWxlVXJsczogWycuL3N0aWNreS5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIFN0aWNreUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cblx0cHVibGljIHdyYXBwZXJIZWlnaHQ6bnVtYmVyID0gMDtcblxuXHRASW5wdXQoKSBzY3JvbGxPZmZzZXQgPSAwO1xuXHRASW5wdXQoJ3N0aWNreUNsYXNzJykgc3RpY2t5Q2xhc3M6IHN0cmluZztcblxuXHRASW5wdXQoJ2NvbnRhaW5lcicpIGNvbnRhaW5lcjogYW55O1xuXG5cdEBJbnB1dCgpIHN0aWNreUlkOiBzdHJpbmc7XG5cdEBJbnB1dCgpIHN0aWNrc1RvOiBzdHJpbmc7XG5cblx0QFZpZXdDaGlsZCgnY29udGVudFdyYXBwZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBjb250ZW50OiBFbGVtZW50UmVmO1xuXHRAVmlld0NoaWxkKCdzdGlja3lEaXYnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzdGlja3lEaXY6IEVsZW1lbnRSZWY7XG5cdEBWaWV3Q2hpbGQoU3RpY2t5RGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KSBfc3RpY2t5OiBTdGlja3lEaXJlY3RpdmU7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSBfc3RpY2t5U2Nyb2xsU2VydmljZTogU3RpY2t5U2Nyb2xsU2VydmljZSwgcHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuXHRuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG5cdFx0c2V0VGltZW91dCgoKT0+e1xuXHRcdFx0dGhpcy5fdXBkYXRlTGF5b3V0KCk7XG5cdFx0fSwwKTtcblx0XHR0aGlzLl9zdGlja3lTY3JvbGxTZXJ2aWNlLnJlc2l6ZVN0YXR1cyQucGlwZShjYW5jZWxPbkRlc3Ryb3kodGhpcykpLnN1YnNjcmliZShcblx0XHRcdGV2ZW50ID0+IHtcblx0XHRcdFx0dGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH1cblxuXHRwcml2YXRlIF91cGRhdGVMYXlvdXQoKSB7XG5cdFx0aWYgKHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcblx0XHRcdHRoaXMud3JhcHBlckhlaWdodCA9IHRoaXMuY29udGVudC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLmNsaWVudEhlaWdodDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFwiU3RpY2t5IGNvbXBvbmVudDo6Y291bGQgbm90IGFjY2VzcyBjb250ZW50LlwiKTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgdXBkYXRlTGF5b3V0KG1hbnVhbDogYm9vbGVhbiA9IHRydWUpe1xuXHRcdHNldFRpbWVvdXQoKCk9Pntcblx0XHRcdHRoaXMuX3VwZGF0ZUxheW91dCgpO1xuXHRcdFx0dGhpcy5fc3RpY2t5LnVwZGF0ZSgpO1xuXHRcdH0sMCk7XG5cdH1cblxuXHRwdWJsaWMgX3VwZGF0ZURpbWVuc2lvbnMoKXtcbiAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnN0aWNreURpdi5uYXRpdmVFbGVtZW50LCAnd2lkdGgnLCBgJHt0aGlzLmNvbnRlbnQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aH1weGApO1xuXHR9XG5cblx0bmdPbkRlc3Ryb3koKXtcblxuXHR9XG5cbn1cblxuIl19