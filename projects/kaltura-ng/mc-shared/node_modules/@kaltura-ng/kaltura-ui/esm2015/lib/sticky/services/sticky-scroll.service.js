import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
let StickyScrollService = class StickyScrollService {
    constructor() {
        this._scrollSubject = new Subject();
        this.scrollStatus$ = this._scrollSubject.asObservable();
        this._resizeSubject = new Subject();
        this.resizeStatus$ = this._resizeSubject.asObservable();
        this._layoutSubject = new BehaviorSubject({});
        this.layoutSubject$ = this._layoutSubject.asObservable();
        this.stickyElements = {};
        this.manageScrollFunc = this.manageScrollEvent.bind(this);
        this.manageResizeFunc = this.manageResizeEvent.bind(this);
        window.addEventListener('scroll', this.manageScrollFunc);
        window.addEventListener('resize', this.manageResizeFunc);
    }
    ngOnDestroy() {
        window.removeEventListener('scroll', this.manageScrollFunc);
        window.removeEventListener('resize', this.manageResizeFunc);
    }
    manageScrollEvent() {
        this._scrollSubject.next({});
    }
    manageResizeEvent() {
        this._resizeSubject.next({});
    }
    attach(id) {
        if (!id) {
            throw new Error("sticky service::missing id on attach!");
        }
        else if (typeof this.stickyElements[id] !== "undefined") {
            throw new Error("sticky service::id already exists! (" + id + ")");
        }
        else {
            this.stickyElements[id] = null;
        }
    }
    detach(id) {
        if (!id) {
            console.warn("sticky service::missing id on attach!");
        }
        else {
            delete this.stickyElements[id];
        }
    }
    update(id, height, offset) {
        if (!id) {
            console.warn("sticky service::missing id!");
        }
        else {
            const currentValue = this.stickyElements[id];
            if (typeof currentValue !== "undefined") {
                if (currentValue === null || currentValue.height !== height || currentValue.offset !== offset) {
                    this.stickyElements[id] = { height, offset };
                    this._layoutSubject.next(this.stickyElements);
                }
            }
            else {
                throw new Error(`unknown sticky element '${id}' (did you attach it before updating?)`);
            }
        }
    }
};
StickyScrollService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], StickyScrollService);
export { StickyScrollService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RpY2t5LXNjcm9sbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbHR1cmEtbmcva2FsdHVyYS11aS8iLCJzb3VyY2VzIjpbImxpYi9zdGlja3kvc2VydmljZXMvc3RpY2t5LXNjcm9sbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ3RELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBSXZELElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW1CO0lBYS9CO1FBWFEsbUJBQWMsR0FBRyxJQUFJLE9BQU8sRUFBTSxDQUFDO1FBQ3BDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNsRCxtQkFBYyxHQUFHLElBQUksT0FBTyxFQUFNLENBQUM7UUFDcEMsa0JBQWEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2xELG1CQUFjLEdBQUcsSUFBSSxlQUFlLENBQUssRUFBRSxDQUFDLENBQUM7UUFDOUMsbUJBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRW5ELG1CQUFjLEdBQVEsRUFBRSxDQUFDO1FBQ3pCLHFCQUFnQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckQscUJBQWdCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUk1RCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELFdBQVc7UUFDVixNQUFNLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELGlCQUFpQjtRQUNoQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQsaUJBQWlCO1FBQ2hCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVTtRQUNoQixJQUFJLENBQUMsRUFBRSxFQUFDO1lBQ1AsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQ3pEO2FBQUssSUFBSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEtBQUssV0FBVyxFQUFFO1lBQ3pELE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLEdBQUMsRUFBRSxHQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQy9EO2FBQUk7WUFDSixJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztTQUMvQjtJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsRUFBVTtRQUNoQixJQUFJLENBQUMsRUFBRSxFQUFDO1lBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQ3REO2FBQUs7WUFDTCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDL0I7SUFDRixDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxNQUFjLEVBQUUsTUFBYztRQUNoRCxJQUFJLENBQUMsRUFBRSxFQUFDO1lBQ1AsT0FBTyxDQUFDLElBQUksQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1NBQzVDO2FBQUs7WUFDTCxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdDLElBQUksT0FBTyxZQUFZLEtBQUssV0FBVyxFQUFFO2dCQUN4QyxJQUFJLFlBQVksS0FBSyxJQUFJLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxNQUFNLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxNQUFNLEVBQUU7b0JBQzlGLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLENBQUM7b0JBQzNDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztpQkFDOUM7YUFDRDtpQkFBTTtnQkFDTixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixFQUFFLHdDQUF3QyxDQUFDLENBQUM7YUFDdkY7U0FDRDtJQUNGLENBQUM7Q0FDRCxDQUFBO0FBakVZLG1CQUFtQjtJQUQvQixVQUFVLEVBQUU7O0dBQ0EsbUJBQW1CLENBaUUvQjtTQWpFWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcy9CZWhhdmlvclN1YmplY3QnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdGlja3lTY3JvbGxTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95XG57XG5cdHByaXZhdGUgX3Njcm9sbFN1YmplY3QgPSBuZXcgU3ViamVjdDx7fT4oKTtcblx0cHVibGljIHNjcm9sbFN0YXR1cyQgPSB0aGlzLl9zY3JvbGxTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXHRwcml2YXRlIF9yZXNpemVTdWJqZWN0ID0gbmV3IFN1YmplY3Q8e30+KCk7XG5cdHB1YmxpYyByZXNpemVTdGF0dXMkID0gdGhpcy5fcmVzaXplU3ViamVjdC5hc09ic2VydmFibGUoKTtcblx0cHJpdmF0ZSBfbGF5b3V0U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8e30+KHt9KTtcblx0cHVibGljIGxheW91dFN1YmplY3QkID0gdGhpcy5fbGF5b3V0U3ViamVjdC5hc09ic2VydmFibGUoKTtcblxuXHRwcml2YXRlIHN0aWNreUVsZW1lbnRzOiBhbnkgPSB7fTtcblx0cHJpdmF0ZSBtYW5hZ2VTY3JvbGxGdW5jID0gdGhpcy5tYW5hZ2VTY3JvbGxFdmVudC5iaW5kKHRoaXMpO1xuXHRwcml2YXRlIG1hbmFnZVJlc2l6ZUZ1bmMgPSB0aGlzLm1hbmFnZVJlc2l6ZUV2ZW50LmJpbmQodGhpcyk7XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMubWFuYWdlU2Nyb2xsRnVuYyk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMubWFuYWdlUmVzaXplRnVuYyk7XG5cdH1cblxuXHRuZ09uRGVzdHJveSgpe1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLm1hbmFnZVNjcm9sbEZ1bmMpO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLm1hbmFnZVJlc2l6ZUZ1bmMpO1xuXHR9XG5cblx0bWFuYWdlU2Nyb2xsRXZlbnQoKXtcblx0XHR0aGlzLl9zY3JvbGxTdWJqZWN0Lm5leHQoe30pO1xuXHR9XG5cblx0bWFuYWdlUmVzaXplRXZlbnQoKXtcblx0XHR0aGlzLl9yZXNpemVTdWJqZWN0Lm5leHQoe30pO1xuXHR9XG5cblx0YXR0YWNoKGlkOiBzdHJpbmcpe1xuXHRcdGlmICghaWQpe1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwic3RpY2t5IHNlcnZpY2U6Om1pc3NpbmcgaWQgb24gYXR0YWNoIVwiKTtcblx0XHR9ZWxzZSBpZiAodHlwZW9mIHRoaXMuc3RpY2t5RWxlbWVudHNbaWRdICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJzdGlja3kgc2VydmljZTo6aWQgYWxyZWFkeSBleGlzdHMhIChcIitpZCtcIilcIik7XG5cdFx0fWVsc2V7XG5cdFx0XHR0aGlzLnN0aWNreUVsZW1lbnRzW2lkXSA9IG51bGw7XG5cdFx0fVxuXHR9XG5cblx0ZGV0YWNoKGlkOiBzdHJpbmcpe1xuXHRcdGlmICghaWQpe1xuXHRcdFx0Y29uc29sZS53YXJuKFwic3RpY2t5IHNlcnZpY2U6Om1pc3NpbmcgaWQgb24gYXR0YWNoIVwiKTtcblx0XHR9ZWxzZSB7XG5cdFx0XHRkZWxldGUgdGhpcy5zdGlja3lFbGVtZW50c1tpZF07XG5cdFx0fVxuXHR9XG5cblx0dXBkYXRlKGlkOiBzdHJpbmcsIGhlaWdodDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcil7XG5cdFx0aWYgKCFpZCl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJzdGlja3kgc2VydmljZTo6bWlzc2luZyBpZCFcIik7XG5cdFx0fWVsc2Uge1xuXHRcdFx0Y29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5zdGlja3lFbGVtZW50c1tpZF07XG5cdFx0XHRpZiAodHlwZW9mIGN1cnJlbnRWYWx1ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09PSBudWxsIHx8IGN1cnJlbnRWYWx1ZS5oZWlnaHQgIT09IGhlaWdodCB8fCBjdXJyZW50VmFsdWUub2Zmc2V0ICE9PSBvZmZzZXQpIHtcblx0XHRcdFx0XHR0aGlzLnN0aWNreUVsZW1lbnRzW2lkXSA9IHtoZWlnaHQsIG9mZnNldH07XG5cdFx0XHRcdFx0dGhpcy5fbGF5b3V0U3ViamVjdC5uZXh0KHRoaXMuc3RpY2t5RWxlbWVudHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYHVua25vd24gc3RpY2t5IGVsZW1lbnQgJyR7aWR9JyAoZGlkIHlvdSBhdHRhY2ggaXQgYmVmb3JlIHVwZGF0aW5nPylgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbiJdfQ==