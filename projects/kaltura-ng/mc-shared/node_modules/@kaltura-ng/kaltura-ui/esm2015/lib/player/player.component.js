import { __decorate, __metadata } from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
let KalturaPlayerComponent = class KalturaPlayerComponent {
    constructor() {
        this.width = 480;
        this.height = 360;
        this.cdnUrl = 'http://cdnapi.kaltura.com';
        this.flashvars = {};
        this.lazy = false;
        this.id = "";
        this.kalturaPlayerReady = new EventEmitter();
    }
    ngAfterViewInit() {
        if (!this.lazy) {
            this.Embed();
        }
    }
    Embed() {
        // validation
        if (!this.pid || !this.uiconfid || !this.entryid) {
            console.warn("Kaltura Player::Missing parameters. Please provide pid, uiconfid and entryid.");
        }
        else {
            // load player lib if doesn't exist
            if (document.getElementById("kalturaPlayerLib") === null) {
                let s = document.createElement('script');
                s.src = `${this.cdnUrl}/p/${this.pid}/sp/${this.pid}00/embedIframeJs/uiconf_id/${this.uiconfid}/partner_id/${this.pid}`;
                s.id = "kalturaPlayerLib";
                s.async = false;
                document.head.appendChild(s);
            }
            // wait for lib to load if not loaded and then embed player
            if (!this.kdp) {
                const intervalID = setInterval(() => {
                    if (typeof window['kWidget'] !== "undefined") {
                        clearInterval(intervalID);
                        this.doEmbed();
                    }
                }, 50);
            }
            else {
                this.doEmbed();
            }
        }
    }
    doEmbed() {
        window['kWidget'].embed({
            "targetId": "kaltura_player_" + this.id,
            "wid": "_" + this.pid,
            "uiconf_id": this.uiconfid,
            "flashvars": this.flashvars,
            "cache_st": Math.random(),
            "entry_id": this.entryid,
            "readyCallback": (playerID) => {
                this.kdp = document.getElementById(playerID);
                this.kalturaPlayerReady.emit(this.kdp);
            }
        });
    }
    ngOnDestroy() {
        if (this.kdp) {
            window['kWidget'].destroy(this.kdp);
        }
    }
};
__decorate([
    Input(),
    __metadata("design:type", Number)
], KalturaPlayerComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], KalturaPlayerComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], KalturaPlayerComponent.prototype, "pid", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], KalturaPlayerComponent.prototype, "uiconfid", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], KalturaPlayerComponent.prototype, "entryid", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], KalturaPlayerComponent.prototype, "cdnUrl", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], KalturaPlayerComponent.prototype, "flashvars", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], KalturaPlayerComponent.prototype, "lazy", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], KalturaPlayerComponent.prototype, "id", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], KalturaPlayerComponent.prototype, "kalturaPlayerReady", void 0);
KalturaPlayerComponent = __decorate([
    Component({
        selector: 'k-player',
        template: "<div id=\"kaltura_player_{{id}}\" [style.width]=\"width+'px'\" [style.height]=\"height+'px'\" class=\"kPlayer\"></div>",
        styles: [".kPlayer{background-color:#000}"]
    }),
    __metadata("design:paramtypes", [])
], KalturaPlayerComponent);
export { KalturaPlayerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxheWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYWx0dXJhLW5nL2thbHR1cmEtdWkvIiwic291cmNlcyI6WyJsaWIvcGxheWVyL3BsYXllci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBb0MsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBT3pHLElBQWEsc0JBQXNCLEdBQW5DLE1BQWEsc0JBQXNCO0lBa0NsQztRQS9CQSxVQUFLLEdBQVksR0FBRyxDQUFDO1FBR3JCLFdBQU0sR0FBWSxHQUFHLENBQUM7UUFZdEIsV0FBTSxHQUFZLDJCQUEyQixDQUFDO1FBRzlDLGNBQVMsR0FBUyxFQUFFLENBQUM7UUFHckIsU0FBSSxHQUFZLEtBQUssQ0FBQztRQUd0QixPQUFFLEdBQVksRUFBRSxDQUFDO1FBR2pCLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFJOUIsQ0FBQztJQUVoQixlQUFlO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUM7WUFDZCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDYjtJQUNGLENBQUM7SUFFTSxLQUFLO1FBQ1gsYUFBYTtRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUM7WUFDaEQsT0FBTyxDQUFDLElBQUksQ0FBQywrRUFBK0UsQ0FBQyxDQUFDO1NBQzlGO2FBQUs7WUFDTCxtQ0FBbUM7WUFDbkMsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLEtBQUssSUFBSSxFQUFFO2dCQUN6RCxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUN6QyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sTUFBTSxJQUFJLENBQUMsR0FBRyxPQUFPLElBQUksQ0FBQyxHQUFHLDhCQUE4QixJQUFJLENBQUMsUUFBUSxlQUFlLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDeEgsQ0FBQyxDQUFDLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQztnQkFDMUIsQ0FBQyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzdCO1lBQ0QsMkRBQTJEO1lBQzNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDO2dCQUNiLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUU7b0JBQ25DLElBQUksT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssV0FBVyxFQUFDO3dCQUM1QyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQzFCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztxQkFDZjtnQkFDRixDQUFDLEVBQUMsRUFBRSxDQUFDLENBQUM7YUFDTjtpQkFBSTtnQkFDSixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDZjtTQUNEO0lBQ0YsQ0FBQztJQUVPLE9BQU87UUFDZCxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3ZCLFVBQVUsRUFBRSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRTtZQUN2QyxLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHO1lBQ3JCLFdBQVcsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUMxQixXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDM0IsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDekIsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3hCLGVBQWUsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUM3QixJQUFJLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzdDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3hDLENBQUM7U0FDRCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBQztZQUNaLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0YsQ0FBQztDQUVELENBQUE7QUF2RkE7SUFEQyxLQUFLLEVBQUU7O3FEQUNhO0FBR3JCO0lBREMsS0FBSyxFQUFFOztzREFDYztBQUd0QjtJQURDLEtBQUssRUFBRTs7bURBQ0s7QUFHYjtJQURDLEtBQUssRUFBRTs7d0RBQ1U7QUFHbEI7SUFEQyxLQUFLLEVBQUU7O3VEQUNTO0FBR2pCO0lBREMsS0FBSyxFQUFFOztzREFDc0M7QUFHOUM7SUFEQyxLQUFLLEVBQUU7O3lEQUNhO0FBR3JCO0lBREMsS0FBSyxFQUFFOztvREFDYztBQUd0QjtJQURDLEtBQUssRUFBRTs7a0RBQ1M7QUFHakI7SUFEQyxNQUFNLEVBQUU7O2tFQUNvQztBQTlCakMsc0JBQXNCO0lBTGxDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLGtJQUFzQzs7S0FFekMsQ0FBQzs7R0FDVyxzQkFBc0IsQ0EwRmxDO1NBMUZZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgT25Jbml0LCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2stcGxheWVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGxheWVyLmNvbXBvbmVudC5odG1sJyxcblx0c3R5bGVVcmxzOiBbJy4vcGxheWVyLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgS2FsdHVyYVBsYXllckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cblx0QElucHV0KClcblx0d2lkdGggOiBudW1iZXIgPSA0ODA7XG5cblx0QElucHV0KClcblx0aGVpZ2h0IDogbnVtYmVyID0gMzYwO1xuXG5cdEBJbnB1dCgpXG5cdHBpZCA6IG51bWJlcjtcblxuXHRASW5wdXQoKVxuXHR1aWNvbmZpZCA6IG51bWJlcjtcblxuXHRASW5wdXQoKVxuXHRlbnRyeWlkIDogc3RyaW5nO1xuXG5cdEBJbnB1dCgpXG5cdGNkblVybCA6IHN0cmluZyA9ICdodHRwOi8vY2RuYXBpLmthbHR1cmEuY29tJztcblxuXHRASW5wdXQoKVxuXHRmbGFzaHZhcnMgOiBhbnkgPSB7fTtcblxuXHRASW5wdXQoKVxuXHRsYXp5OiBib29sZWFuID0gZmFsc2U7XG5cblx0QElucHV0KClcblx0aWQgOiBzdHJpbmcgPSBcIlwiO1xuXG5cdEBPdXRwdXQoKVxuXHRrYWx0dXJhUGxheWVyUmVhZHkgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuXHRwcml2YXRlIGtkcDogYW55O1xuXG5cdGNvbnN0cnVjdG9yKCkge31cblxuXHRuZ0FmdGVyVmlld0luaXQoKXtcblx0XHRpZiAoIXRoaXMubGF6eSl7XG5cdFx0XHR0aGlzLkVtYmVkKCk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIEVtYmVkKCk6dm9pZHtcblx0XHQvLyB2YWxpZGF0aW9uXG5cdFx0aWYgKCF0aGlzLnBpZCB8fCAhdGhpcy51aWNvbmZpZCB8fCAhdGhpcy5lbnRyeWlkKXtcblx0XHRcdGNvbnNvbGUud2FybihcIkthbHR1cmEgUGxheWVyOjpNaXNzaW5nIHBhcmFtZXRlcnMuIFBsZWFzZSBwcm92aWRlIHBpZCwgdWljb25maWQgYW5kIGVudHJ5aWQuXCIpO1xuXHRcdH1lbHNlIHtcblx0XHRcdC8vIGxvYWQgcGxheWVyIGxpYiBpZiBkb2Vzbid0IGV4aXN0XG5cdFx0XHRpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrYWx0dXJhUGxheWVyTGliXCIpID09PSBudWxsKSB7XG5cdFx0XHRcdGxldCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdFx0XHRcdHMuc3JjID0gYCR7dGhpcy5jZG5Vcmx9L3AvJHt0aGlzLnBpZH0vc3AvJHt0aGlzLnBpZH0wMC9lbWJlZElmcmFtZUpzL3VpY29uZl9pZC8ke3RoaXMudWljb25maWR9L3BhcnRuZXJfaWQvJHt0aGlzLnBpZH1gO1xuXHRcdFx0XHRzLmlkID0gXCJrYWx0dXJhUGxheWVyTGliXCI7XG5cdFx0XHRcdHMuYXN5bmMgPSBmYWxzZTtcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzKTtcblx0XHRcdH1cblx0XHRcdC8vIHdhaXQgZm9yIGxpYiB0byBsb2FkIGlmIG5vdCBsb2FkZWQgYW5kIHRoZW4gZW1iZWQgcGxheWVyXG5cdFx0XHRpZiAoIXRoaXMua2RwKXtcblx0XHRcdFx0Y29uc3QgaW50ZXJ2YWxJRCA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHdpbmRvd1sna1dpZGdldCddICE9PSBcInVuZGVmaW5lZFwiKXtcblx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJRCk7XG5cdFx0XHRcdFx0XHR0aGlzLmRvRW1iZWQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sNTApO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdHRoaXMuZG9FbWJlZCgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgZG9FbWJlZCgpOnZvaWR7XG5cdFx0d2luZG93WydrV2lkZ2V0J10uZW1iZWQoe1xuXHRcdFx0XCJ0YXJnZXRJZFwiOiBcImthbHR1cmFfcGxheWVyX1wiICsgdGhpcy5pZCxcblx0XHRcdFwid2lkXCI6IFwiX1wiICsgdGhpcy5waWQsXG5cdFx0XHRcInVpY29uZl9pZFwiOiB0aGlzLnVpY29uZmlkLFxuXHRcdFx0XCJmbGFzaHZhcnNcIjogdGhpcy5mbGFzaHZhcnMsXG5cdFx0XHRcImNhY2hlX3N0XCI6IE1hdGgucmFuZG9tKCksXG5cdFx0XHRcImVudHJ5X2lkXCI6IHRoaXMuZW50cnlpZCxcblx0XHRcdFwicmVhZHlDYWxsYmFja1wiOiAocGxheWVySUQpID0+IHtcblx0XHRcdFx0dGhpcy5rZHAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChwbGF5ZXJJRCk7XG5cdFx0XHRcdHRoaXMua2FsdHVyYVBsYXllclJlYWR5LmVtaXQodGhpcy5rZHApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0bmdPbkRlc3Ryb3koKXtcblx0XHRpZiAodGhpcy5rZHApe1xuXHRcdFx0d2luZG93WydrV2lkZ2V0J10uZGVzdHJveSh0aGlzLmtkcCk7XG5cdFx0fVxuXHR9XG5cbn1cblxuIl19