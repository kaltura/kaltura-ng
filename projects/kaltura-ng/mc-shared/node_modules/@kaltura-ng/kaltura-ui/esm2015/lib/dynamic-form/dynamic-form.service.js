import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';
import { DynamicSectionControl } from './controls/dynamic-section-control';
let DynamicFormService = class DynamicFormService {
    constructor(_formBuilder) {
        this._formBuilder = _formBuilder;
    }
    toFormGroup(dynamicControls, config = {}) {
        let result = {};
        if (dynamicControls) {
            dynamicControls.forEach(formControl => {
                if (!config.ignoreMultiple && formControl.allowMultiple) {
                    const formArray = result[formControl.key] = this._formBuilder.array([]);
                    if (config && config.formValue) {
                        // build array formGroup item for each actual record in array
                        const arrayItems = config.formValue[formControl.key];
                        if (arrayItems instanceof Array) {
                            arrayItems.forEach(arrayItem => {
                                formArray.push(this.toFormGroup([formControl], {
                                    ignoreMultiple: true,
                                    formValue: arrayItem
                                }));
                            });
                        }
                    }
                }
                else {
                    if (formControl instanceof DynamicSectionControl) {
                        const shouldCreateNestedGroup = dynamicControls.length > 1;
                        if (shouldCreateNestedGroup) {
                            result[formControl.key] = this.toFormGroup(formControl.children, { formValue: config.formValue });
                        }
                        else {
                            result = this.toFormGroup(formControl.children, { formValue: config.formValue });
                        }
                    }
                    else {
                        result[formControl.key] = new FormControl(formControl.defaultValue || null, { validators: formControl.validators, updateOn: formControl.validateOn ? formControl.validateOn : 'change' });
                    }
                }
            });
        }
        return (result instanceof FormGroup) ? result : this._formBuilder.group(result);
    }
};
DynamicFormService.ctorParameters = () => [
    { type: FormBuilder }
];
DynamicFormService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [FormBuilder])
], DynamicFormService);
export { DynamicFormService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Aa2FsdHVyYS1uZy9rYWx0dXJhLXVpLyIsInNvdXJjZXMiOlsibGliL2R5bmFtaWMtZm9ybS9keW5hbWljLWZvcm0uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFRLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUcsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFJM0UsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUFDM0IsWUFBb0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBSSxDQUFDO0lBR25ELFdBQVcsQ0FBQyxlQUE4QyxFQUFFLFNBQTBELEVBQUU7UUFDcEgsSUFBSSxNQUFNLEdBQVEsRUFBRSxDQUFDO1FBRXJCLElBQUksZUFBZSxFQUFFO1lBQ2pCLGVBQWUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBRWxDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxJQUFJLFdBQVcsQ0FBQyxhQUFhLEVBQUU7b0JBQ3JELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBRXhFLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7d0JBQzVCLDZEQUE2RDt3QkFDN0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBRXJELElBQUksVUFBVSxZQUFZLEtBQUssRUFBRTs0QkFDN0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtnQ0FDM0IsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUU7b0NBQzNDLGNBQWMsRUFBRSxJQUFJO29DQUNwQixTQUFTLEVBQUUsU0FBUztpQ0FDdkIsQ0FBQyxDQUFDLENBQUM7NEJBQ1IsQ0FBQyxDQUFDLENBQUM7eUJBQ047cUJBQ0o7aUJBQ0o7cUJBQU07b0JBQ0gsSUFBSSxXQUFXLFlBQVkscUJBQXFCLEVBQUU7d0JBQzlDLE1BQU0sdUJBQXVCLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7d0JBQzNELElBQUksdUJBQXVCLEVBQUU7NEJBQ3pCLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO3lCQUNuRzs2QkFBSzs0QkFDRixNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEVBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO3lCQUNsRjtxQkFDSjt5QkFBTTt3QkFDSCxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLFdBQVcsQ0FBQyxZQUFZLElBQUksSUFBSSxFQUFFLEVBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBQyxDQUFFLENBQUM7cUJBQzVMO2lCQUNKO1lBRUwsQ0FBQyxDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sQ0FBQyxNQUFNLFlBQVksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEYsQ0FBQztDQUNKLENBQUE7O1lBM0NzQyxXQUFXOztBQURyQyxrQkFBa0I7SUFEOUIsVUFBVSxFQUFFO3FDQUUwQixXQUFXO0dBRHJDLGtCQUFrQixDQTRDOUI7U0E1Q1ksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9ICAgZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzLCAgRm9ybUJ1aWxkZXIgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xCYXNlIH0gZnJvbSAnLi9keW5hbWljLWZvcm0tY29udHJvbC1iYXNlJztcbmltcG9ydCB7IER5bmFtaWNTZWN0aW9uQ29udHJvbCB9IGZyb20gJy4vY29udHJvbHMvZHluYW1pYy1zZWN0aW9uLWNvbnRyb2wnO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybVNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2Zvcm1CdWlsZGVyIDogRm9ybUJ1aWxkZXIpIHsgfVxuXG5cbiAgICB0b0Zvcm1Hcm91cChkeW5hbWljQ29udHJvbHM6IER5bmFtaWNGb3JtQ29udHJvbEJhc2U8YW55PltdLCBjb25maWcgOiB7IGlnbm9yZU11bHRpcGxlPyA6IGJvb2xlYW4sIGZvcm1WYWx1ZT8gOiB7fSB9ID0ge30gKSA6IEZvcm1Hcm91cCB7XG4gICAgICAgIGxldCByZXN1bHQ6IGFueSA9IHt9O1xuXG4gICAgICAgIGlmIChkeW5hbWljQ29udHJvbHMpIHtcbiAgICAgICAgICAgIGR5bmFtaWNDb250cm9scy5mb3JFYWNoKGZvcm1Db250cm9sID0+IHtcblxuICAgICAgICAgICAgICAgIGlmICghY29uZmlnLmlnbm9yZU11bHRpcGxlICYmIGZvcm1Db250cm9sLmFsbG93TXVsdGlwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybUFycmF5ID0gcmVzdWx0W2Zvcm1Db250cm9sLmtleV0gPSB0aGlzLl9mb3JtQnVpbGRlci5hcnJheShbXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuZm9ybVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBidWlsZCBhcnJheSBmb3JtR3JvdXAgaXRlbSBmb3IgZWFjaCBhY3R1YWwgcmVjb3JkIGluIGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcnJheUl0ZW1zID0gY29uZmlnLmZvcm1WYWx1ZVtmb3JtQ29udHJvbC5rZXldO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyYXlJdGVtcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyYXlJdGVtcy5mb3JFYWNoKGFycmF5SXRlbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1BcnJheS5wdXNoKHRoaXMudG9Gb3JtR3JvdXAoW2Zvcm1Db250cm9sXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlTXVsdGlwbGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtVmFsdWU6IGFycmF5SXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUNvbnRyb2wgaW5zdGFuY2VvZiBEeW5hbWljU2VjdGlvbkNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNob3VsZENyZWF0ZU5lc3RlZEdyb3VwID0gZHluYW1pY0NvbnRyb2xzLmxlbmd0aCA+IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkQ3JlYXRlTmVzdGVkR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbZm9ybUNvbnRyb2wua2V5XSA9IHRoaXMudG9Gb3JtR3JvdXAoZm9ybUNvbnRyb2wuY2hpbGRyZW4sIHtmb3JtVmFsdWU6IGNvbmZpZy5mb3JtVmFsdWV9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnRvRm9ybUdyb3VwKGZvcm1Db250cm9sLmNoaWxkcmVuLCB7Zm9ybVZhbHVlOiBjb25maWcuZm9ybVZhbHVlfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbZm9ybUNvbnRyb2wua2V5XSA9IG5ldyBGb3JtQ29udHJvbChmb3JtQ29udHJvbC5kZWZhdWx0VmFsdWUgfHwgbnVsbCwge3ZhbGlkYXRvcnM6IGZvcm1Db250cm9sLnZhbGlkYXRvcnMsIHVwZGF0ZU9uOiBmb3JtQ29udHJvbC52YWxpZGF0ZU9uID8gZm9ybUNvbnRyb2wudmFsaWRhdGVPbiA6ICdjaGFuZ2UnfSApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAocmVzdWx0IGluc3RhbmNlb2YgRm9ybUdyb3VwKSA/IHJlc3VsdCA6IHRoaXMuX2Zvcm1CdWlsZGVyLmdyb3VwKHJlc3VsdCk7XG4gICAgfVxufVxuIl19