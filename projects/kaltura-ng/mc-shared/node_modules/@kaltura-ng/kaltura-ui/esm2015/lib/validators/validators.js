// accepts http/https/ftp
export const urlRegex = new RegExp("(ftp|https?):\\/\\/(www\\.)?[-a-zA-Z0-9^@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9^@:%_\\+.~#?&//=]*)", "i");
// accepts http/https
export const urlHttpRegex = new RegExp("(https?):\\/\\/(www\\.)?[-a-zA-Z0-9^@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9^@:%_\\+.~#?&//=]*)", "i");
export const ipRegex = new RegExp("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", "i");
/**
 * Provides a set of validators used by form controls.
 *
 * A validator is a function that processes a {@link FormControl} or collection of
 * controls and returns a map of errors. A null map means that validation has passed.
 *
 * ### Example
 *
 * ```typescript
 * var loginControl = new FormControl("", [Validators.ip, Validators.required])
 * ```
 *
 */
export class KalturaValidators {
    /**
     * Validator that requires controls to have a value represented as IP (value not required).
     */
    static ip(control) {
        if (!control.value || !control.value.length)
            return null;
        return ipRegex.test(control.value) ? null : { 'ip': true };
    }
    /**
     * Validator that requires controls to have a value represented as URL (value not required).
     */
    static url(control) {
        if (!control.value || !control.value.length)
            return null;
        return urlRegex.test(control.value) ? null : { 'url': true };
    }
    /**
     * Validator that requires controls to have a value represented as URL (value not required).
     */
    static urlHttp(control) {
        if (!control.value || !control.value.length)
            return null;
        return urlHttpRegex.test(control.value) ? null : { 'url': true };
    }
    /**
     * Url validation
     */
    static isUrlValid(url) {
        return urlRegex.test(url);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BrYWx0dXJhLW5nL2thbHR1cmEtdWkvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy92YWxpZGF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLHlCQUF5QjtBQUN6QixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxNQUFNLENBQUMsNEdBQTRHLEVBQUMsR0FBRyxDQUFDLENBQUM7QUFFckoscUJBQXFCO0FBQ3JCLE1BQU0sQ0FBRSxNQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyx3R0FBd0csRUFBQyxHQUFHLENBQUMsQ0FBQztBQUN0SixNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsMkdBQTJHLEVBQUMsR0FBRyxDQUFDLENBQUM7QUFDbko7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUUxQjs7T0FFRztJQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsT0FBd0I7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUN6RCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBd0I7UUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUN6RCxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO0lBQy9ELENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBd0I7UUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxPQUFPLElBQUksQ0FBQztRQUN6RCxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBQyxDQUFDO0lBQ25FLENBQUM7SUFHRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUN6QixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnN9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG4vLyBhY2NlcHRzIGh0dHAvaHR0cHMvZnRwXG5leHBvcnQgY29uc3QgdXJsUmVnZXggPSBuZXcgUmVnRXhwKFwiKGZ0cHxodHRwcz8pOlxcXFwvXFxcXC8od3d3XFxcXC4pP1stYS16QS1aMC05XkA6JS5fXFxcXCt+Iz1dezIsMjU2fVxcXFwuW2Etel17Miw2fVxcXFxiKFstYS16QS1aMC05XkA6JV9cXFxcKy5+Iz8mLy89XSopXCIsXCJpXCIpO1xuXG4vLyBhY2NlcHRzIGh0dHAvaHR0cHNcbmV4cG9ydCAgY29uc3QgdXJsSHR0cFJlZ2V4ID0gbmV3IFJlZ0V4cChcIihodHRwcz8pOlxcXFwvXFxcXC8od3d3XFxcXC4pP1stYS16QS1aMC05XkA6JS5fXFxcXCt+Iz1dezIsMjU2fVxcXFwuW2Etel17Miw2fVxcXFxiKFstYS16QS1aMC05XkA6JV9cXFxcKy5+Iz8mLy89XSopXCIsXCJpXCIpO1xuZXhwb3J0IGNvbnN0IGlwUmVnZXggPSBuZXcgUmVnRXhwKFwiXigoWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSlcXC4pezN9KFswLTldfFsxLTldWzAtOV18MVswLTldezJ9fDJbMC00XVswLTldfDI1WzAtNV0pJFwiLFwiaVwiKTtcbi8qKlxuICogUHJvdmlkZXMgYSBzZXQgb2YgdmFsaWRhdG9ycyB1c2VkIGJ5IGZvcm0gY29udHJvbHMuXG4gKlxuICogQSB2YWxpZGF0b3IgaXMgYSBmdW5jdGlvbiB0aGF0IHByb2Nlc3NlcyBhIHtAbGluayBGb3JtQ29udHJvbH0gb3IgY29sbGVjdGlvbiBvZlxuICogY29udHJvbHMgYW5kIHJldHVybnMgYSBtYXAgb2YgZXJyb3JzLiBBIG51bGwgbWFwIG1lYW5zIHRoYXQgdmFsaWRhdGlvbiBoYXMgcGFzc2VkLlxuICpcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogdmFyIGxvZ2luQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbChcIlwiLCBbVmFsaWRhdG9ycy5pcCwgVmFsaWRhdG9ycy5yZXF1aXJlZF0pXG4gKiBgYGBcbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBLYWx0dXJhVmFsaWRhdG9ycyB7XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgcmVwcmVzZW50ZWQgYXMgSVAgKHZhbHVlIG5vdCByZXF1aXJlZCkuXG4gICAgICovXG4gICAgc3RhdGljIGlwKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnN8bnVsbCB7XG4gICAgICAgIGlmICghY29udHJvbC52YWx1ZSB8fCAhY29udHJvbC52YWx1ZS5sZW5ndGgpIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gaXBSZWdleC50ZXN0KGNvbnRyb2wudmFsdWUpID8gbnVsbCA6IHsnaXAnOiB0cnVlfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0b3IgdGhhdCByZXF1aXJlcyBjb250cm9scyB0byBoYXZlIGEgdmFsdWUgcmVwcmVzZW50ZWQgYXMgVVJMICh2YWx1ZSBub3QgcmVxdWlyZWQpLlxuICAgICAqL1xuICAgIHN0YXRpYyB1cmwoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9yc3xudWxsIHtcbiAgICAgICAgaWYgKCFjb250cm9sLnZhbHVlIHx8ICFjb250cm9sLnZhbHVlLmxlbmd0aCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiB1cmxSZWdleC50ZXN0KGNvbnRyb2wudmFsdWUpID8gbnVsbCA6IHsndXJsJzogdHJ1ZX07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIHZhbHVlIHJlcHJlc2VudGVkIGFzIFVSTCAodmFsdWUgbm90IHJlcXVpcmVkKS5cbiAgICAgKi9cbiAgICBzdGF0aWMgdXJsSHR0cChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzfG51bGwge1xuICAgICAgICBpZiAoIWNvbnRyb2wudmFsdWUgfHwgIWNvbnRyb2wudmFsdWUubGVuZ3RoKSByZXR1cm4gbnVsbDtcbiAgICAgICAgcmV0dXJuIHVybEh0dHBSZWdleC50ZXN0KGNvbnRyb2wudmFsdWUpID8gbnVsbCA6IHsndXJsJzogdHJ1ZX07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBVcmwgdmFsaWRhdGlvblxuICAgICAqL1xuICAgIHN0YXRpYyBpc1VybFZhbGlkKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB1cmxSZWdleC50ZXN0KHVybCk7XG4gICAgfVxuXG59XG4iXX0=