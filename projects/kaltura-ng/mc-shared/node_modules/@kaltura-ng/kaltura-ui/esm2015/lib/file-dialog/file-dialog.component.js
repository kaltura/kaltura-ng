import { __decorate, __metadata } from "tslib";
import { Output, EventEmitter, Component, ElementRef, Input, OnInit, HostListener } from '@angular/core';
let FileDialogComponent = class FileDialogComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.filter = "";
        this.allowMultiple = false;
        this.onFileSelected = new EventEmitter();
    }
    open(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.elementRef.nativeElement.firstElementChild.value = "";
        this.elementRef.nativeElement.firstElementChild.click();
    }
    _fileInputChange(event) {
        if (event.currentTarget.files && event.currentTarget.files.length) {
            this.onFileSelected.emit(event.currentTarget.files);
        }
    }
    ngOnInit() {
    }
};
FileDialogComponent.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], FileDialogComponent.prototype, "filter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], FileDialogComponent.prototype, "allowMultiple", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FileDialogComponent.prototype, "onFileSelected", void 0);
FileDialogComponent = __decorate([
    Component({
        selector: 'kFileDialog',
        template: "<input tabindex=\"-1\" [attr.multiple]=\"allowMultiple ? true : null\" type=\"file\" accept=\"{{filter}}\" (change)=\"_fileInputChange($event)\"/>\n",
        styles: ["input{position:fixed;left:-1000px;top:-1000px}"]
    }),
    __metadata("design:paramtypes", [ElementRef])
], FileDialogComponent);
export { FileDialogComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbHR1cmEtbmcva2FsdHVyYS11aS8iLCJzb3VyY2VzIjpbImxpYi9maWxlLWRpYWxvZy9maWxlLWRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPekcsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFPL0IsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUxqQyxXQUFNLEdBQVcsRUFBRSxDQUFDO1FBQ3BCLGtCQUFhLEdBQVksS0FBSyxDQUFDO1FBRTlCLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUl0RCxDQUFDO0lBRU0sSUFBSSxDQUFDLEtBQWM7UUFFekIsSUFBSSxLQUFLLEVBQ1Q7WUFDQyxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsS0FBSztRQUM1QixJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDakU7WUFDQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BEO0lBQ0YsQ0FBQztJQUVELFFBQVE7SUFFUixDQUFDO0NBQ0QsQ0FBQTs7WUF6QmdDLFVBQVU7O0FBTGpDO0lBQVIsS0FBSyxFQUFFOzttREFBcUI7QUFDcEI7SUFBUixLQUFLLEVBQUU7OzBEQUFnQztBQUU5QjtJQUFULE1BQU0sRUFBRTs7MkRBQTZDO0FBTDFDLG1CQUFtQjtJQUwvQixTQUFTLENBQUM7UUFDVixRQUFRLEVBQUUsYUFBYTtRQUN2QixnS0FBMkM7O0tBRTNDLENBQUM7cUNBUStCLFVBQVU7R0FQOUIsbUJBQW1CLENBZ0MvQjtTQWhDWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPdXRwdXQsIEV2ZW50RW1pdHRlciwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgT25Jbml0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAna0ZpbGVEaWFsb2cnLFxuXHR0ZW1wbGF0ZVVybDogJy4vZmlsZS1kaWFsb2cuY29tcG9uZW50Lmh0bWwnLFxuXHRzdHlsZVVybHM6IFsnLi9maWxlLWRpYWxvZy5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVEaWFsb2dDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG5cdEBJbnB1dCgpIGZpbHRlcjogc3RyaW5nID0gXCJcIjtcblx0QElucHV0KCkgYWxsb3dNdWx0aXBsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG5cdEBPdXRwdXQoKSBvbkZpbGVTZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8RmlsZVtdPigpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xuXG5cdH1cblxuXHRwdWJsaWMgb3BlbihldmVudD8gOiBFdmVudCkge1xuXG5cdFx0aWYgKGV2ZW50KVxuXHRcdHtcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdFx0dGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQudmFsdWUgPSBcIlwiO1xuXHRcdHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZpcnN0RWxlbWVudENoaWxkLmNsaWNrKCk7XG5cdH1cblxuXHRwdWJsaWMgX2ZpbGVJbnB1dENoYW5nZShldmVudCl7XG5cdFx0aWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuZmlsZXMgJiYgZXZlbnQuY3VycmVudFRhcmdldC5maWxlcy5sZW5ndGgpXG5cdFx0e1xuXHRcdFx0dGhpcy5vbkZpbGVTZWxlY3RlZC5lbWl0KGV2ZW50LmN1cnJlbnRUYXJnZXQuZmlsZXMpO1xuXHRcdH1cblx0fVxuXG5cdG5nT25Jbml0KCkge1xuXG5cdH1cbn1cblxuIl19