import { AfterViewInit, EventEmitter, OnDestroy, ElementRef, TemplateRef, Renderer2 } from "@angular/core";
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/fromEvent';
export declare const PopupWidgetStates: {
    Open: string;
    BeforeClose: string;
    Close: string;
    Disabled: string;
};
export declare type popupStatus = {
    state: string;
    context?: any;
    reason?: string;
};
export declare type PopupWidgetXPositions = 'left' | 'right' | 'center';
export declare type PopupWidgetYPositions = 'top' | 'bottom' | 'center';
export declare class PopupWidgetComponent implements AfterViewInit, OnDestroy {
    popup: ElementRef;
    private renderer;
    transparent: boolean;
    appendTo: any;
    popupWidth: number;
    popupHeight: number | 'auto';
    showTooltip: boolean;
    preventPageScroll: boolean;
    modal: boolean;
    slider: boolean;
    fullScreen: boolean;
    closeBtn: boolean;
    closeBtnInside: boolean;
    closeOnClickOutside: boolean;
    closeOnResize: boolean;
    closeOnBrowserNav: boolean;
    targetOffset: any;
    childrenPopups: PopupWidgetComponent[];
    trigger: 'click' | 'hover';
    placement: {
        x: PopupWidgetXPositions;
        y: PopupWidgetYPositions;
    };
    closeOnScroll: boolean;
    _template: TemplateRef<any>;
    opened: boolean;
    closed: boolean;
    private readonly _toggleFunc;
    private readonly _openFunc;
    private readonly _closeFunc;
    private _viewInitialize;
    set targetRef(targetRef: any);
    get targetRef(): any;
    set parentPopup(parentPopup: PopupWidgetComponent);
    get parentPopup(): PopupWidgetComponent;
    onOpen: EventEmitter<any>;
    onClose: EventEmitter<any>;
    private _targetRef;
    private _saveScrollPosition;
    _popupWidgetHeight: string;
    private _modalOverlay;
    private _parentPopup;
    private _stateChangeSubscription;
    private _statechange;
    state$: Observable<popupStatus>;
    constructor(popup: ElementRef, renderer: Renderer2);
    open(): void;
    close(context?: any, reason?: string): void;
    toggle(): void;
    get isShow(): boolean;
    get isEnabled(): boolean;
    onWindowResize(): void;
    onPopState(event: any): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private addClickOutsideSupport;
    private blockMouseDownHandler;
    private removeClickOutsideSupport;
    private restorePageScroll;
    private validate;
    private appendChild;
    private removeChild;
    private isElement;
    private setPosition;
    private validatePosition;
}
