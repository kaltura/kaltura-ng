import { Observable } from 'rxjs';
import { KalturaLogger } from '../kaltura-logger';
export declare type PollInterval = 10 | 30 | 60 | 300;
export interface RequestFactory<TRequest, TResponse> {
    create(): TRequest;
}
export declare abstract class ServerPolls<TRequest, TError> {
    private _pollQueue;
    private _tokenGenerator;
    private _queueTimeout;
    private _missingDestoryHandling;
    private _subscriptions;
    private _state;
    private _logger;
    state$: Observable<{
        busy: boolean;
    }>;
    private _queueInterval;
    protected abstract _executeRequests(requests: TRequest[]): Observable<{
        error: TError;
        result: any;
    }[]>;
    protected abstract _createGlobalError(error?: Error): TError;
    protected abstract _getOnDestroy$(): Observable<void>;
    protected abstract _canExecute(): boolean;
    constructor(kalturaLogger: KalturaLogger);
    private _warnAboutMissingDestory;
    private _initialize;
    private _cancelQueueInterval;
    private _getPollQueueList;
    private _setupQueueTimer;
    forcePolling(): void;
    private _queryPollItems;
    private _removeSubscription;
    private _onQueueTimerTick;
    private _propagateServerResponse;
    isBusy(): boolean;
    register<TResponse>(intervalInSeconds: PollInterval, requestFactory: RequestFactory<TRequest, TResponse>): Observable<{
        error: TError;
        result: TResponse;
    }>;
}
