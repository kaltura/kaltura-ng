import { InjectionToken } from '@angular/core';
export declare type Context = {
    [key: string]: any;
};
export declare type DefferedContext = () => Context;
export declare const KalturaLoggerInjectionToken: InjectionToken<KalturaLogger>;
export interface KalturaLogger {
    trace(message: string, context?: Context): void;
    trace(message: string, context?: DefferedContext): void;
    trace(message: string, context?: Context | DefferedContext): void;
    debug(message: string, context?: Context): void;
    debug(message: string, context?: DefferedContext): void;
    debug(message: string, context?: Context | DefferedContext): void;
    info(message: string, context?: Context): void;
    info(message: string, context?: DefferedContext): void;
    info(message: string, context?: Context | DefferedContext): void;
    warn(message: string, context?: Context): void;
    warn(message: string, context?: DefferedContext): void;
    warn(message: string, context?: Context | DefferedContext): void;
    error(message: string, context?: Context): void;
    error(message: string, error?: Error): void;
    error(message: string, context?: Error | Context): void;
    fatal(message: string, context?: Context): void;
    fatal(message: string, error?: Error): void;
    fatal(message: string, context?: Error | Context): void;
    subLogger(name: string): KalturaLogger;
}
export declare class EmptyLogger implements KalturaLogger {
    trace(message: string, context?: Context): void;
    trace(message: string, context?: DefferedContext): void;
    trace(message: string, context?: Context | DefferedContext): void;
    debug(message: string, context?: Context): void;
    debug(message: string, context?: DefferedContext): void;
    debug(message: string, context?: Context | DefferedContext): void;
    info(message: string, context?: Context): void;
    info(message: string, context?: DefferedContext): void;
    info(message: string, context?: Context | DefferedContext): void;
    warn(message: string, context?: Context): void;
    warn(message: string, context?: DefferedContext): void;
    warn(message: string, context?: Context | DefferedContext): void;
    error(message: string, context?: Context): void;
    error(message: string, error?: Error): void;
    error(message: string, context?: Error | Context): void;
    fatal(message: string, context?: Context): void;
    fatal(message: string, error?: Error): void;
    fatal(message: string, context?: Error | Context): void;
    subLogger(name: string): KalturaLogger;
}
