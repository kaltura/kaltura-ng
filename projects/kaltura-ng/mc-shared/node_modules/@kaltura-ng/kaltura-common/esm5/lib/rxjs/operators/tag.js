import { __extends } from "tslib";
import { Subscriber } from "rxjs";
import { OperationTagStoreMediator } from "../../operation-tag/operation-tag-store-mediator";
export function tag(action) {
    return function (source) { return source.lift(new TagOperator(action)); };
}
var TagOperator = /** @class */ (function () {
    function TagOperator(_tag) {
        this._tag = _tag;
    }
    TagOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new TagSubscriber(subscriber, this._tag));
    };
    return TagOperator;
}());
var TagSubscriber = /** @class */ (function (_super) {
    __extends(TagSubscriber, _super);
    function TagSubscriber(destination, _tag) {
        var _this = _super.call(this, destination) || this;
        _this._tag = _tag;
        _this._isDecreased = false;
        OperationTagStoreMediator.increase(_this._tag);
        return _this;
    }
    TagSubscriber.prototype._error = function (err) {
        if (this._tag && !this._isDecreased) {
            this._isDecreased = true;
            OperationTagStoreMediator.decrease(this._tag);
        }
        _super.prototype._error.call(this, err);
    };
    TagSubscriber.prototype._complete = function () {
        if (this._tag && !this._isDecreased) {
            this._isDecreased = true;
            OperationTagStoreMediator.decrease(this._tag);
        }
        _super.prototype._complete.call(this);
    };
    TagSubscriber.prototype.unsubscribe = function () {
        if (!this.closed && this._tag && !this._isDecreased) {
            this._isDecreased = true;
            OperationTagStoreMediator.decrease(this._tag);
        }
        _super.prototype.unsubscribe.call(this);
    };
    return TagSubscriber;
}(Subscriber));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGthbHR1cmEtbmcva2FsdHVyYS1jb21tb24vIiwic291cmNlcyI6WyJsaWIvcnhqcy9vcGVyYXRvcnMvdGFnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQWlELFVBQVUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDL0YsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sa0RBQWtELENBQUM7QUFFM0YsTUFBTSxVQUFVLEdBQUcsQ0FBSSxNQUFNO0lBQzNCLE9BQU8sVUFBQyxNQUFxQixJQUFLLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFwQyxDQUFvQyxDQUFDO0FBQ3pFLENBQUM7QUFFRDtJQUNFLHFCQUFvQixJQUFZO1FBQVosU0FBSSxHQUFKLElBQUksQ0FBUTtJQUNoQyxDQUFDO0lBRUQsMEJBQUksR0FBSixVQUFLLFVBQXlCLEVBQUUsTUFBVztRQUN6QyxPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFQRCxJQU9DO0FBRUQ7SUFBK0IsaUNBQWE7SUFHMUMsdUJBQVksV0FBMEIsRUFDbEIsSUFBWTtRQURoQyxZQUVFLGtCQUFNLFdBQVcsQ0FBQyxTQUduQjtRQUptQixVQUFJLEdBQUosSUFBSSxDQUFRO1FBSHhCLGtCQUFZLEdBQUcsS0FBSyxDQUFDO1FBTTNCLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7O0lBQ2hELENBQUM7SUFHUyw4QkFBTSxHQUFoQixVQUFpQixHQUFRO1FBQ3ZCLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFFbkMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7WUFDekIseUJBQXlCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUMvQztRQUNELGlCQUFNLE1BQU0sWUFBQyxHQUFHLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRVMsaUNBQVMsR0FBbkI7UUFDRSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0M7UUFDRCxpQkFBTSxTQUFTLFdBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsbUNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ25ELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3pCLHlCQUF5QixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDL0M7UUFFRCxpQkFBTSxXQUFXLFdBQUUsQ0FBQztJQUN0QixDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBcENELENBQStCLFVBQVUsR0FvQ3hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtNb25vVHlwZU9wZXJhdG9yRnVuY3Rpb24sIE9ic2VydmFibGUsIE9wZXJhdG9yLCBTdWJzY3JpYmVyLCBUZWFyZG93bkxvZ2ljfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHtPcGVyYXRpb25UYWdTdG9yZU1lZGlhdG9yfSBmcm9tIFwiLi4vLi4vb3BlcmF0aW9uLXRhZy9vcGVyYXRpb24tdGFnLXN0b3JlLW1lZGlhdG9yXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWc8VD4oYWN0aW9uKTogTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uPFQ+IHtcbiAgcmV0dXJuIChzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IHNvdXJjZS5saWZ0KG5ldyBUYWdPcGVyYXRvcihhY3Rpb24pKTtcbn1cblxuY2xhc3MgVGFnT3BlcmF0b3I8VD4gaW1wbGVtZW50cyBPcGVyYXRvcjxULCBUPiB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3RhZzogc3RyaW5nKSB7XG4gIH1cblxuICBjYWxsKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4sIHNvdXJjZTogYW55KTogVGVhcmRvd25Mb2dpYyB7XG4gICAgcmV0dXJuIHNvdXJjZS5zdWJzY3JpYmUobmV3IFRhZ1N1YnNjcmliZXIoc3Vic2NyaWJlciwgdGhpcy5fdGFnKSk7XG4gIH1cbn1cblxuY2xhc3MgVGFnU3Vic2NyaWJlcjxUPiBleHRlbmRzIFN1YnNjcmliZXI8VD4ge1xuICBwcml2YXRlIF9pc0RlY3JlYXNlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGRlc3RpbmF0aW9uOiBTdWJzY3JpYmVyPFQ+LFxuICAgICAgICAgICAgICBwcml2YXRlIF90YWc6IHN0cmluZykge1xuICAgIHN1cGVyKGRlc3RpbmF0aW9uKTtcblxuICAgIE9wZXJhdGlvblRhZ1N0b3JlTWVkaWF0b3IuaW5jcmVhc2UodGhpcy5fdGFnKTtcbiAgfVxuXG5cbiAgcHJvdGVjdGVkIF9lcnJvcihlcnI6IGFueSkge1xuICAgIGlmICh0aGlzLl90YWcgJiYgIXRoaXMuX2lzRGVjcmVhc2VkKSB7XG5cbiAgICAgIHRoaXMuX2lzRGVjcmVhc2VkID0gdHJ1ZTtcbiAgICAgIE9wZXJhdGlvblRhZ1N0b3JlTWVkaWF0b3IuZGVjcmVhc2UodGhpcy5fdGFnKTtcbiAgICB9XG4gICAgc3VwZXIuX2Vycm9yKGVycik7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2NvbXBsZXRlKCkge1xuICAgIGlmICh0aGlzLl90YWcgJiYgIXRoaXMuX2lzRGVjcmVhc2VkKSB7XG4gICAgICB0aGlzLl9pc0RlY3JlYXNlZCA9IHRydWU7XG4gICAgICBPcGVyYXRpb25UYWdTdG9yZU1lZGlhdG9yLmRlY3JlYXNlKHRoaXMuX3RhZyk7XG4gICAgfVxuICAgIHN1cGVyLl9jb21wbGV0ZSgpO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsb3NlZCAmJiB0aGlzLl90YWcgJiYgIXRoaXMuX2lzRGVjcmVhc2VkKSB7XG4gICAgICB0aGlzLl9pc0RlY3JlYXNlZCA9IHRydWU7XG4gICAgICBPcGVyYXRpb25UYWdTdG9yZU1lZGlhdG9yLmRlY3JlYXNlKHRoaXMuX3RhZyk7XG4gICAgfVxuXG4gICAgc3VwZXIudW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIl19