import { Provider, OnDestroy } from '@angular/core';
import { InjectionToken } from '@angular/core';
import { KalturaLoggerRecordService } from './kaltura-logger-record.service';
export declare const KalturaLoggerName: InjectionToken<string>;
export declare type Context = {
    [key: string]: any;
};
export declare type DefferedContext = () => Context;
export declare type LogLevels = 'All' | 'Trace' | 'Debug' | 'Info' | 'Warn' | 'Error' | 'Fatal' | 'Off';
export declare class KalturaLogger implements OnDestroy {
    private _loggerRecordInterceptor;
    static resetDefaultExecuted: boolean;
    static resetDefaultJSNLog(): void;
    static createLogger(loggerName: string): Provider[];
    private _name;
    private _logger;
    get name(): string;
    constructor(name: string, parentLogger: KalturaLogger, _loggerRecordInterceptor: KalturaLoggerRecordService);
    private _addLogToBuffer;
    startRecordingLogs(): void;
    getRecordedLogs(): any[] | void;
    isValidLogLevel(level: LogLevels): boolean;
    setOptions(options: {
        level?: LogLevels;
    }): void;
    subLogger(name: string): KalturaLogger;
    ngOnDestroy(): void;
    private _createLogObject;
    trace(message: string, context?: Context): void;
    trace(message: string, context?: DefferedContext): void;
    debug(message: string, context?: Context): void;
    debug(message: string, context?: DefferedContext): void;
    info(message: string, context?: Context): void;
    info(message: string, context?: DefferedContext): void;
    warn(message: string, context?: Context): void;
    warn(message: string, context?: DefferedContext): void;
    error(message: string, context?: Context): void;
    error(message: string, error?: Error): void;
    fatal(message: string, context?: Context): void;
    fatal(message: string, error?: Error): void;
}
