import { __decorate, __metadata, __param } from "tslib";
import { Injectable, SkipSelf, Optional, Self, Inject } from '@angular/core';
import { JL } from 'jsnlog';
import { InjectionToken } from '@angular/core';
import { KalturaLoggerRecordService } from './kaltura-logger-record.service';
export var KalturaLoggerName = new InjectionToken('kaltura-logger-name');
var randomLoggerNameNumber = 1;
var KalturaLogger = /** @class */ (function () {
    function KalturaLogger(name, parentLogger, _loggerRecordInterceptor) {
        this._loggerRecordInterceptor = _loggerRecordInterceptor;
        KalturaLogger_1.resetDefaultJSNLog();
        if (!name) {
            name = 'logger' + randomLoggerNameNumber;
            randomLoggerNameNumber++;
        }
        name = name.replace(/[.]/g, '_');
        this._name = parentLogger ? parentLogger.name + "." + name : name;
        this._logger = JL(this._name);
        this._logger.trace('logger created!');
    }
    KalturaLogger_1 = KalturaLogger;
    KalturaLogger.resetDefaultJSNLog = function () {
        if (!KalturaLogger_1.resetDefaultExecuted) {
            KalturaLogger_1.resetDefaultExecuted = true;
            var consoleAppender = JL.createConsoleAppender('consoleAppender');
            JL().setOptions({
                appenders: [consoleAppender]
            });
        }
    };
    KalturaLogger.createLogger = function (loggerName) {
        return [
            KalturaLogger_1,
            {
                provide: KalturaLoggerName, useValue: loggerName
            }
        ];
    };
    Object.defineProperty(KalturaLogger.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    KalturaLogger.prototype._addLogToBuffer = function (logItem) {
        if (this._loggerRecordInterceptor) {
            this._loggerRecordInterceptor.addLogItemToBuffer(logItem);
        }
    };
    KalturaLogger.prototype.startRecordingLogs = function () {
        if (this._loggerRecordInterceptor) {
            this._loggerRecordInterceptor.startRecord();
        }
    };
    KalturaLogger.prototype.getRecordedLogs = function () {
        if (this._loggerRecordInterceptor) {
            return this._loggerRecordInterceptor.getRecordedLogs();
        }
    };
    KalturaLogger.prototype.isValidLogLevel = function (level) {
        var validLogLevels = ['All', 'Trace', 'Debug', 'Info', 'Warn', 'Error', 'Fatal', 'Off'];
        return validLogLevels.indexOf(level) !== -1;
    };
    KalturaLogger.prototype.setOptions = function (options) {
        var level = undefined;
        if (this.isValidLogLevel(options.level) && JL) {
            var getLevelValue = JL["get" + options.level + "Level"];
            level = typeof getLevelValue === 'function' ? getLevelValue() : undefined;
        }
        JL().setOptions({ level: level });
    };
    KalturaLogger.prototype.subLogger = function (name) {
        return new KalturaLogger_1(name, this, this._loggerRecordInterceptor);
    };
    KalturaLogger.prototype.ngOnDestroy = function () {
        this._logger.debug('logger destroyed');
        delete this._logger;
    };
    KalturaLogger.prototype._createLogObject = function (level, message, context) {
        this._addLogToBuffer({ level: level, message: message, context: context });
        return context ? Object.assign({ message: message, level: level }, context) : message;
    };
    KalturaLogger.prototype.trace = function (message, context) {
        var _this = this;
        if (context && typeof context === 'function') {
            this._logger.trace(function () { return _this._createLogObject('trace', message, context()); });
        }
        else {
            this._logger.trace(this._createLogObject('trace', message, context));
        }
    };
    KalturaLogger.prototype.debug = function (message, context) {
        var _this = this;
        if (context && typeof context === 'function') {
            this._logger.debug(function () { return _this._createLogObject('debug', message, context()); });
        }
        else {
            this._logger.debug(this._createLogObject('debug', message, context));
        }
    };
    KalturaLogger.prototype.info = function (message, context) {
        var _this = this;
        if (context && typeof context === 'function') {
            this._logger.info(function () { return _this._createLogObject('info', message, context()); });
        }
        else {
            this._logger.info(this._createLogObject('info', message, context));
        }
    };
    KalturaLogger.prototype.warn = function (message, context) {
        var _this = this;
        if (context && typeof context === 'function') {
            this._logger.warn(function () { return _this._createLogObject('warn', message, context()); });
        }
        else {
            this._logger.warn(this._createLogObject('warn', message, context));
        }
    };
    KalturaLogger.prototype.error = function (message, context) {
        this._logger.error(this._createLogObject('error', message, context));
    };
    KalturaLogger.prototype.fatal = function (message, context) {
        if (context && context instanceof Error) {
            this._logger.fatalException(message, context);
        }
        else {
            this._logger.fatal(this._createLogObject('fatal', message, context));
        }
    };
    var KalturaLogger_1;
    KalturaLogger.resetDefaultExecuted = false;
    KalturaLogger.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [KalturaLoggerName,] }, { type: Optional }, { type: Self }] },
        { type: KalturaLogger, decorators: [{ type: SkipSelf }, { type: Optional }] },
        { type: KalturaLoggerRecordService, decorators: [{ type: Optional }] }
    ]; };
    KalturaLogger = KalturaLogger_1 = __decorate([
        Injectable(),
        __param(0, Inject(KalturaLoggerName)), __param(0, Optional()), __param(0, Self()),
        __param(1, SkipSelf()), __param(1, Optional()),
        __param(2, Optional()),
        __metadata("design:paramtypes", [String, KalturaLogger,
            KalturaLoggerRecordService])
    ], KalturaLogger);
    return KalturaLogger;
}());
export { KalturaLogger };
//# sourceMappingURL=data:application/json;base64,